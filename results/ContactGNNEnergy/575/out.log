#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_10_14_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy15', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=575, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/575', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/575/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/575/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/575/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f992f388310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 16.123 minutes
Number of samples: 5000
Average num edges per graph:  65200.434
Mean degree: [255.   254.73 254.98 ... 255.   255.   254.94] +- [0.   0.96 0.15 ... 0.   0.   0.3 ]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f98e62da1c0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.8872
Mean test/val loss: 1.7818
[25, 50, 75] percentiles test/val loss: [1.2572 1.664  2.2343]

Epoch 4, loss = 1.7393
Mean test/val loss: 1.6001
[25, 50, 75] percentiles test/val loss: [1.1429 1.5545 2.0155]

Epoch 6, loss = 1.5176
Mean test/val loss: 1.4364
[25, 50, 75] percentiles test/val loss: [0.9881 1.374  1.7978]

Epoch 8, loss = 1.3875
Mean test/val loss: 1.2792
[25, 50, 75] percentiles test/val loss: [0.8526 1.187  1.592 ]

Epoch 10, loss = 1.2871
Mean test/val loss: 1.2257
[25, 50, 75] percentiles test/val loss: [0.8283 1.1375 1.527 ]

Epoch 12, loss = 1.2263
Mean test/val loss: 1.1686
[25, 50, 75] percentiles test/val loss: [0.7739 1.0696 1.4732]

Epoch 14, loss = 1.1860
Mean test/val loss: 1.1199
[25, 50, 75] percentiles test/val loss: [0.743  1.0307 1.39  ]

Epoch 16, loss = 1.1538
Mean test/val loss: 1.1017
[25, 50, 75] percentiles test/val loss: [0.7302 1.0163 1.3537]

Epoch 18, loss = 1.1261
Mean test/val loss: 1.0835
[25, 50, 75] percentiles test/val loss: [0.7128 1.0054 1.3561]

Epoch 20, loss = 1.1047
Mean test/val loss: 1.0759
[25, 50, 75] percentiles test/val loss: [0.7139 0.9772 1.3183]

Epoch 22, loss = 1.0842
Mean test/val loss: 1.0290
[25, 50, 75] percentiles test/val loss: [0.6557 0.9421 1.2839]

Epoch 24, loss = 1.0663
Mean test/val loss: 1.0391
[25, 50, 75] percentiles test/val loss: [0.6573 0.9402 1.2951]

Epoch 26, loss = 1.0691
Mean test/val loss: 0.9918
[25, 50, 75] percentiles test/val loss: [0.6173 0.9043 1.2549]

Epoch 28, loss = 1.0377
Mean test/val loss: 1.0043
[25, 50, 75] percentiles test/val loss: [0.6466 0.9167 1.2464]

Epoch 30, loss = 1.0274
Mean test/val loss: 1.0278
[25, 50, 75] percentiles test/val loss: [0.6806 0.9258 1.2647]

Epoch 32, loss = 1.0215
Mean test/val loss: 0.9988
[25, 50, 75] percentiles test/val loss: [0.6411 0.9119 1.2433]

Epoch 34, loss = 1.0028
Mean test/val loss: 0.9937
[25, 50, 75] percentiles test/val loss: [0.6321 0.9123 1.2284]

Epoch 36, loss = 0.9947
Mean test/val loss: 0.9805
[25, 50, 75] percentiles test/val loss: [0.6267 0.8895 1.216 ]

Epoch 38, loss = 0.9777
Mean test/val loss: 0.9755
[25, 50, 75] percentiles test/val loss: [0.6297 0.8869 1.2049]

Epoch 40, loss = 0.9712
Mean test/val loss: 0.9564
[25, 50, 75] percentiles test/val loss: [0.6075 0.8662 1.1792]

New lr: 1e-05
Epoch 42, loss = 0.8893
Mean test/val loss: 0.9032
[25, 50, 75] percentiles test/val loss: [0.5667 0.8301 1.1   ]

Epoch 44, loss = 0.8755
Mean test/val loss: 0.8973
[25, 50, 75] percentiles test/val loss: [0.5637 0.8267 1.0977]

Epoch 46, loss = 0.8657
Mean test/val loss: 0.8960
[25, 50, 75] percentiles test/val loss: [0.5609 0.8225 1.0873]

Epoch 48, loss = 0.8573
Mean test/val loss: 0.8927
[25, 50, 75] percentiles test/val loss: [0.5642 0.821  1.0841]

Epoch 50, loss = 0.8499
Mean test/val loss: 0.8906
[25, 50, 75] percentiles test/val loss: [0.5607 0.821  1.083 ]

Epoch 52, loss = 0.8428
Mean test/val loss: 0.8905
[25, 50, 75] percentiles test/val loss: [0.5559 0.8119 1.0888]

Epoch 54, loss = 0.8364
Mean test/val loss: 0.8878
[25, 50, 75] percentiles test/val loss: [0.5571 0.808  1.0788]

Epoch 56, loss = 0.8303
Mean test/val loss: 0.8866
[25, 50, 75] percentiles test/val loss: [0.5552 0.8163 1.0827]

Epoch 58, loss = 0.8242
Mean test/val loss: 0.8875
[25, 50, 75] percentiles test/val loss: [0.5561 0.8073 1.0846]

Epoch 60, loss = 0.8186
Mean test/val loss: 0.8857
[25, 50, 75] percentiles test/val loss: [0.5619 0.8084 1.0829]

Epoch 62, loss = 0.8132
Mean test/val loss: 0.8830
[25, 50, 75] percentiles test/val loss: [0.559  0.8045 1.0858]

Epoch 64, loss = 0.8079
Mean test/val loss: 0.8855
[25, 50, 75] percentiles test/val loss: [0.5535 0.8029 1.0859]

Epoch 66, loss = 0.8028
Mean test/val loss: 0.8836
[25, 50, 75] percentiles test/val loss: [0.5607 0.8008 1.0751]

Epoch 68, loss = 0.7977
Mean test/val loss: 0.8848
[25, 50, 75] percentiles test/val loss: [0.5595 0.8064 1.0825]

Epoch 70, loss = 0.7931
Mean test/val loss: 0.8836
[25, 50, 75] percentiles test/val loss: [0.561  0.7965 1.0812]


Total parameters: 51479472
Total training + validation time: 10.0 hours, 21.0 mins, and 3.3000000000029104 secs
Final val loss: 0.8835528161227703

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_10_14_23 sample981: 0.7190532684326172
dataset_10_14_23 sample324: 0.3148094713687897
dataset_10_14_23 sample3464: 2.208759307861328
dataset_10_14_23 sample2834: 0.7218286991119385
dataset_10_14_23 sample1936: 0.6272375583648682
MSE Loss: 0.918 +- 0.662

Downsampling (200k) Results:

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16896, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy11', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=463, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=True, input_L_to_D_mode='mean_dist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/463', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/463/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/463/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/463/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f513b659310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 14.559 minutes
Number of samples: 5000
Average num edges per graph:  61627.9772
Mean degree: [245.68 254.88 219.23 ... 251.09 215.5  255.  ] +- [ 9.13  0.37 26.94 ...  4.77 29.22  0.  ]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f50f634a8e0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.8127
Mean test/val loss: 0.7862
[25, 50, 75] percentiles test/val loss: [0.3671 0.6294 1.0047]

Epoch 4, loss = 1.4144
Mean test/val loss: 0.8813
[25, 50, 75] percentiles test/val loss: [0.4696 0.7654 1.1281]

Epoch 6, loss = 0.8581
Mean test/val loss: 0.7901
[25, 50, 75] percentiles test/val loss: [0.3504 0.628  1.0302]

Epoch 8, loss = 0.8029
Mean test/val loss: 0.7956
[25, 50, 75] percentiles test/val loss: [0.399  0.61   0.9867]

Epoch 10, loss = 0.8290
Mean test/val loss: 0.7309
[25, 50, 75] percentiles test/val loss: [0.3508 0.5836 0.9074]

Epoch 12, loss = 4.7554
Mean test/val loss: 0.7775
[25, 50, 75] percentiles test/val loss: [0.3514 0.6261 1.017 ]

Epoch 14, loss = 0.9124
Mean test/val loss: 0.7695
[25, 50, 75] percentiles test/val loss: [0.3428 0.6071 1.0069]

Epoch 16, loss = 2.1540
Mean test/val loss: 0.9190
[25, 50, 75] percentiles test/val loss: [0.4086 0.765  1.1414]

Epoch 18, loss = 58.2238
Mean test/val loss: 22.2872
[25, 50, 75] percentiles test/val loss: [10.0332 16.57   26.0777]

Epoch 20, loss = 1.0451
Mean test/val loss: 1.2166
[25, 50, 75] percentiles test/val loss: [0.8932 1.1387 1.4119]

Epoch 22, loss = 1.2934
Mean test/val loss: 5.3610
[25, 50, 75] percentiles test/val loss: [4.2471 5.2762 6.3401]

Epoch 24, loss = 10.1170
Mean test/val loss: 299.0642
[25, 50, 75] percentiles test/val loss: [219.1347 304.2784 372.5875]

Epoch 26, loss = 4.7684
Mean test/val loss: 3.2854
[25, 50, 75] percentiles test/val loss: [0.9878 1.6852 3.3609]

Epoch 28, loss = 1.0456
Mean test/val loss: 0.9056
[25, 50, 75] percentiles test/val loss: [0.4675 0.7505 1.0849]

Epoch 30, loss = 8.1270
Mean test/val loss: 0.9134
[25, 50, 75] percentiles test/val loss: [0.4486 0.7165 1.0911]

Epoch 32, loss = 10.0689
Mean test/val loss: 0.8506
[25, 50, 75] percentiles test/val loss: [0.3783 0.6853 1.0499]

Epoch 34, loss = 0.7412
Mean test/val loss: 0.7198
[25, 50, 75] percentiles test/val loss: [0.3387 0.5721 0.911 ]

Epoch 36, loss = 1.9509
Mean test/val loss: 0.8374
[25, 50, 75] percentiles test/val loss: [0.3899 0.685  1.0502]

Epoch 38, loss = 0.7496
Mean test/val loss: 0.7154
[25, 50, 75] percentiles test/val loss: [0.3354 0.5649 0.9205]

Epoch 40, loss = 0.9163
Mean test/val loss: 0.7381
[25, 50, 75] percentiles test/val loss: [0.3431 0.5867 0.9414]

New lr: 1e-05
Epoch 42, loss = 1.1568
Mean test/val loss: 1.0095
[25, 50, 75] percentiles test/val loss: [0.3998 0.6809 1.0539]

Epoch 44, loss = 1.2474
Mean test/val loss: 1.2871
[25, 50, 75] percentiles test/val loss: [0.4263 0.8637 1.8172]

Epoch 46, loss = 3.4400
Mean test/val loss: 3.4811
[25, 50, 75] percentiles test/val loss: [1.3614 2.5741 5.2759]

Epoch 48, loss = 2.0700
Mean test/val loss: 1.6787
[25, 50, 75] percentiles test/val loss: [0.8557 1.4655 2.1037]

Epoch 50, loss = 1.0082
Mean test/val loss: 0.9427
[25, 50, 75] percentiles test/val loss: [0.4994 0.834  1.2336]

Epoch 52, loss = 0.6280
Mean test/val loss: 0.5938
[25, 50, 75] percentiles test/val loss: [0.3017 0.4883 0.7577]

Epoch 54, loss = 0.5572
Mean test/val loss: 0.5526
[25, 50, 75] percentiles test/val loss: [0.2789 0.4567 0.6846]

Epoch 56, loss = 0.5190
Mean test/val loss: 0.6459
[25, 50, 75] percentiles test/val loss: [0.375  0.5745 0.7981]

Epoch 58, loss = 9.2538
Mean test/val loss: 11.6322
[25, 50, 75] percentiles test/val loss: [ 2.083   4.8722 12.7853]

Epoch 60, loss = 2.2759
Mean test/val loss: 0.9582
[25, 50, 75] percentiles test/val loss: [0.3908 0.6492 1.0098]

Epoch 62, loss = 0.6120
Mean test/val loss: 0.5809
[25, 50, 75] percentiles test/val loss: [0.296  0.4892 0.7254]

Epoch 64, loss = 0.5172
Mean test/val loss: 0.5142
[25, 50, 75] percentiles test/val loss: [0.2566 0.4148 0.6444]

Epoch 66, loss = 2.5514
Mean test/val loss: 2.2804
[25, 50, 75] percentiles test/val loss: [0.6919 1.7063 3.1607]

Epoch 68, loss = 1.3204
Mean test/val loss: 0.9190
[25, 50, 75] percentiles test/val loss: [0.4866 0.8343 1.1673]

Epoch 70, loss = 0.6020
Mean test/val loss: 0.5629
[25, 50, 75] percentiles test/val loss: [0.284  0.4688 0.7155]

Epoch 72, loss = 0.4956
Mean test/val loss: 0.4982
[25, 50, 75] percentiles test/val loss: [0.2344 0.4012 0.6319]

Epoch 74, loss = 0.7800
Mean test/val loss: 0.7614
[25, 50, 75] percentiles test/val loss: [0.3508 0.6488 1.0027]

Epoch 76, loss = 0.6142
Mean test/val loss: 0.5604
[25, 50, 75] percentiles test/val loss: [0.2822 0.4632 0.6847]

Epoch 78, loss = 3.9256
Mean test/val loss: 2.8620
[25, 50, 75] percentiles test/val loss: [0.6245 1.5705 3.4182]

Epoch 80, loss = 0.7570
Mean test/val loss: 0.7517
[25, 50, 75] percentiles test/val loss: [0.3595 0.629  0.9157]


Total parameters: 26974000
Total training + validation time: 16.0 hours, 23.0 mins, and 58.400000000001455 secs
Final val loss: 0.75169677336514

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_04_28_23 sample981: 1.628347396850586
dataset_04_28_23 sample324: 1.1309996843338013
dataset_04_28_23 sample3464: 0.9725290536880493
dataset_04_28_23 sample2834: 0.9571086168289185
dataset_04_28_23 sample1936: 0.6971899271011353
MSE Loss: 1.077 +- 0.309

Downsampling (40%) Results:
dataset_04_28_23 sample1936-downsampling: 16.764324188232422
dataset_04_28_23 sample2834-downsampling: 10.053149223327637
dataset_04_28_23 sample324-downsampling: 20.61155128479004
dataset_04_28_23 sample3464-downsampling: 13.822164535522461
dataset_04_28_23 sample981-downsampling: 583.1983642578125
Loss: 128.89 +- 227.181

Removing /scratch/midway3/erschultz/ContactGNNEnergy11downsample
Original sampling (100%) Results:
dataset_04_28_23 sample1936-regular: 16.2755126953125
dataset_04_28_23 sample2834-regular: 10.103278160095215
dataset_04_28_23 sample324-regular: 20.043102264404297
dataset_04_28_23 sample3464-regular: 13.330652236938477
dataset_04_28_23 sample981-regular: 83.13903045654297
Loss: 28.578 +- 27.477

Removing /scratch/midway3/erschultz/ContactGNNEnergy11regsample

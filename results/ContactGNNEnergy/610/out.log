#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=11, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10', 'GridSize'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_11_16_23_hmec', '/project2/depablo/erschultz/dataset_11_16_23_imr90', '/project2/depablo/erschultz/dataset_11_16_23_k562'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy15', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=1667, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=610, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/610', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/610/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/610/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/610/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7fcc447d9550>, node_feature_size=1, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)', 'GridSize'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True),
  GridSize
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 20.577 minutes
Number of samples: 5001
Average num edges per graph:  65195.12617476505
Mean degree: [255.   254.83 254.85 ... 254.99 255.   255.  ] +- [0.   0.58 0.53 ... 0.09 0.   0.  ]

split sizes: train=4501, val=500, test=0, N=5001
First 100 val samples: [926, 1186, 1364, 1615, 700, 996, 1045, 154, 326, 41, 1024, 17, 516, 1049, 1527, 287, 88, 14, 1318, 30, 1382, 466, 1060, 1142, 360, 1114, 1041, 1538, 1478, 86, 212, 802, 1266, 9, 1610, 604, 316, 226, 441, 1542, 1409, 494, 458, 1349, 1385, 1494, 116, 1511, 1209, 613, 446, 1612, 791, 919, 1123, 1019, 664, 560, 1046, 1373, 1282, 19, 1187, 855, 327, 1196, 233, 861, 650, 1250, 1382, 878, 110, 549, 1237, 810, 1197, 1563, 1339, 1115, 320, 1554, 263, 283, 59, 1372, 1277, 692, 672, 950, 1379, 459, 23, 905, 1636, 576, 55, 1176, 221, 1517, 533, 1616]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fcc0e5f8e80>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.8146
Mean test/val loss: 1.6913
[25, 50, 75] percentiles test/val loss: [1.0295 1.55   2.1767]

Epoch 4, loss = 1.7074
Mean test/val loss: 1.5863
[25, 50, 75] percentiles test/val loss: [0.9689 1.469  2.0791]

Epoch 6, loss = 1.6104
Mean test/val loss: 1.5131
[25, 50, 75] percentiles test/val loss: [0.9658 1.4173 1.9356]

Epoch 8, loss = 1.5699
Mean test/val loss: 1.5263
[25, 50, 75] percentiles test/val loss: [0.9728 1.4474 1.9549]

Epoch 10, loss = 1.5130
Mean test/val loss: 1.4521
[25, 50, 75] percentiles test/val loss: [0.931  1.3773 1.8643]

Epoch 12, loss = 1.4730
Mean test/val loss: 1.4005
[25, 50, 75] percentiles test/val loss: [0.9103 1.3399 1.8134]

Epoch 14, loss = 1.4342
Mean test/val loss: 1.3944
[25, 50, 75] percentiles test/val loss: [0.8783 1.3156 1.8335]

Epoch 16, loss = 1.4077
Mean test/val loss: 1.3500
[25, 50, 75] percentiles test/val loss: [0.8624 1.27   1.7355]

Epoch 18, loss = 1.3838
Mean test/val loss: 1.3317
[25, 50, 75] percentiles test/val loss: [0.8259 1.2471 1.7435]

Epoch 20, loss = 1.3563
Mean test/val loss: 1.2994
[25, 50, 75] percentiles test/val loss: [0.8247 1.2093 1.6779]

Epoch 22, loss = 1.3321
Mean test/val loss: 1.2723
[25, 50, 75] percentiles test/val loss: [0.8346 1.1885 1.6502]

Epoch 24, loss = 1.3042
Mean test/val loss: 1.2619
[25, 50, 75] percentiles test/val loss: [0.8037 1.1982 1.6246]

Epoch 26, loss = 1.2721
Mean test/val loss: 1.2432
[25, 50, 75] percentiles test/val loss: [0.7899 1.1463 1.6304]

Epoch 28, loss = 1.2499
Mean test/val loss: 1.2191
[25, 50, 75] percentiles test/val loss: [0.7642 1.1344 1.578 ]

Epoch 30, loss = 1.2295
Mean test/val loss: 1.2167
[25, 50, 75] percentiles test/val loss: [0.76   1.148  1.5501]

Epoch 32, loss = 1.2140
Mean test/val loss: 1.1994
[25, 50, 75] percentiles test/val loss: [0.7447 1.1257 1.5601]

Epoch 34, loss = 1.2053
Mean test/val loss: 1.1887
[25, 50, 75] percentiles test/val loss: [0.7498 1.1314 1.538 ]

Epoch 36, loss = 1.1833
Mean test/val loss: 1.1715
[25, 50, 75] percentiles test/val loss: [0.7365 1.091  1.5198]

Epoch 38, loss = 1.1657
Mean test/val loss: 1.1827
[25, 50, 75] percentiles test/val loss: [0.725  1.0935 1.5556]

Epoch 40, loss = 1.1481
Mean test/val loss: 1.1605
[25, 50, 75] percentiles test/val loss: [0.7197 1.0713 1.5171]

New lr: 1e-05
Epoch 42, loss = 1.0739
Mean test/val loss: 1.1089
[25, 50, 75] percentiles test/val loss: [0.6697 1.0284 1.4687]

Epoch 44, loss = 1.0603
Mean test/val loss: 1.1055
[25, 50, 75] percentiles test/val loss: [0.6679 1.023  1.4669]

Epoch 46, loss = 1.0501
Mean test/val loss: 1.1022
[25, 50, 75] percentiles test/val loss: [0.6599 1.0167 1.4557]

Epoch 48, loss = 1.0412
Mean test/val loss: 1.0994
[25, 50, 75] percentiles test/val loss: [0.664  1.016  1.4503]

Epoch 50, loss = 1.0331
Mean test/val loss: 1.0977
[25, 50, 75] percentiles test/val loss: [0.6546 1.0101 1.4539]

Epoch 52, loss = 1.0260
Mean test/val loss: 1.0952
[25, 50, 75] percentiles test/val loss: [0.6476 1.0115 1.4439]

Epoch 54, loss = 1.0189
Mean test/val loss: 1.0966
[25, 50, 75] percentiles test/val loss: [0.6473 1.0073 1.4564]

Epoch 56, loss = 1.0121
Mean test/val loss: 1.0952
[25, 50, 75] percentiles test/val loss: [0.6528 1.0065 1.4491]

Epoch 58, loss = 1.0060
Mean test/val loss: 1.0952
[25, 50, 75] percentiles test/val loss: [0.6496 1.0116 1.4322]

Epoch 60, loss = 0.9997
Mean test/val loss: 1.0942
[25, 50, 75] percentiles test/val loss: [0.6434 0.9994 1.4452]


Total parameters: 51479600
Total training + validation time: 9.0 hours, 59.0 mins, and 12.099999999998545 secs
Final val loss: 1.094208341240883

split sizes: train=4501, val=500, test=0, N=5001
#### Plotting Script ####
Prediction Results:
dataset_11_16_23_k562 sample1179: 1.00986909866333
dataset_11_16_23_imr90 sample993: 2.2591214179992676
dataset_11_16_23_k562 sample1104: 1.5476529598236084
dataset_11_16_23_imr90 sample801: 1.1503409147262573
dataset_11_16_23_hmec sample1239: 0.1648094803094864
MSE_log: 1.226 +- 0.685

Downsampling (200k) Results:

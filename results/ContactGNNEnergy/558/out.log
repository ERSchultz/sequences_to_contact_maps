#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy1', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=558, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=True, input_L_to_D_mode='subtract', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/558', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/558/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/558/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/558/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f8d1a2ad280>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 12.348 minutes
Number of samples: 5000
Average num edges per graph:  64202.6016
Mean degree: [249.86 254.38 247.02 ... 253.91 251.64 251.34] +- [6.31 0.99 8.25 ... 2.04 5.21 3.97]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f8cd125d220>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.7865
Mean test/val loss: 1.8079
[25, 50, 75] percentiles test/val loss: [1.2098 1.7319 2.3398]

Epoch 4, loss = 1.6696
Mean test/val loss: 1.6965
[25, 50, 75] percentiles test/val loss: [1.1336 1.6225 2.1965]

Epoch 6, loss = 1.6087
Mean test/val loss: 1.5622
[25, 50, 75] percentiles test/val loss: [0.9975 1.4757 2.0053]

Epoch 8, loss = 1.5053
Mean test/val loss: 1.4789
[25, 50, 75] percentiles test/val loss: [0.9837 1.4169 1.8886]

Epoch 10, loss = 1.4010
Mean test/val loss: 1.3479
[25, 50, 75] percentiles test/val loss: [0.9175 1.2991 1.672 ]

Epoch 12, loss = 1.3270
Mean test/val loss: 1.2989
[25, 50, 75] percentiles test/val loss: [0.8715 1.2302 1.598 ]

Epoch 14, loss = 1.2537
Mean test/val loss: 1.2582
[25, 50, 75] percentiles test/val loss: [0.8488 1.1674 1.5743]

Epoch 16, loss = 1.1726
Mean test/val loss: 1.2223
[25, 50, 75] percentiles test/val loss: [0.8627 1.1406 1.4745]

Epoch 18, loss = 1.1265
Mean test/val loss: 1.0848
[25, 50, 75] percentiles test/val loss: [0.7096 1.0014 1.3302]

Epoch 20, loss = 1.0870
Mean test/val loss: 1.1237
[25, 50, 75] percentiles test/val loss: [0.7415 1.0413 1.3946]

Epoch 22, loss = 1.0546
Mean test/val loss: 1.0320
[25, 50, 75] percentiles test/val loss: [0.6707 0.949  1.2837]

Epoch 24, loss = 1.0287
Mean test/val loss: 1.1289
[25, 50, 75] percentiles test/val loss: [0.7643 1.0403 1.4214]

Epoch 26, loss = 1.0052
Mean test/val loss: 1.0466
[25, 50, 75] percentiles test/val loss: [0.6722 0.9502 1.3061]

Epoch 28, loss = 0.9876
Mean test/val loss: 1.0022
[25, 50, 75] percentiles test/val loss: [0.6433 0.9084 1.2815]

Epoch 30, loss = 0.9720
Mean test/val loss: 0.9833
[25, 50, 75] percentiles test/val loss: [0.6402 0.906  1.2292]

Epoch 32, loss = 0.9577
Mean test/val loss: 0.9478
[25, 50, 75] percentiles test/val loss: [0.6029 0.8667 1.1879]

Epoch 34, loss = 0.9399
Mean test/val loss: 0.9400
[25, 50, 75] percentiles test/val loss: [0.5981 0.8623 1.1914]

Epoch 36, loss = 0.9279
Mean test/val loss: 0.9538
[25, 50, 75] percentiles test/val loss: [0.61   0.8702 1.2049]

Epoch 38, loss = 0.9099
Mean test/val loss: 0.9591
[25, 50, 75] percentiles test/val loss: [0.6151 0.8693 1.184 ]

Epoch 40, loss = 0.9043
Mean test/val loss: 0.9115
[25, 50, 75] percentiles test/val loss: [0.5843 0.8389 1.1281]

New lr: 1e-05
Epoch 42, loss = 0.8195
Mean test/val loss: 0.8621
[25, 50, 75] percentiles test/val loss: [0.5469 0.7852 1.0819]

Epoch 44, loss = 0.8053
Mean test/val loss: 0.8539
[25, 50, 75] percentiles test/val loss: [0.5354 0.7679 1.0673]

Epoch 46, loss = 0.7948
Mean test/val loss: 0.8497
[25, 50, 75] percentiles test/val loss: [0.5336 0.7597 1.0587]

Epoch 48, loss = 0.7859
Mean test/val loss: 0.8441
[25, 50, 75] percentiles test/val loss: [0.5269 0.7569 1.0451]

Epoch 50, loss = 0.7777
Mean test/val loss: 0.8427
[25, 50, 75] percentiles test/val loss: [0.5234 0.7579 1.0435]

Epoch 52, loss = 0.7699
Mean test/val loss: 0.8399
[25, 50, 75] percentiles test/val loss: [0.5216 0.7575 1.0366]

Epoch 54, loss = 0.7630
Mean test/val loss: 0.8344
[25, 50, 75] percentiles test/val loss: [0.5238 0.7541 1.0347]

Epoch 56, loss = 0.7560
Mean test/val loss: 0.8346
[25, 50, 75] percentiles test/val loss: [0.5171 0.7579 1.019 ]

Epoch 58, loss = 0.7496
Mean test/val loss: 0.8329
[25, 50, 75] percentiles test/val loss: [0.5191 0.7545 1.0208]

Epoch 60, loss = 0.7436
Mean test/val loss: 0.8299
[25, 50, 75] percentiles test/val loss: [0.5161 0.7532 1.0132]

Epoch 62, loss = 0.7382
Mean test/val loss: 0.8276
[25, 50, 75] percentiles test/val loss: [0.5151 0.7388 1.0096]

Epoch 64, loss = 0.7324
Mean test/val loss: 0.8272
[25, 50, 75] percentiles test/val loss: [0.512  0.739  1.0128]

Epoch 66, loss = 0.7273
Mean test/val loss: 0.8260
[25, 50, 75] percentiles test/val loss: [0.5096 0.7408 1.0215]

Epoch 68, loss = 0.7221
Mean test/val loss: 0.8263
[25, 50, 75] percentiles test/val loss: [0.5096 0.7432 1.002 ]

Epoch 70, loss = 0.7174
Mean test/val loss: 0.8264
[25, 50, 75] percentiles test/val loss: [0.5114 0.7373 1.0119]


Total parameters: 51479472
Total training + validation time: 20.0 hours, 2.0 mins, and 30.10000000000582 secs
Final val loss: 0.826370027013123

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample981: 0.21243441104888916
dataset_09_28_23 sample324: 0.7565479278564453
dataset_09_28_23 sample3464: 1.0432863235473633
dataset_09_28_23 sample2834: 2.3625311851501465
dataset_09_28_23 sample1936: 0.8586994409561157
MSE Loss: 1.047 +- 0.714

Downsampling (200k) Results:
dataset_09_28_23 sample1936-downsampling: 30.790292739868164
dataset_09_28_23 sample2834-downsampling: 1091.2064208984375
dataset_09_28_23 sample324-downsampling: 103.27183532714844
dataset_09_28_23 sample3464-downsampling: 51.78738021850586
dataset_09_28_23 sample981-downsampling: 4.638340950012207
Loss: 256.339 +- 418.688

Removing /scratch/midway3/erschultz/ContactGNNEnergy1downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1936-regular: 23.9252986907959
dataset_09_28_23 sample2834-regular: 3222.9150390625
dataset_09_28_23 sample324-regular: 103.00537872314453
dataset_09_28_23 sample3464-regular: 48.40949630737305
dataset_09_28_23 sample981-regular: 4.882800102233887
Loss: 680.628 +- 1271.571

Removing /scratch/midway3/erschultz/ContactGNNEnergy1regsample

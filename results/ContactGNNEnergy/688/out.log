#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_02_29_24_imr90'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy12', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, lambda3=1, grad_clip=None, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', save_early_stop=True, model_type='ContactGNNEnergy', id=688, pretrain_id=None, resume_training=False, k=10, m=512, seed=13, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', output_clip=None, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, bonded_path=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/688', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/688/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/688/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/688/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=2, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), eig=False, criterion=<function mse_log at 0x7efb0f5654c0>, cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 13.803 minutes
Number of samples: 5000
Average num edges per graph:  59540.9748
Mean degree: [172.78 142.54 251.51 ... 254.98 221.64 196.27] +- [43.7  39.59  5.09 ...  0.12 28.94 45.09]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4964, 3308, 765, 3066, 1707, 980, 997, 3966, 3641, 1497, 4011, 4231, 4083, 1274, 2567, 480, 1026, 722, 2156, 1580, 269, 4703, 166, 1433, 560, 2184, 3461, 3694, 334, 2470, 775, 759, 2488, 499, 492, 2376, 4475, 4451, 671, 2453, 1938, 4910, 2143, 4901, 4456, 1640, 3306, 4295, 4571, 4952, 2885, 4799, 616, 3594, 3868, 2441, 4824, 2775, 3688, 1682, 582, 3264, 3358, 272, 1480, 2799, 4421, 187, 2154, 606, 3118, 2769, 4344, 2627, 3022, 2375, 1714, 1426, 46, 1431, 3176, 4928, 4856, 2086, 128, 872, 1766, 1215, 2923, 840, 767, 419, 2766, 4012, 3142, 804, 2264, 847, 2265, 4431, 3676, 1899]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7efb0e5b9100>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.0260
Mean test/val loss: 1.0424
[25, 50, 75] percentiles test/val loss: [0.6282 0.8985 1.3383]

Epoch 4, loss = 0.9099
Mean test/val loss: 0.9173
[25, 50, 75] percentiles test/val loss: [0.5277 0.8039 1.2531]

Epoch 6, loss = 0.8327
Mean test/val loss: 0.8594
[25, 50, 75] percentiles test/val loss: [0.4637 0.742  1.1705]

Epoch 8, loss = 0.7734
Mean test/val loss: 0.8680
[25, 50, 75] percentiles test/val loss: [0.49   0.7492 1.1539]

Epoch 10, loss = 0.7231
Mean test/val loss: 0.7691
[25, 50, 75] percentiles test/val loss: [0.405  0.6496 1.038 ]

Epoch 12, loss = 0.6883
Mean test/val loss: 0.7258
[25, 50, 75] percentiles test/val loss: [0.3652 0.6065 0.974 ]

Epoch 14, loss = 0.6620
Mean test/val loss: 0.6830
[25, 50, 75] percentiles test/val loss: [0.3288 0.572  0.9072]

Epoch 16, loss = 0.6374
Mean test/val loss: 0.6773
[25, 50, 75] percentiles test/val loss: [0.33   0.5721 0.9023]

Epoch 18, loss = 0.6116
Mean test/val loss: 0.6346
[25, 50, 75] percentiles test/val loss: [0.2998 0.5285 0.8664]

Epoch 20, loss = 0.6011
Mean test/val loss: 0.6389
[25, 50, 75] percentiles test/val loss: [0.3065 0.5283 0.8528]

Epoch 22, loss = 0.5702
Mean test/val loss: 0.6228
[25, 50, 75] percentiles test/val loss: [0.2867 0.5153 0.8252]

Epoch 24, loss = 0.5526
Mean test/val loss: 0.6544
[25, 50, 75] percentiles test/val loss: [0.3842 0.5292 0.8048]

Epoch 26, loss = 0.5386
Mean test/val loss: 0.6274
[25, 50, 75] percentiles test/val loss: [0.3314 0.513  0.812 ]

Epoch 28, loss = 0.5252
Mean test/val loss: 0.6186
[25, 50, 75] percentiles test/val loss: [0.3111 0.4922 0.8   ]

Epoch 30, loss = 0.5103
Mean test/val loss: 0.5716
[25, 50, 75] percentiles test/val loss: [0.2544 0.4632 0.7608]

Epoch 32, loss = 0.4988
Mean test/val loss: 0.5852
[25, 50, 75] percentiles test/val loss: [0.2565 0.4678 0.7797]

Epoch 34, loss = 0.4882
Mean test/val loss: 0.5666
[25, 50, 75] percentiles test/val loss: [0.2556 0.454  0.7596]

Epoch 36, loss = 0.4783
Mean test/val loss: 0.5619
[25, 50, 75] percentiles test/val loss: [0.2651 0.4557 0.7403]

Epoch 38, loss = 0.4685
Mean test/val loss: 0.5947
[25, 50, 75] percentiles test/val loss: [0.2686 0.4611 0.7912]

Epoch 40, loss = 0.4584
Mean test/val loss: 0.5666
[25, 50, 75] percentiles test/val loss: [0.2515 0.4448 0.7418]

New lr: 1e-05
Epoch 42, loss = 0.3965
Mean test/val loss: 0.5137
[25, 50, 75] percentiles test/val loss: [0.2238 0.4024 0.7025]

Epoch 44, loss = 0.3858
Mean test/val loss: 0.5108
[25, 50, 75] percentiles test/val loss: [0.2251 0.3984 0.6938]

Epoch 46, loss = 0.3782
Mean test/val loss: 0.5101
[25, 50, 75] percentiles test/val loss: [0.2223 0.3968 0.6885]

Epoch 48, loss = 0.3718
Mean test/val loss: 0.5086
[25, 50, 75] percentiles test/val loss: [0.2214 0.3917 0.6906]

Epoch 50, loss = 0.3660
Mean test/val loss: 0.5083
[25, 50, 75] percentiles test/val loss: [0.2177 0.3879 0.6851]

Epoch 52, loss = 0.3606
Mean test/val loss: 0.5073
[25, 50, 75] percentiles test/val loss: [0.2189 0.3876 0.6807]

Epoch 54, loss = 0.3557
Mean test/val loss: 0.5083
[25, 50, 75] percentiles test/val loss: [0.2215 0.3897 0.6815]

Epoch 56, loss = 0.3510
Mean test/val loss: 0.5090
[25, 50, 75] percentiles test/val loss: [0.2181 0.3918 0.6908]

Epoch 58, loss = 0.3466
Mean test/val loss: 0.5091
[25, 50, 75] percentiles test/val loss: [0.2189 0.388  0.6953]

Epoch 60, loss = 0.3425
Mean test/val loss: 0.5097
[25, 50, 75] percentiles test/val loss: [0.2221 0.3854 0.6981]


Total parameters: 51478960
Total training + validation time: 24.0 hours, 16.0 mins, and 59.39999999999418 secs
Final val loss: 0.509669202055782

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_02_29_24_imr90 sample961: 0.44946300983428955
dataset_02_29_24_imr90 sample2515: 0.15814435482025146
dataset_02_29_24_imr90 sample3055: 0.692489743232727
dataset_02_29_24_imr90 sample293: 0.531825065612793
dataset_02_29_24_imr90 sample508: 0.9889447093009949
MSE_log: 0.564 +- 0.274

Downsampling (200k) Results:
Original sampling (400k) Results:

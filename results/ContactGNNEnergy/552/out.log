#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy4', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_and_mse_log', loss_k=2, lambda1=0.1, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=552, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/552', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/552/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/552/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/552/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<scripts.neural_nets.losses.MSE_and_MSE_log object at 0x7f9600e67820>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 19.567 minutes
Number of samples: 5000
Average num edges per graph:  64202.6016
Mean degree: [249.86 254.38 247.02 ... 253.91 251.64 251.34] +- [6.31 0.99 8.25 ... 2.04 5.21 3.97]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f95f9033fa0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 7.1687
Mean test/val loss: 7.0895
[25, 50, 75] percentiles test/val loss: [4.3538 6.1095 8.9646]

Epoch 4, loss = 6.7320
Mean test/val loss: 6.5379
[25, 50, 75] percentiles test/val loss: [4.0034 5.8025 8.2853]

Epoch 6, loss = 6.1007
Mean test/val loss: 6.0891
[25, 50, 75] percentiles test/val loss: [3.7357 5.3808 7.7754]

Epoch 8, loss = 5.5836
Mean test/val loss: 5.4747
[25, 50, 75] percentiles test/val loss: [3.4554 4.8151 6.7049]

Epoch 10, loss = 5.1932
Mean test/val loss: 5.1493
[25, 50, 75] percentiles test/val loss: [3.204  4.4353 6.2723]

Epoch 12, loss = 4.9535
Mean test/val loss: 5.1505
[25, 50, 75] percentiles test/val loss: [3.2838 4.5119 6.2287]

Epoch 14, loss = 4.7801
Mean test/val loss: 4.5949
[25, 50, 75] percentiles test/val loss: [2.8078 3.8425 5.5024]

Epoch 16, loss = 4.5148
Mean test/val loss: 4.8264
[25, 50, 75] percentiles test/val loss: [2.9503 4.1638 5.981 ]

Epoch 18, loss = 4.3685
Mean test/val loss: 4.3290
[25, 50, 75] percentiles test/val loss: [2.681  3.7244 5.2085]

Epoch 20, loss = 4.2169
Mean test/val loss: 4.1360
[25, 50, 75] percentiles test/val loss: [2.5234 3.4788 4.9422]

Epoch 22, loss = 4.1337
Mean test/val loss: 4.0277
[25, 50, 75] percentiles test/val loss: [2.4479 3.4417 4.8377]

Epoch 24, loss = 4.0376
Mean test/val loss: 4.4175
[25, 50, 75] percentiles test/val loss: [2.6762 3.7837 5.4328]

Epoch 26, loss = 3.9735
Mean test/val loss: 3.9176
[25, 50, 75] percentiles test/val loss: [2.3709 3.2718 4.7062]

Epoch 28, loss = 3.8878
Mean test/val loss: 3.9257
[25, 50, 75] percentiles test/val loss: [2.2957 3.3312 4.7436]

Epoch 30, loss = 3.7950
Mean test/val loss: 4.0804
[25, 50, 75] percentiles test/val loss: [2.4299 3.4352 4.9293]

Epoch 32, loss = 3.7178
Mean test/val loss: 3.8314
[25, 50, 75] percentiles test/val loss: [2.2536 3.2112 4.6505]

Epoch 34, loss = 3.6966
Mean test/val loss: 3.7213
[25, 50, 75] percentiles test/val loss: [2.2179 3.1068 4.4472]

Epoch 36, loss = 3.6298
Mean test/val loss: 3.7471
[25, 50, 75] percentiles test/val loss: [2.2632 3.1505 4.5881]

Epoch 38, loss = 3.5852
Mean test/val loss: 3.6658
[25, 50, 75] percentiles test/val loss: [2.1317 3.0631 4.4054]

Epoch 40, loss = 3.5460
Mean test/val loss: 3.5645
[25, 50, 75] percentiles test/val loss: [2.1523 3.0016 4.2425]

New lr: 1e-05
Epoch 42, loss = 3.1589
Mean test/val loss: 3.3407
[25, 50, 75] percentiles test/val loss: [1.986  2.7317 4.0565]

Epoch 44, loss = 3.1024
Mean test/val loss: 3.3152
[25, 50, 75] percentiles test/val loss: [1.99   2.7425 4.0397]

Epoch 46, loss = 3.0591
Mean test/val loss: 3.2915
[25, 50, 75] percentiles test/val loss: [1.9295 2.7246 3.9646]

Epoch 48, loss = 3.0222
Mean test/val loss: 3.2699
[25, 50, 75] percentiles test/val loss: [1.929  2.6685 3.9923]

Epoch 50, loss = 2.9895
Mean test/val loss: 3.2622
[25, 50, 75] percentiles test/val loss: [1.9138 2.6938 4.0033]

Epoch 52, loss = 2.9591
Mean test/val loss: 3.2722
[25, 50, 75] percentiles test/val loss: [1.8931 2.6829 3.9793]

Epoch 54, loss = 2.9314
Mean test/val loss: 3.2481
[25, 50, 75] percentiles test/val loss: [1.887  2.6354 3.9231]

Epoch 56, loss = 2.9020
Mean test/val loss: 3.2387
[25, 50, 75] percentiles test/val loss: [1.8924 2.6442 3.9379]

Epoch 58, loss = 2.8760
Mean test/val loss: 3.2257
[25, 50, 75] percentiles test/val loss: [1.8555 2.6374 3.994 ]

Epoch 60, loss = 2.8505
Mean test/val loss: 3.2192
[25, 50, 75] percentiles test/val loss: [1.8735 2.6725 3.9271]

Epoch 62, loss = 2.8306
Mean test/val loss: 3.1932
[25, 50, 75] percentiles test/val loss: [1.8612 2.6346 3.8777]

Epoch 64, loss = 2.8111
Mean test/val loss: 3.2052
[25, 50, 75] percentiles test/val loss: [1.8761 2.6301 3.8731]

Epoch 66, loss = 2.7864
Mean test/val loss: 3.1919
[25, 50, 75] percentiles test/val loss: [1.8544 2.6583 3.9055]

Epoch 68, loss = 2.7653
Mean test/val loss: 3.1794
[25, 50, 75] percentiles test/val loss: [1.8208 2.6393 3.8634]

Epoch 70, loss = 2.7452
Mean test/val loss: 3.1793
[25, 50, 75] percentiles test/val loss: [1.833  2.6193 3.862 ]


Total parameters: 51479472
Total training + validation time: 10.0 hours, 29.0 mins, and 12.099999999998545 secs
Final val loss: 3.179291295647621

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample981: 0.6415450125932693
dataset_09_28_23 sample324: 5.113521933555603
dataset_09_28_23 sample3464: 3.6074068546295166
dataset_09_28_23 sample2834: 7.531031608581543
dataset_09_28_23 sample1936: 2.1920117139816284
Loss1: 2.711, Loss2: 1.106
MSE+MSE_log: 3.817 +- 2.377

Downsampling (200k) Results:
dataset_09_28_23 sample1936-downsampling: 13.174409866333008
dataset_09_28_23 sample2834-downsampling: 51.76277160644531
dataset_09_28_23 sample324-downsampling: 61.655860900878906
dataset_09_28_23 sample3464-downsampling: 24.914188385009766
dataset_09_28_23 sample981-downsampling: 4.51961088180542
Loss: 31.205 +- 22.03

Removing /scratch/midway3/erschultz/ContactGNNEnergy4downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1936-regular: 12.684124946594238
dataset_09_28_23 sample2834-regular: 51.292354583740234
dataset_09_28_23 sample324-regular: 42.96928405761719
dataset_09_28_23 sample3464-regular: 24.36830711364746
dataset_09_28_23 sample981-regular: 4.224817276000977
Loss: 27.108 +- 17.752

Removing /scratch/midway3/erschultz/ContactGNNEnergy4regsample

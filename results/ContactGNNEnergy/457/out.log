#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_08_25_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy13', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='center_log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=457, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/457', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/457/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/457/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/457/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f0ddb86a3a0>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 20.503 minutes
Number of samples: 5000
Average num edges per graph:  64713.4272
Mean degree: [252.9  254.92 254.73 ... 254.88 254.63 254.43] +- [3.31 0.33 0.66 ... 0.35 0.82 1.18]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f0d941da4c0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 6.0055
Mean test/val loss: 5.6887
[25, 50, 75] percentiles test/val loss: [4.8118 5.4909 6.3957]

Epoch 4, loss = 4.6843
Mean test/val loss: 4.5143
[25, 50, 75] percentiles test/val loss: [3.8339 4.4311 5.047 ]

Epoch 6, loss = 4.1975
Mean test/val loss: 4.1635
[25, 50, 75] percentiles test/val loss: [3.5267 4.0881 4.7217]

Epoch 8, loss = 3.9398
Mean test/val loss: 3.8573
[25, 50, 75] percentiles test/val loss: [3.2694 3.7601 4.3559]

Epoch 10, loss = 3.7552
Mean test/val loss: 3.8066
[25, 50, 75] percentiles test/val loss: [3.2219 3.7301 4.3068]

Epoch 12, loss = 3.6325
Mean test/val loss: 3.8391
[25, 50, 75] percentiles test/val loss: [3.2963 3.7843 4.31  ]

Epoch 14, loss = 3.5183
Mean test/val loss: 3.5025
[25, 50, 75] percentiles test/val loss: [2.9462 3.4193 4.0062]

Epoch 16, loss = 3.4206
Mean test/val loss: 3.3966
[25, 50, 75] percentiles test/val loss: [2.8482 3.311  3.8647]

Epoch 18, loss = 3.3386
Mean test/val loss: 3.4038
[25, 50, 75] percentiles test/val loss: [2.9038 3.345  3.8704]

Epoch 20, loss = 3.2561
Mean test/val loss: 3.3362
[25, 50, 75] percentiles test/val loss: [2.8393 3.2583 3.7597]

Epoch 22, loss = 3.1847
Mean test/val loss: 3.2263
[25, 50, 75] percentiles test/val loss: [2.7491 3.1733 3.6485]

Epoch 24, loss = 3.1181
Mean test/val loss: 3.1888
[25, 50, 75] percentiles test/val loss: [2.6905 3.1428 3.5938]

Epoch 26, loss = 3.0667
Mean test/val loss: 3.1898
[25, 50, 75] percentiles test/val loss: [2.7262 3.1147 3.5678]

Epoch 28, loss = 3.0204
Mean test/val loss: 3.1213
[25, 50, 75] percentiles test/val loss: [2.6489 3.0928 3.5435]

Epoch 30, loss = 2.9664
Mean test/val loss: 3.1127
[25, 50, 75] percentiles test/val loss: [2.6464 3.0713 3.5115]

Epoch 32, loss = 2.9277
Mean test/val loss: 3.0904
[25, 50, 75] percentiles test/val loss: [2.6412 3.0273 3.4923]

Epoch 34, loss = 2.8853
Mean test/val loss: 2.9932
[25, 50, 75] percentiles test/val loss: [2.5413 2.9382 3.3937]

Epoch 36, loss = 2.8482
Mean test/val loss: 2.9729
[25, 50, 75] percentiles test/val loss: [2.5472 2.9253 3.346 ]

Epoch 38, loss = 2.8128
Mean test/val loss: 2.9367
[25, 50, 75] percentiles test/val loss: [2.5004 2.9128 3.3329]

Epoch 40, loss = 2.7780
Mean test/val loss: 2.9183
[25, 50, 75] percentiles test/val loss: [2.4916 2.8747 3.277 ]

New lr: 1e-05
Epoch 42, loss = 2.5937
Mean test/val loss: 2.7754
[25, 50, 75] percentiles test/val loss: [2.3471 2.7346 3.1486]

Epoch 44, loss = 2.5736
Mean test/val loss: 2.7665
[25, 50, 75] percentiles test/val loss: [2.3507 2.7314 3.1291]

Epoch 46, loss = 2.5596
Mean test/val loss: 2.7592
[25, 50, 75] percentiles test/val loss: [2.3508 2.7256 3.1407]

Epoch 48, loss = 2.5476
Mean test/val loss: 2.7522
[25, 50, 75] percentiles test/val loss: [2.3491 2.7165 3.1161]

Epoch 50, loss = 2.5370
Mean test/val loss: 2.7455
[25, 50, 75] percentiles test/val loss: [2.3391 2.7071 3.1026]

Epoch 52, loss = 2.5274
Mean test/val loss: 2.7436
[25, 50, 75] percentiles test/val loss: [2.3284 2.7102 3.1104]

Epoch 54, loss = 2.5185
Mean test/val loss: 2.7389
[25, 50, 75] percentiles test/val loss: [2.3268 2.7068 3.1037]

Epoch 56, loss = 2.5103
Mean test/val loss: 2.7356
[25, 50, 75] percentiles test/val loss: [2.3268 2.705  3.1026]

Epoch 58, loss = 2.5021
Mean test/val loss: 2.7366
[25, 50, 75] percentiles test/val loss: [2.3332 2.6915 3.0981]

Epoch 60, loss = 2.4945
Mean test/val loss: 2.7303
[25, 50, 75] percentiles test/val loss: [2.3291 2.6917 3.0829]

Epoch 62, loss = 2.4873
Mean test/val loss: 2.7254
[25, 50, 75] percentiles test/val loss: [2.3196 2.6847 3.0804]

Epoch 64, loss = 2.4802
Mean test/val loss: 2.7251
[25, 50, 75] percentiles test/val loss: [2.3186 2.6787 3.0788]

Epoch 66, loss = 2.4738
Mean test/val loss: 2.7213
[25, 50, 75] percentiles test/val loss: [2.3119 2.6741 3.0724]

Epoch 68, loss = 2.4671
Mean test/val loss: 2.7161
[25, 50, 75] percentiles test/val loss: [2.3124 2.6766 3.0672]

Epoch 70, loss = 2.4607
Mean test/val loss: 2.7191
[25, 50, 75] percentiles test/val loss: [2.3176 2.6817 3.067 ]

Epoch 72, loss = 2.4544
Mean test/val loss: 2.7164
[25, 50, 75] percentiles test/val loss: [2.3136 2.6833 3.087 ]

Epoch 74, loss = 2.4481
Mean test/val loss: 2.7132
[25, 50, 75] percentiles test/val loss: [2.3095 2.6788 3.0784]

Epoch 76, loss = 2.4425
Mean test/val loss: 2.7100
[25, 50, 75] percentiles test/val loss: [2.3171 2.6572 3.0744]

Epoch 78, loss = 2.4369
Mean test/val loss: 2.7110
[25, 50, 75] percentiles test/val loss: [2.31   2.6661 3.0723]

Epoch 80, loss = 2.4312
Mean test/val loss: 2.7078
[25, 50, 75] percentiles test/val loss: [2.3063 2.6656 3.0565]


Total parameters: 26462000
Total training + validation time: 7.0 hours, 47.0 mins, and 49.5 secs
Final val loss: 2.707787545442581

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_08_25_23 sample981: 2.434086799621582
dataset_08_25_23 sample324: 2.5460104942321777
dataset_08_25_23 sample3464: 2.394453525543213
dataset_08_25_23 sample2834: 2.758192539215088
dataset_08_25_23 sample1936: 2.68623685836792
Loss: 2.564 +- 0.14

Downsampling (40%) Results:
dataset_08_25_23 sample1936-downsampling: 2.68623685836792
dataset_08_25_23 sample2834-downsampling: 3.0685911178588867
dataset_08_25_23 sample324-downsampling: 2.850142002105713
dataset_08_25_23 sample3464-downsampling: 2.6427414417266846
dataset_08_25_23 sample981-downsampling: 2.621325969696045
Loss: 2.774 +- 0.168

Removing /scratch/midway3/erschultz/ContactGNNEnergy13downsample
Original sampling (100%) Results:
dataset_08_25_23 sample1936-regular: 2.462374448776245
dataset_08_25_23 sample2834-regular: 2.7841134071350098
dataset_08_25_23 sample324-regular: 2.4254660606384277
dataset_08_25_23 sample3464-regular: 2.394453287124634
dataset_08_25_23 sample981-regular: 2.3767282962799072
Loss: 2.489 +- 0.151

Removing /scratch/midway3/erschultz/ContactGNNEnergy13regsample

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project/depablo/erschultz/dataset_12_08_23_imr90'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy10', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=630, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/630', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/630/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/630/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/630/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7fe6cc48f5e0>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=2, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 28.854 minutes
Number of samples: 5000
Average num edges per graph:  64235.344
Mean degree: [254.99 254.45 255.   ... 254.59 254.27 239.61] +- [ 0.09  1.19  0.   ...  0.87  1.63 18.41]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [1640, 1672, 3464, 831, 1651, 2678, 861, 3660, 267, 810, 2325, 2890, 3805, 4444, 2956, 1308, 3942, 2151, 3235, 1362, 566, 1440, 3319, 161, 206, 459, 3674, 4352, 2576, 4555, 753, 2322, 275, 745, 2876, 2221, 1309, 2628, 2363, 1906, 2834, 3684, 166, 3987, 3663, 1549, 981, 3237, 803, 1932, 3661, 4977, 4056, 255, 2787, 3760, 4875, 4932, 1511, 3912, 2913, 2064, 3, 64, 2434, 930, 795, 1006, 727, 672, 2695, 338, 111, 787, 1626, 1407, 952, 833, 4570, 1725, 1798, 1787, 2072, 3457, 544, 3195, 3861, 3343, 1300, 3110, 3283, 4990, 4966, 4092, 1475, 1589, 367, 1972, 4641, 1487, 1184, 4058]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fe69f2d9f10>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.6534
Mean test/val loss: 0.5932
[25, 50, 75] percentiles test/val loss: [0.4132 0.5393 0.7381]

Epoch 4, loss = 0.5472
Mean test/val loss: 0.5262
[25, 50, 75] percentiles test/val loss: [0.3458 0.4739 0.6758]

Epoch 6, loss = 0.5022
Mean test/val loss: 0.5143
[25, 50, 75] percentiles test/val loss: [0.3367 0.4635 0.6596]

Epoch 8, loss = 0.4626
Mean test/val loss: 0.4928
[25, 50, 75] percentiles test/val loss: [0.3273 0.4417 0.6225]

Epoch 10, loss = 0.4265
Mean test/val loss: 0.4233
[25, 50, 75] percentiles test/val loss: [0.2743 0.3919 0.551 ]

Epoch 12, loss = 0.3992
Mean test/val loss: 0.3934
[25, 50, 75] percentiles test/val loss: [0.2329 0.3576 0.5205]

Epoch 14, loss = 0.3744
Mean test/val loss: 0.3821
[25, 50, 75] percentiles test/val loss: [0.2406 0.3515 0.4909]

Epoch 16, loss = 0.3596
Mean test/val loss: 0.3630
[25, 50, 75] percentiles test/val loss: [0.2188 0.33   0.475 ]

Epoch 18, loss = 0.3449
Mean test/val loss: 0.3523
[25, 50, 75] percentiles test/val loss: [0.2318 0.3215 0.438 ]

Epoch 20, loss = 0.3331
Mean test/val loss: 0.3388
[25, 50, 75] percentiles test/val loss: [0.2007 0.3127 0.4449]

Epoch 22, loss = 0.3220
Mean test/val loss: 0.3283
[25, 50, 75] percentiles test/val loss: [0.1933 0.2993 0.4282]

Epoch 24, loss = 0.3123
Mean test/val loss: 0.3213
[25, 50, 75] percentiles test/val loss: [0.1938 0.2959 0.41  ]

Epoch 26, loss = 0.3042
Mean test/val loss: 0.3120
[25, 50, 75] percentiles test/val loss: [0.1915 0.2888 0.4033]

Epoch 28, loss = 0.2957
Mean test/val loss: 0.3089
[25, 50, 75] percentiles test/val loss: [0.1904 0.2886 0.3935]

Epoch 30, loss = 0.2900
Mean test/val loss: 0.3015
[25, 50, 75] percentiles test/val loss: [0.1853 0.2809 0.3912]

Epoch 32, loss = 0.2830
Mean test/val loss: 0.3006
[25, 50, 75] percentiles test/val loss: [0.1843 0.2734 0.3809]

Epoch 34, loss = 0.2761
Mean test/val loss: 0.2901
[25, 50, 75] percentiles test/val loss: [0.1722 0.2627 0.3775]

Epoch 36, loss = 0.2901
Mean test/val loss: 0.2863
[25, 50, 75] percentiles test/val loss: [0.1715 0.2618 0.3605]

Epoch 38, loss = 0.2690
Mean test/val loss: 0.2836
[25, 50, 75] percentiles test/val loss: [0.1686 0.2584 0.3615]

Epoch 40, loss = 0.2642
Mean test/val loss: 0.2881
[25, 50, 75] percentiles test/val loss: [0.1764 0.262  0.3613]

New lr: 1e-05
Epoch 42, loss = 0.2292
Mean test/val loss: 0.2595
[25, 50, 75] percentiles test/val loss: [0.154  0.2353 0.3305]

Epoch 44, loss = 0.2242
Mean test/val loss: 0.2575
[25, 50, 75] percentiles test/val loss: [0.1509 0.2349 0.3285]

Epoch 46, loss = 0.2206
Mean test/val loss: 0.2571
[25, 50, 75] percentiles test/val loss: [0.1519 0.2326 0.3274]

Epoch 48, loss = 0.2177
Mean test/val loss: 0.2557
[25, 50, 75] percentiles test/val loss: [0.1501 0.2312 0.3261]

Epoch 50, loss = 0.2151
Mean test/val loss: 0.2558
[25, 50, 75] percentiles test/val loss: [0.1499 0.2314 0.3255]

Epoch 52, loss = 0.2127
Mean test/val loss: 0.2541
[25, 50, 75] percentiles test/val loss: [0.1496 0.2292 0.3236]

Epoch 54, loss = 0.2105
Mean test/val loss: 0.2538
[25, 50, 75] percentiles test/val loss: [0.1483 0.2281 0.3222]

Epoch 56, loss = 0.2084
Mean test/val loss: 0.2531
[25, 50, 75] percentiles test/val loss: [0.1475 0.2289 0.3212]

Epoch 58, loss = 0.2064
Mean test/val loss: 0.2525
[25, 50, 75] percentiles test/val loss: [0.147  0.2265 0.3245]

Epoch 60, loss = 0.2046
Mean test/val loss: 0.2528
[25, 50, 75] percentiles test/val loss: [0.1482 0.2271 0.3199]


Total parameters: 51478960
Total training + validation time: 8.0 hours, 4.0 mins, and 11.599999999998545 secs
Final val loss: 0.252782493757084

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_12_08_23_imr90 sample981: 0.13128255307674408
dataset_12_08_23_imr90 sample324: 0.11432898044586182
dataset_12_08_23_imr90 sample3464: 0.18916061520576477
dataset_12_08_23_imr90 sample2834: 0.09421981871128082
dataset_12_08_23_imr90 sample1936: 0.08618712425231934
MSE_log: 0.123 +- 0.037

Downsampling (200k) Results:
Original sampling (400k) Results:

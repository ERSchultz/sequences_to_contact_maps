#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy7', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log_and_mse_kth_diagonal', loss_k=2, lambda1=1.0, lambda2=0.1, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=555, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/555', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/555/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/555/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/555/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<scripts.neural_nets.losses.MSE_log_and_MSE_kth_diagonal object at 0x7f819904a7c0>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 14.285 minutes
Number of samples: 5000
Average num edges per graph:  64202.6016
Mean degree: [249.86 254.38 247.02 ... 253.91 251.64 251.34] +- [6.31 0.99 8.25 ... 2.04 5.21 3.97]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f81911d48b0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 10.0648
Mean test/val loss: 9.6728
[25, 50, 75] percentiles test/val loss: [ 4.4141  7.6446 12.141 ]

Epoch 4, loss = 9.4231
Mean test/val loss: 12.3424
[25, 50, 75] percentiles test/val loss: [ 5.4009  9.0972 15.062 ]

Epoch 6, loss = 8.7021
Mean test/val loss: 7.9121
[25, 50, 75] percentiles test/val loss: [3.7627 6.1937 9.6169]

Epoch 8, loss = 7.8846
Mean test/val loss: 7.5154
[25, 50, 75] percentiles test/val loss: [3.3669 5.6606 8.8688]

Epoch 10, loss = 7.2980
Mean test/val loss: 7.0572
[25, 50, 75] percentiles test/val loss: [3.3031 5.4827 8.0991]

Epoch 12, loss = 6.7305
Mean test/val loss: 6.7448
[25, 50, 75] percentiles test/val loss: [3.1545 4.9751 7.8665]

Epoch 14, loss = 6.3102
Mean test/val loss: 6.4223
[25, 50, 75] percentiles test/val loss: [3.0368 4.7817 7.346 ]

Epoch 16, loss = 5.9141
Mean test/val loss: 7.3963
[25, 50, 75] percentiles test/val loss: [3.3332 5.6363 8.2374]

Epoch 18, loss = 5.5817
Mean test/val loss: 6.0285
[25, 50, 75] percentiles test/val loss: [2.8677 4.5641 7.0504]

Epoch 20, loss = 5.1485
Mean test/val loss: 5.5088
[25, 50, 75] percentiles test/val loss: [2.7396 4.0792 6.2823]

Epoch 22, loss = 4.8863
Mean test/val loss: 5.4635
[25, 50, 75] percentiles test/val loss: [2.6892 4.09   6.2804]

Epoch 24, loss = 4.6319
Mean test/val loss: 5.2051
[25, 50, 75] percentiles test/val loss: [2.5332 3.8866 5.7125]

Epoch 26, loss = 4.3989
Mean test/val loss: 5.3109
[25, 50, 75] percentiles test/val loss: [2.556  3.9134 5.8088]

Epoch 28, loss = 4.2585
Mean test/val loss: 5.4716
[25, 50, 75] percentiles test/val loss: [2.5692 3.9525 6.0558]

Epoch 30, loss = 4.0793
Mean test/val loss: 4.8533
[25, 50, 75] percentiles test/val loss: [2.3276 3.5393 5.3148]

Epoch 32, loss = 3.9373
Mean test/val loss: 4.7124
[25, 50, 75] percentiles test/val loss: [2.2824 3.413  5.1614]

Epoch 34, loss = 3.7853
Mean test/val loss: 4.8628
[25, 50, 75] percentiles test/val loss: [2.4148 3.5305 5.3686]

Epoch 36, loss = 3.7609
Mean test/val loss: 4.9525
[25, 50, 75] percentiles test/val loss: [2.4189 3.5262 5.4466]

Epoch 38, loss = 3.5843
Mean test/val loss: 4.4201
[25, 50, 75] percentiles test/val loss: [2.2825 3.249  4.851 ]

Epoch 40, loss = 3.4584
Mean test/val loss: 4.2586
[25, 50, 75] percentiles test/val loss: [2.0819 3.0856 4.6213]

New lr: 1e-05
Epoch 42, loss = 2.7501
Mean test/val loss: 3.8171
[25, 50, 75] percentiles test/val loss: [1.8811 2.8154 4.2808]

Epoch 44, loss = 2.6255
Mean test/val loss: 3.7134
[25, 50, 75] percentiles test/val loss: [1.8833 2.7743 4.1018]

Epoch 46, loss = 2.5427
Mean test/val loss: 3.6651
[25, 50, 75] percentiles test/val loss: [1.8352 2.6552 4.0692]

Epoch 48, loss = 2.4685
Mean test/val loss: 3.6099
[25, 50, 75] percentiles test/val loss: [1.7989 2.6302 3.9915]

Epoch 50, loss = 2.4046
Mean test/val loss: 3.5605
[25, 50, 75] percentiles test/val loss: [1.749  2.5931 3.926 ]

Epoch 52, loss = 2.3507
Mean test/val loss: 3.4973
[25, 50, 75] percentiles test/val loss: [1.7105 2.5478 3.875 ]

Epoch 54, loss = 2.3010
Mean test/val loss: 3.4919
[25, 50, 75] percentiles test/val loss: [1.6995 2.5089 3.8516]

Epoch 56, loss = 2.2612
Mean test/val loss: 3.4627
[25, 50, 75] percentiles test/val loss: [1.659  2.4862 3.8448]

Epoch 58, loss = 2.2230
Mean test/val loss: 3.4397
[25, 50, 75] percentiles test/val loss: [1.6531 2.435  3.8902]

Epoch 60, loss = 2.1886
Mean test/val loss: 3.4383
[25, 50, 75] percentiles test/val loss: [1.6435 2.4294 3.7401]

Epoch 62, loss = 2.1597
Mean test/val loss: 3.3809
[25, 50, 75] percentiles test/val loss: [1.6183 2.3967 3.6307]

Epoch 64, loss = 2.1325
Mean test/val loss: 3.3822
[25, 50, 75] percentiles test/val loss: [1.6791 2.4011 3.7141]

Epoch 66, loss = 2.1031
Mean test/val loss: 3.3608
[25, 50, 75] percentiles test/val loss: [1.6394 2.3512 3.7043]

Epoch 68, loss = 2.0819
Mean test/val loss: 3.3526
[25, 50, 75] percentiles test/val loss: [1.5841 2.3439 3.6752]

Epoch 70, loss = 2.0582
Mean test/val loss: 3.3509
[25, 50, 75] percentiles test/val loss: [1.5863 2.3825 3.8096]


Total parameters: 51479472
Total training + validation time: 11.0 hours, 20.0 mins, and 30.80000000000291 secs
Final val loss: 3.3508651438355446

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample981: 0.7063529193401337
dataset_09_28_23 sample324: 9.862408876419067
dataset_09_28_23 sample3464: 3.8955886363983154
dataset_09_28_23 sample2834: 11.954094409942627
dataset_09_28_23 sample1936: 2.04448264837265
Loss1: 2.03, Loss2: 3.663
MSE_log+MSE_k_diag: 5.693 +- 4.427

Downsampling (200k) Results:
dataset_09_28_23 sample1936-downsampling: 28.41143035888672
dataset_09_28_23 sample2834-downsampling: 86.61803436279297
dataset_09_28_23 sample324-downsampling: 118.94309997558594
dataset_09_28_23 sample3464-downsampling: 47.44120788574219
dataset_09_28_23 sample981-downsampling: 5.435378074645996
Loss: 57.37 +- 40.697

Removing /scratch/midway3/erschultz/ContactGNNEnergy7downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1936-regular: 25.189559936523438
dataset_09_28_23 sample2834-regular: 115.54627990722656
dataset_09_28_23 sample324-regular: 127.44312286376953
dataset_09_28_23 sample3464-regular: 45.266090393066406
dataset_09_28_23 sample981-regular: 5.77001953125
Loss: 63.843 +- 48.846

Removing /scratch/midway3/erschultz/ContactGNNEnergy7regsample

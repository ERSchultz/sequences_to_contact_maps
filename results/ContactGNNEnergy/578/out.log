#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_10_14_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy15', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=578, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/578', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/578/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/578/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/578/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fbc913de310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 31.389 minutes
Number of samples: 10000
Average num edges per graph:  65198.2786
Mean degree: [255.   254.73 254.98 ... 255.   255.   255.  ] +- [0.   0.96 0.15 ... 0.   0.   0.  ]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [1736, 8603, 4487, 7484, 1944, 6883, 5242, 5402, 2741, 5051, 6509, 7138, 316, 8888, 2400, 8268, 478, 5626, 4834, 8222, 2775, 7297, 9366, 3542, 9486, 5574, 1020, 9892, 5740, 1800, 7753, 2160, 9690, 201, 7926, 1469, 3437, 9939, 6550, 5567, 2452, 3201, 4402, 3181, 5685, 1790, 5045, 8122, 7296, 768, 5261, 2576, 6643, 4781, 1945, 5516, 8922, 8796, 6633, 7263, 9807, 7993, 4712, 1640, 1644, 2131, 8519, 2955, 203, 6356, 8148, 8107, 6575, 4769, 8354, 995, 8881, 972, 7933, 3869, 9749, 6260, 6269, 6134, 2997, 674, 5447, 8738, 7028, 53, 3314, 8398, 8061, 7264, 7488, 1001, 2594, 4870, 8312, 4053, 6041, 1680]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fbc484647c0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.7795
Mean test/val loss: 1.6055
[25, 50, 75] percentiles test/val loss: [1.1008 1.5362 1.977 ]

Epoch 4, loss = 1.3866
Mean test/val loss: 1.3188
[25, 50, 75] percentiles test/val loss: [0.8623 1.2022 1.6161]

Epoch 6, loss = 1.2116
Mean test/val loss: 1.2215
[25, 50, 75] percentiles test/val loss: [0.815  1.1027 1.4806]

Epoch 8, loss = 1.1522
Mean test/val loss: 1.1406
[25, 50, 75] percentiles test/val loss: [0.7242 1.0258 1.3854]

Epoch 10, loss = 1.1139
Mean test/val loss: 1.1038
[25, 50, 75] percentiles test/val loss: [0.7026 0.9928 1.3493]

Epoch 12, loss = 1.0837
Mean test/val loss: 1.1028
[25, 50, 75] percentiles test/val loss: [0.708  0.997  1.3371]

Epoch 14, loss = 1.0587
Mean test/val loss: 1.0442
[25, 50, 75] percentiles test/val loss: [0.6616 0.9337 1.2745]

Epoch 16, loss = 1.0360
Mean test/val loss: 1.0279
[25, 50, 75] percentiles test/val loss: [0.6532 0.9258 1.2588]

Epoch 18, loss = 1.0197
Mean test/val loss: 1.0253
[25, 50, 75] percentiles test/val loss: [0.646  0.9097 1.259 ]

Epoch 20, loss = 1.0033
Mean test/val loss: 1.0198
[25, 50, 75] percentiles test/val loss: [0.6444 0.9157 1.2552]

Epoch 22, loss = 0.9855
Mean test/val loss: 0.9929
[25, 50, 75] percentiles test/val loss: [0.633  0.8909 1.2152]

Epoch 24, loss = 0.9741
Mean test/val loss: 0.9937
[25, 50, 75] percentiles test/val loss: [0.6356 0.8823 1.2087]

Epoch 26, loss = 0.9566
Mean test/val loss: 0.9847
[25, 50, 75] percentiles test/val loss: [0.6218 0.8758 1.2085]

Epoch 28, loss = 0.9443
Mean test/val loss: 0.9939
[25, 50, 75] percentiles test/val loss: [0.623  0.8862 1.2131]

Epoch 30, loss = 0.9328
Mean test/val loss: 0.9658
[25, 50, 75] percentiles test/val loss: [0.6203 0.8633 1.1716]

Epoch 32, loss = 0.9230
Mean test/val loss: 0.9646
[25, 50, 75] percentiles test/val loss: [0.612  0.857  1.1787]

Epoch 34, loss = 0.9089
Mean test/val loss: 0.9344
[25, 50, 75] percentiles test/val loss: [0.5914 0.8332 1.1475]

Epoch 36, loss = 0.8997
Mean test/val loss: 0.9797
[25, 50, 75] percentiles test/val loss: [0.6199 0.8664 1.1942]

Epoch 38, loss = 0.8918
Mean test/val loss: 0.9268
[25, 50, 75] percentiles test/val loss: [0.5848 0.823  1.1308]

Epoch 40, loss = 0.8803
Mean test/val loss: 0.9166
[25, 50, 75] percentiles test/val loss: [0.578  0.8077 1.1258]

New lr: 1e-05
Epoch 42, loss = 0.7998
Mean test/val loss: 0.8716
[25, 50, 75] percentiles test/val loss: [0.5549 0.7679 1.0734]

Epoch 44, loss = 0.7872
Mean test/val loss: 0.8667
[25, 50, 75] percentiles test/val loss: [0.5527 0.7662 1.0607]

Epoch 46, loss = 0.7783
Mean test/val loss: 0.8665
[25, 50, 75] percentiles test/val loss: [0.5483 0.7649 1.0588]

Epoch 48, loss = 0.7707
Mean test/val loss: 0.8637
[25, 50, 75] percentiles test/val loss: [0.5459 0.7652 1.0609]

Epoch 50, loss = 0.7639
Mean test/val loss: 0.8591
[25, 50, 75] percentiles test/val loss: [0.5418 0.7586 1.0566]

Epoch 52, loss = 0.7575
Mean test/val loss: 0.8623
[25, 50, 75] percentiles test/val loss: [0.5404 0.7593 1.0545]

Epoch 54, loss = 0.7516
Mean test/val loss: 0.8594
[25, 50, 75] percentiles test/val loss: [0.5423 0.7564 1.0536]

Epoch 56, loss = 0.7459
Mean test/val loss: 0.8610
[25, 50, 75] percentiles test/val loss: [0.5435 0.757  1.0537]

Epoch 58, loss = 0.7407
Mean test/val loss: 0.8583
[25, 50, 75] percentiles test/val loss: [0.5385 0.7585 1.0483]

Epoch 60, loss = 0.7357
Mean test/val loss: 0.8570
[25, 50, 75] percentiles test/val loss: [0.54   0.7581 1.0435]

Epoch 62, loss = 0.7308
Mean test/val loss: 0.8571
[25, 50, 75] percentiles test/val loss: [0.5411 0.7551 1.0395]

Epoch 64, loss = 0.7258
Mean test/val loss: 0.8552
[25, 50, 75] percentiles test/val loss: [0.5349 0.7574 1.0414]

Epoch 66, loss = 0.7216
Mean test/val loss: 0.8581
[25, 50, 75] percentiles test/val loss: [0.5413 0.7529 1.0415]

Epoch 68, loss = 0.7172
Mean test/val loss: 0.8552
[25, 50, 75] percentiles test/val loss: [0.5337 0.7514 1.0381]

Epoch 70, loss = 0.7131
Mean test/val loss: 0.8559
[25, 50, 75] percentiles test/val loss: [0.5333 0.7497 1.0376]

Epoch 72, loss = 0.7087
Mean test/val loss: 0.8541
[25, 50, 75] percentiles test/val loss: [0.5348 0.7503 1.0369]

Epoch 74, loss = 0.7052
Mean test/val loss: 0.8548
[25, 50, 75] percentiles test/val loss: [0.5351 0.7506 1.0351]

Epoch 76, loss = 0.7014
Mean test/val loss: 0.8557
[25, 50, 75] percentiles test/val loss: [0.5336 0.7531 1.032 ]

Epoch 78, loss = 0.6977
Mean test/val loss: 0.8532
[25, 50, 75] percentiles test/val loss: [0.5312 0.7499 1.0309]

Epoch 80, loss = 0.6938
Mean test/val loss: 0.8541
[25, 50, 75] percentiles test/val loss: [0.531  0.746  1.0377]


Total parameters: 51479472
Total training + validation time: 22.0 hours, 45.0 mins, and 33.60000000000582 secs
Final val loss: 0.8541280196383595

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_10_14_23 sample1050: 0.23601937294006348
dataset_10_14_23 sample7802: 0.7719560861587524
dataset_10_14_23 sample156: 0.4189368188381195
dataset_10_14_23 sample2452: 0.6659883260726929
dataset_10_14_23 sample752: 0.6299746036529541
MSE Loss: 0.545 +- 0.192

Downsampling (200k) Results:

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['MeanContactDistance', 'MeanContactDistance_bonded', 'GeneticDistance_norm', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy4', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=432, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/432', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/432/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/432/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/432/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fb24ef05310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['GeneticDistance(norm=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  GeneticDistance(norm=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 13.171 minutes
Number of samples: 5000
Average num edges per graph:  61627.9772
Mean degree: [245.68 254.88 219.23 ... 251.09 215.5  255.  ] +- [ 9.13  0.37 26.94 ...  4.77 29.22  0.  ]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fb214dcb3a0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.9306
Mean test/val loss: 0.9127
[25, 50, 75] percentiles test/val loss: [0.3924 0.7375 1.199 ]

Epoch 4, loss = 0.8712
Mean test/val loss: 0.8693
[25, 50, 75] percentiles test/val loss: [0.42   0.6925 1.0904]

Epoch 6, loss = 0.7670
Mean test/val loss: 0.7297
[25, 50, 75] percentiles test/val loss: [0.3461 0.6099 0.9223]

Epoch 8, loss = 0.6678
Mean test/val loss: 0.6407
[25, 50, 75] percentiles test/val loss: [0.293  0.5288 0.814 ]

Epoch 10, loss = 0.5953
Mean test/val loss: 0.5950
[25, 50, 75] percentiles test/val loss: [0.2881 0.4858 0.7691]

Epoch 12, loss = 0.5754
Mean test/val loss: 0.5754
[25, 50, 75] percentiles test/val loss: [0.2628 0.4352 0.7329]

Epoch 14, loss = 0.5729
Mean test/val loss: 0.5770
[25, 50, 75] percentiles test/val loss: [0.2686 0.4676 0.7347]

Epoch 16, loss = 0.5527
Mean test/val loss: 0.5599
[25, 50, 75] percentiles test/val loss: [0.2554 0.4257 0.7326]

Epoch 18, loss = 0.5358
Mean test/val loss: 0.5487
[25, 50, 75] percentiles test/val loss: [0.2503 0.4269 0.7059]

Epoch 20, loss = 0.5341
Mean test/val loss: 0.5409
[25, 50, 75] percentiles test/val loss: [0.2628 0.4276 0.6845]

Epoch 22, loss = 0.5151
Mean test/val loss: 0.5455
[25, 50, 75] percentiles test/val loss: [0.2591 0.4154 0.697 ]

Epoch 24, loss = 0.5016
Mean test/val loss: 0.5244
[25, 50, 75] percentiles test/val loss: [0.2374 0.4117 0.6786]

Epoch 26, loss = 0.4929
Mean test/val loss: 0.5240
[25, 50, 75] percentiles test/val loss: [0.2529 0.4105 0.656 ]

Epoch 28, loss = 0.4837
Mean test/val loss: 0.5267
[25, 50, 75] percentiles test/val loss: [0.2341 0.4025 0.6769]

Epoch 30, loss = 0.4772
Mean test/val loss: 0.5119
[25, 50, 75] percentiles test/val loss: [0.2384 0.3965 0.6689]

Epoch 32, loss = 0.4671
Mean test/val loss: 0.5034
[25, 50, 75] percentiles test/val loss: [0.2204 0.3998 0.6387]

Epoch 34, loss = 0.4609
Mean test/val loss: 0.4918
[25, 50, 75] percentiles test/val loss: [0.2202 0.3808 0.6421]

Epoch 36, loss = 0.4565
Mean test/val loss: 0.4871
[25, 50, 75] percentiles test/val loss: [0.222  0.3818 0.6425]

Epoch 38, loss = 0.4496
Mean test/val loss: 0.4933
[25, 50, 75] percentiles test/val loss: [0.2234 0.3902 0.6472]

Epoch 40, loss = 0.4432
Mean test/val loss: 0.4783
[25, 50, 75] percentiles test/val loss: [0.2203 0.3822 0.6196]

New lr: 1e-05
Epoch 42, loss = 0.4076
Mean test/val loss: 0.4544
[25, 50, 75] percentiles test/val loss: [0.2081 0.3587 0.5956]

Epoch 44, loss = 0.4016
Mean test/val loss: 0.4515
[25, 50, 75] percentiles test/val loss: [0.2057 0.3562 0.5875]

Epoch 46, loss = 0.3971
Mean test/val loss: 0.4492
[25, 50, 75] percentiles test/val loss: [0.2052 0.3563 0.5864]

Epoch 48, loss = 0.3934
Mean test/val loss: 0.4472
[25, 50, 75] percentiles test/val loss: [0.2062 0.3547 0.5796]

Epoch 50, loss = 0.3901
Mean test/val loss: 0.4473
[25, 50, 75] percentiles test/val loss: [0.2056 0.3513 0.5772]

Epoch 52, loss = 0.3870
Mean test/val loss: 0.4451
[25, 50, 75] percentiles test/val loss: [0.2054 0.3555 0.5848]

Epoch 54, loss = 0.3842
Mean test/val loss: 0.4444
[25, 50, 75] percentiles test/val loss: [0.2049 0.3513 0.5785]

Epoch 56, loss = 0.3817
Mean test/val loss: 0.4436
[25, 50, 75] percentiles test/val loss: [0.2047 0.3543 0.5727]

Epoch 58, loss = 0.3793
Mean test/val loss: 0.4434
[25, 50, 75] percentiles test/val loss: [0.2047 0.3488 0.5784]

Epoch 60, loss = 0.3770
Mean test/val loss: 0.4424
[25, 50, 75] percentiles test/val loss: [0.2045 0.3521 0.5718]

Epoch 62, loss = 0.3751
Mean test/val loss: 0.4435
[25, 50, 75] percentiles test/val loss: [0.2045 0.3485 0.5723]

Epoch 64, loss = 0.3732
Mean test/val loss: 0.4402
[25, 50, 75] percentiles test/val loss: [0.205  0.3475 0.5682]

Epoch 66, loss = 0.3713
Mean test/val loss: 0.4419
[25, 50, 75] percentiles test/val loss: [0.206  0.3499 0.5667]

Epoch 68, loss = 0.3695
Mean test/val loss: 0.4394
[25, 50, 75] percentiles test/val loss: [0.2051 0.3467 0.5605]

Epoch 70, loss = 0.3679
Mean test/val loss: 0.4409
[25, 50, 75] percentiles test/val loss: [0.2042 0.3497 0.5664]

Epoch 72, loss = 0.3661
Mean test/val loss: 0.4391
[25, 50, 75] percentiles test/val loss: [0.2058 0.3479 0.5739]

Epoch 74, loss = 0.3646
Mean test/val loss: 0.4395
[25, 50, 75] percentiles test/val loss: [0.2041 0.3473 0.5676]

Epoch 76, loss = 0.3631
Mean test/val loss: 0.4392
[25, 50, 75] percentiles test/val loss: [0.2043 0.3491 0.5632]

Epoch 78, loss = 0.3616
Mean test/val loss: 0.4386
[25, 50, 75] percentiles test/val loss: [0.2055 0.3498 0.5696]

Epoch 80, loss = 0.3604
Mean test/val loss: 0.4384
[25, 50, 75] percentiles test/val loss: [0.2054 0.3504 0.5619]


Total parameters: 26462000
Total training + validation time: 6.0 hours, 45.0 mins, and 30.700000000000728 secs
Final val loss: 0.43839155533909796

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_04_28_23 sample981: 0.767729640007019
dataset_04_28_23 sample324: 0.9003603458404541
dataset_04_28_23 sample3464: 0.6225878000259399
dataset_04_28_23 sample2834: 0.6946849822998047
dataset_04_28_23 sample1936: 0.3513999581336975
Loss: 0.667 +- 0.183

Downsampling (40%) Results:
dataset_04_28_23 sample1936-downsampling: 8.735052108764648
dataset_04_28_23 sample2834-downsampling: 8.634079933166504
dataset_04_28_23 sample324-downsampling: 15.96867561340332
dataset_04_28_23 sample3464-downsampling: 12.884037017822266
dataset_04_28_23 sample981-downsampling: 14.397586822509766
Loss: 12.124 +- 2.973

Removing /scratch/midway3/erschultz/ContactGNNEnergy4downsample
Original sampling (100%) Results:
dataset_04_28_23 sample1936-regular: 8.61350154876709
dataset_04_28_23 sample2834-regular: 8.220259666442871
dataset_04_28_23 sample324-regular: 15.579834938049316
dataset_04_28_23 sample3464-regular: 10.967422485351562
dataset_04_28_23 sample981-regular: 15.517370223999023
Loss: 11.78 +- 3.218

Removing /scratch/midway3/erschultz/ContactGNNEnergy4regsample

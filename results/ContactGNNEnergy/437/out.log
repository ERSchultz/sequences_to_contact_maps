#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'GeneticDistance_norm', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy2', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=437, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/437', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/437/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/437/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/437/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f7a4701f3a0>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'GeneticDistance(norm=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=4, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  GeneticDistance(norm=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 16.682 minutes
Number of samples: 5000
Average num edges per graph:  61883.9736
Mean degree: [246.68 255.88 220.23 ... 252.09 216.5  256.  ] +- [ 9.13  0.37 26.94 ...  4.77 29.22  0.  ]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f7a081ed640>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.5510
Mean test/val loss: 0.5499
[25, 50, 75] percentiles test/val loss: [0.2836 0.4305 0.6793]

Epoch 4, loss = 0.4980
Mean test/val loss: 0.4647
[25, 50, 75] percentiles test/val loss: [0.2157 0.3582 0.5749]

Epoch 6, loss = 0.4479
Mean test/val loss: 0.4255
[25, 50, 75] percentiles test/val loss: [0.1991 0.3305 0.5355]

Epoch 8, loss = 0.4161
Mean test/val loss: 0.4196
[25, 50, 75] percentiles test/val loss: [0.2094 0.3316 0.4996]

Epoch 10, loss = 0.3954
Mean test/val loss: 0.3850
[25, 50, 75] percentiles test/val loss: [0.1889 0.3049 0.4645]

Epoch 12, loss = 0.3712
Mean test/val loss: 0.4024
[25, 50, 75] percentiles test/val loss: [0.2117 0.3023 0.4669]

Epoch 14, loss = 0.3818
Mean test/val loss: 0.3881
[25, 50, 75] percentiles test/val loss: [0.1786 0.3018 0.4802]

Epoch 16, loss = 0.3462
Mean test/val loss: 0.3563
[25, 50, 75] percentiles test/val loss: [0.1728 0.2793 0.4286]

Epoch 18, loss = 0.3343
Mean test/val loss: 0.3676
[25, 50, 75] percentiles test/val loss: [0.168  0.2711 0.4297]

Epoch 20, loss = 0.3274
Mean test/val loss: 0.3576
[25, 50, 75] percentiles test/val loss: [0.1731 0.2795 0.4179]

Epoch 22, loss = 0.3161
Mean test/val loss: 0.3324
[25, 50, 75] percentiles test/val loss: [0.1608 0.2597 0.3944]

Epoch 24, loss = 0.3069
Mean test/val loss: 0.3255
[25, 50, 75] percentiles test/val loss: [0.1551 0.2508 0.4028]

Epoch 26, loss = 0.2992
Mean test/val loss: 0.3197
[25, 50, 75] percentiles test/val loss: [0.1514 0.2491 0.392 ]

Epoch 28, loss = 0.2913
Mean test/val loss: 0.3086
[25, 50, 75] percentiles test/val loss: [0.1477 0.2379 0.3766]

Epoch 30, loss = 0.2875
Mean test/val loss: 0.3056
[25, 50, 75] percentiles test/val loss: [0.1423 0.2358 0.3691]

Epoch 32, loss = 0.2808
Mean test/val loss: 0.3044
[25, 50, 75] percentiles test/val loss: [0.1429 0.2359 0.3654]

Epoch 34, loss = 0.2776
Mean test/val loss: 0.3040
[25, 50, 75] percentiles test/val loss: [0.147  0.2378 0.3657]

Epoch 36, loss = 0.2739
Mean test/val loss: 0.2948
[25, 50, 75] percentiles test/val loss: [0.1394 0.2305 0.3592]

Epoch 38, loss = 0.2693
Mean test/val loss: 0.2992
[25, 50, 75] percentiles test/val loss: [0.1387 0.2286 0.367 ]

Epoch 40, loss = 0.2670
Mean test/val loss: 0.2901
[25, 50, 75] percentiles test/val loss: [0.1355 0.2263 0.354 ]

New lr: 1e-05
Epoch 42, loss = 0.2407
Mean test/val loss: 0.2765
[25, 50, 75] percentiles test/val loss: [0.1282 0.2166 0.3355]

Epoch 44, loss = 0.2369
Mean test/val loss: 0.2749
[25, 50, 75] percentiles test/val loss: [0.1291 0.2159 0.3307]

Epoch 46, loss = 0.2343
Mean test/val loss: 0.2740
[25, 50, 75] percentiles test/val loss: [0.1263 0.2133 0.3317]

Epoch 48, loss = 0.2323
Mean test/val loss: 0.2742
[25, 50, 75] percentiles test/val loss: [0.1275 0.2146 0.3299]

Epoch 50, loss = 0.2304
Mean test/val loss: 0.2737
[25, 50, 75] percentiles test/val loss: [0.1262 0.213  0.3331]

Epoch 52, loss = 0.2287
Mean test/val loss: 0.2732
[25, 50, 75] percentiles test/val loss: [0.1259 0.2126 0.3251]

Epoch 54, loss = 0.2272
Mean test/val loss: 0.2733
[25, 50, 75] percentiles test/val loss: [0.1277 0.2127 0.3263]

Epoch 56, loss = 0.2258
Mean test/val loss: 0.2728
[25, 50, 75] percentiles test/val loss: [0.1253 0.2122 0.3267]

Epoch 58, loss = 0.2246
Mean test/val loss: 0.2726
[25, 50, 75] percentiles test/val loss: [0.125  0.2109 0.3274]

Epoch 60, loss = 0.2234
Mean test/val loss: 0.2718
[25, 50, 75] percentiles test/val loss: [0.1239 0.2109 0.3272]

Epoch 62, loss = 0.2222
Mean test/val loss: 0.2717
[25, 50, 75] percentiles test/val loss: [0.1243 0.2081 0.3248]

Epoch 64, loss = 0.2212
Mean test/val loss: 0.2715
[25, 50, 75] percentiles test/val loss: [0.1245 0.2087 0.3272]

Epoch 66, loss = 0.2202
Mean test/val loss: 0.2708
[25, 50, 75] percentiles test/val loss: [0.1253 0.2061 0.3254]

Epoch 68, loss = 0.2193
Mean test/val loss: 0.2707
[25, 50, 75] percentiles test/val loss: [0.1234 0.2087 0.3234]

Epoch 70, loss = 0.2184
Mean test/val loss: 0.2708
[25, 50, 75] percentiles test/val loss: [0.1237 0.2073 0.3229]

Epoch 72, loss = 0.2176
Mean test/val loss: 0.2706
[25, 50, 75] percentiles test/val loss: [0.1246 0.2069 0.324 ]

Epoch 74, loss = 0.2168
Mean test/val loss: 0.2698
[25, 50, 75] percentiles test/val loss: [0.1237 0.208  0.3218]

Epoch 76, loss = 0.2160
Mean test/val loss: 0.2699
[25, 50, 75] percentiles test/val loss: [0.1239 0.2079 0.3205]

Epoch 78, loss = 0.2152
Mean test/val loss: 0.2702
[25, 50, 75] percentiles test/val loss: [0.1245 0.2077 0.322 ]

Epoch 80, loss = 0.2145
Mean test/val loss: 0.2694
[25, 50, 75] percentiles test/val loss: [0.124  0.2046 0.3196]


Total parameters: 26462256
Total training + validation time: 6.0 hours, 51.0 mins, and 27.299999999999272 secs
Final val loss: 0.26944786741957066

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_04_28_23 sample981: 0.5169777870178223
dataset_04_28_23 sample324: 0.5611526370048523
dataset_04_28_23 sample3464: 0.2808418869972229
dataset_04_28_23 sample2834: 0.41462254524230957
dataset_04_28_23 sample1936: 0.20442044734954834
Loss: 0.396 +- 0.136

Downsampling (40%) Results:
dataset_04_28_23 sample1936-downsampling: 10.582952499389648
dataset_04_28_23 sample2834-downsampling: 6.763928413391113
dataset_04_28_23 sample324-downsampling: 47.44232940673828
dataset_04_28_23 sample3464-downsampling: 7.66920280456543
dataset_04_28_23 sample981-downsampling: 12.776018142700195
Loss: 17.047 +- 15.347

Removing /scratch/midway3/erschultz/ContactGNNEnergy2downsample
Original sampling (100%) Results:
dataset_04_28_23 sample1936-regular: 9.498482704162598
dataset_04_28_23 sample2834-regular: 6.847291469573975
dataset_04_28_23 sample324-regular: 40.74212646484375
dataset_04_28_23 sample3464-regular: 10.676877975463867
dataset_04_28_23 sample981-regular: 13.21214485168457
Loss: 16.195 +- 12.443

Removing /scratch/midway3/erschultz/ContactGNNEnergy2regsample

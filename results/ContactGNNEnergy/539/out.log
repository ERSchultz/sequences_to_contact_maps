#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_29_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy18', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=539, pretrain_id=536, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/539', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/539/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/539/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/539/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fe612749280>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 46.84 minutes
Number of samples: 10000
Average num edges per graph:  63526.4298
Mean degree: [254.38 253.47 253.66 ... 250.21 249.58 237.95] +- [ 1.27  3.02  1.88 ...  4.56  5.82 14.15]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [2729, 4175, 5211, 7125, 6072, 4886, 3437, 9395, 6505, 8312, 2775, 4982, 384, 7192, 4830, 4810, 5288, 8226, 5118, 1608, 8631, 1875, 6269, 1644, 8442, 3832, 8080, 8599, 7599, 7105, 6511, 5940, 2674, 8211, 1944, 99, 2741, 5296, 9991, 9100, 4900, 7094, 9422, 821, 2834, 203, 6164, 1053, 1623, 5339, 5618, 6419, 6648, 3837, 8951, 3740, 3648, 1317, 8142, 2131, 7446, 6617, 6883, 6997, 4168, 4707, 53, 9053, 5522, 3272, 9951, 8738, 7654, 9257, 5955, 668, 7114, 1249, 614, 4316, 3842, 3658, 5567, 4769, 1885, 988, 5620, 4659, 2576, 5258, 9231, 9147, 1408, 5103, 38, 5002, 5585, 520, 2008, 201, 195, 8305]
Pre-trained model is loaded.
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fe5d15b7fd0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.9691
Mean test/val loss: 0.9690
[25, 50, 75] percentiles test/val loss: [0.659  0.8854 1.1815]

Epoch 4, loss = 0.9438
Mean test/val loss: 0.9541
[25, 50, 75] percentiles test/val loss: [0.6386 0.8693 1.1466]

Epoch 6, loss = 0.9257
Mean test/val loss: 0.9531
[25, 50, 75] percentiles test/val loss: [0.6469 0.8744 1.1453]

Epoch 8, loss = 0.9139
Mean test/val loss: 0.9320
[25, 50, 75] percentiles test/val loss: [0.6304 0.8497 1.1253]

Epoch 10, loss = 0.8993
Mean test/val loss: 0.9415
[25, 50, 75] percentiles test/val loss: [0.6358 0.8488 1.1249]

Epoch 12, loss = 0.8890
Mean test/val loss: 0.9042
[25, 50, 75] percentiles test/val loss: [0.6045 0.8255 1.0827]

Epoch 14, loss = 0.8771
Mean test/val loss: 0.9200
[25, 50, 75] percentiles test/val loss: [0.6194 0.8308 1.1018]

Epoch 16, loss = 0.8682
Mean test/val loss: 0.9170
[25, 50, 75] percentiles test/val loss: [0.6132 0.8362 1.1018]

Epoch 18, loss = 0.8591
Mean test/val loss: 0.9047
[25, 50, 75] percentiles test/val loss: [0.6061 0.8223 1.089 ]

Epoch 20, loss = 0.8482
Mean test/val loss: 0.8932
[25, 50, 75] percentiles test/val loss: [0.5974 0.8057 1.0791]

Epoch 22, loss = 0.8418
Mean test/val loss: 0.9072
[25, 50, 75] percentiles test/val loss: [0.6174 0.8194 1.0936]

Epoch 24, loss = 0.8310
Mean test/val loss: 0.9087
[25, 50, 75] percentiles test/val loss: [0.6018 0.8143 1.0971]

Epoch 26, loss = 0.8235
Mean test/val loss: 0.8832
[25, 50, 75] percentiles test/val loss: [0.584  0.7965 1.0623]

Epoch 28, loss = 0.8174
Mean test/val loss: 0.8980
[25, 50, 75] percentiles test/val loss: [0.6017 0.8043 1.0846]

Epoch 30, loss = 0.8095
Mean test/val loss: 0.8811
[25, 50, 75] percentiles test/val loss: [0.5881 0.7914 1.052 ]

Epoch 32, loss = 0.8035
Mean test/val loss: 0.8741
[25, 50, 75] percentiles test/val loss: [0.5889 0.7901 1.0498]

Epoch 34, loss = 0.7986
Mean test/val loss: 0.8731
[25, 50, 75] percentiles test/val loss: [0.5819 0.7839 1.048 ]

Epoch 36, loss = 0.7901
Mean test/val loss: 0.8695
[25, 50, 75] percentiles test/val loss: [0.5796 0.7801 1.0368]

Epoch 38, loss = 0.7829
Mean test/val loss: 0.8872
[25, 50, 75] percentiles test/val loss: [0.5983 0.8    1.0583]

Epoch 40, loss = 0.7774
Mean test/val loss: 0.8886
[25, 50, 75] percentiles test/val loss: [0.6077 0.7962 1.0548]

New lr: 1e-05
Epoch 42, loss = 0.6938
Mean test/val loss: 0.8217
[25, 50, 75] percentiles test/val loss: [0.5438 0.7349 0.9776]

Epoch 44, loss = 0.6818
Mean test/val loss: 0.8199
[25, 50, 75] percentiles test/val loss: [0.5424 0.7317 0.9734]

Epoch 46, loss = 0.6742
Mean test/val loss: 0.8198
[25, 50, 75] percentiles test/val loss: [0.5425 0.7276 0.974 ]

Epoch 48, loss = 0.6678
Mean test/val loss: 0.8190
[25, 50, 75] percentiles test/val loss: [0.541  0.7291 0.9742]

Epoch 50, loss = 0.6623
Mean test/val loss: 0.8201
[25, 50, 75] percentiles test/val loss: [0.5405 0.731  0.975 ]

Epoch 52, loss = 0.6573
Mean test/val loss: 0.8196
[25, 50, 75] percentiles test/val loss: [0.5413 0.7298 0.9738]

Epoch 54, loss = 0.6525
Mean test/val loss: 0.8205
[25, 50, 75] percentiles test/val loss: [0.5386 0.7304 0.9698]

Epoch 56, loss = 0.6482
Mean test/val loss: 0.8219
[25, 50, 75] percentiles test/val loss: [0.5409 0.7332 0.98  ]

Epoch 58, loss = 0.6440
Mean test/val loss: 0.8215
[25, 50, 75] percentiles test/val loss: [0.5439 0.7308 0.9764]

Epoch 60, loss = 0.6401
Mean test/val loss: 0.8215
[25, 50, 75] percentiles test/val loss: [0.5398 0.7331 0.9767]

Epoch 62, loss = 0.6362
Mean test/val loss: 0.8231
[25, 50, 75] percentiles test/val loss: [0.5426 0.7341 0.981 ]

Epoch 64, loss = 0.6325
Mean test/val loss: 0.8242
[25, 50, 75] percentiles test/val loss: [0.5436 0.7358 0.9803]

Epoch 66, loss = 0.6291
Mean test/val loss: 0.8236
[25, 50, 75] percentiles test/val loss: [0.5436 0.7336 0.9843]

Epoch 68, loss = 0.6255
Mean test/val loss: 0.8251
[25, 50, 75] percentiles test/val loss: [0.5451 0.7305 0.979 ]

Epoch 70, loss = 0.6223
Mean test/val loss: 0.8257
[25, 50, 75] percentiles test/val loss: [0.5437 0.7337 0.9841]


Total parameters: 51479216
Total training + validation time: 21.0 hours, 2.0 mins, and 53.89999999999418 secs
Final val loss: 0.8257440943196416

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_09_29_23 sample1050: 1.3119561672210693
dataset_09_29_23 sample7802: 0.8338642120361328
dataset_09_29_23 sample156: 0.8287314772605896
dataset_09_29_23 sample2452: 0.7221465110778809
dataset_09_29_23 sample752: 0.6342436075210571
MSE Loss: 0.866 +- 0.235

Downsampling (200k) Results:
dataset_09_29_23 sample1050-downsampling: 215.23873901367188
dataset_09_29_23 sample156-downsampling: 82.55763244628906
dataset_09_29_23 sample2452-downsampling: 78.4754638671875
dataset_09_29_23 sample752-downsampling: 27.103702545166016
dataset_09_29_23 sample7802-downsampling: 53.6968994140625
Loss: 91.414 +- 65.018

Removing /scratch/midway3/erschultz/ContactGNNEnergy18downsample
Original sampling (400k) Results:
dataset_09_29_23 sample1050-regular: 178.68475341796875
dataset_09_29_23 sample156-regular: 99.91685485839844
dataset_09_29_23 sample2452-regular: 92.80674743652344
dataset_09_29_23 sample752-regular: 26.703475952148438
dataset_09_29_23 sample7802-regular: 51.0814208984375
Loss: 89.839 +- 51.946

Removing /scratch/midway3/erschultz/ContactGNNEnergy18regsample

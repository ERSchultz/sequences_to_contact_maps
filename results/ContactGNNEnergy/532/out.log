#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_diagnorm', 'ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy11', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=532, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/532', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/532/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/532/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/532/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f43526c0280>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'ContactDistance(norm=False, diag_norm=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=4, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, diag_norm=True),
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 27.726 minutes
Number of samples: 10000
Average num edges per graph:  63539.8822
Mean degree: [246.36 254.75 249.55 ... 251.39 254.63 242.59] +- [ 9.11  0.58  6.48 ...  3.73  0.95 19.1 ]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [3389, 8922, 4730, 4816, 5041, 9807, 1384, 496, 5296, 4413, 978, 4769, 5711, 5002, 3142, 7325, 6896, 47, 8927, 8888, 6926, 9992, 6617, 6108, 1317, 3094, 8711, 5784, 517, 381, 2305, 5615, 2975, 8722, 520, 3740, 3832, 1428, 821, 641, 4319, 5774, 4793, 99, 1398, 9481, 3188, 6346, 8948, 8305, 5511, 5942, 2760, 5940, 8789, 6509, 3072, 1119, 2799, 614, 16, 752, 3693, 9416, 4584, 7933, 364, 8241, 392, 9223, 297, 8850, 5288, 9975, 8442, 2377, 7264, 9257, 4583, 1455, 2352, 8631, 3592, 4067, 8122, 2108, 4304, 2729, 4175, 3463, 1885, 3244, 1945, 9966, 863, 3960, 3324, 9417, 3133, 8928, 4377, 6707]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f430d5ad280>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.1492
Mean test/val loss: 1.0750
[25, 50, 75] percentiles test/val loss: [0.7    0.9775 1.3341]

Epoch 4, loss = 0.9464
Mean test/val loss: 0.9172
[25, 50, 75] percentiles test/val loss: [0.5771 0.8316 1.1418]

Epoch 6, loss = 0.8648
Mean test/val loss: 0.8451
[25, 50, 75] percentiles test/val loss: [0.5204 0.7498 1.049 ]

Epoch 8, loss = 0.8290
Mean test/val loss: 0.8170
[25, 50, 75] percentiles test/val loss: [0.5034 0.7377 1.0046]

Epoch 10, loss = 0.7963
Mean test/val loss: 0.7896
[25, 50, 75] percentiles test/val loss: [0.4866 0.7124 0.9803]

Epoch 12, loss = 0.7893
Mean test/val loss: 0.7813
[25, 50, 75] percentiles test/val loss: [0.4806 0.6976 0.97  ]

Epoch 14, loss = 0.7595
Mean test/val loss: 0.7660
[25, 50, 75] percentiles test/val loss: [0.4763 0.6833 0.9496]

Epoch 16, loss = 0.7408
Mean test/val loss: 0.7437
[25, 50, 75] percentiles test/val loss: [0.451  0.6608 0.9286]

Epoch 18, loss = 0.7255
Mean test/val loss: 0.7339
[25, 50, 75] percentiles test/val loss: [0.4491 0.6405 0.9174]

Epoch 20, loss = 0.7118
Mean test/val loss: 0.7175
[25, 50, 75] percentiles test/val loss: [0.4434 0.6304 0.9046]

Epoch 22, loss = 0.6983
Mean test/val loss: 0.6993
[25, 50, 75] percentiles test/val loss: [0.4318 0.6203 0.879 ]

Epoch 24, loss = 0.6879
Mean test/val loss: 0.7074
[25, 50, 75] percentiles test/val loss: [0.4404 0.6246 0.8885]

Epoch 26, loss = 0.6790
Mean test/val loss: 0.6984
[25, 50, 75] percentiles test/val loss: [0.43   0.6215 0.8823]

Epoch 28, loss = 0.6691
Mean test/val loss: 0.6872
[25, 50, 75] percentiles test/val loss: [0.4246 0.6074 0.8566]

Epoch 30, loss = 0.6594
Mean test/val loss: 0.6841
[25, 50, 75] percentiles test/val loss: [0.4265 0.6147 0.8619]

Epoch 32, loss = 0.6520
Mean test/val loss: 0.6704
[25, 50, 75] percentiles test/val loss: [0.4139 0.5994 0.8422]

Epoch 34, loss = 0.6449
Mean test/val loss: 0.6767
[25, 50, 75] percentiles test/val loss: [0.4142 0.6045 0.8436]

Epoch 36, loss = 0.6387
Mean test/val loss: 0.6580
[25, 50, 75] percentiles test/val loss: [0.4065 0.5875 0.8314]

Epoch 38, loss = 0.6342
Mean test/val loss: 0.6471
[25, 50, 75] percentiles test/val loss: [0.4019 0.5751 0.8071]

Epoch 40, loss = 0.6260
Mean test/val loss: 0.6523
[25, 50, 75] percentiles test/val loss: [0.4087 0.5802 0.8182]

New lr: 1e-05
Epoch 42, loss = 0.5746
Mean test/val loss: 0.6139
[25, 50, 75] percentiles test/val loss: [0.3837 0.5463 0.7662]

Epoch 44, loss = 0.5683
Mean test/val loss: 0.6108
[25, 50, 75] percentiles test/val loss: [0.3819 0.5435 0.7616]

Epoch 46, loss = 0.5640
Mean test/val loss: 0.6098
[25, 50, 75] percentiles test/val loss: [0.3812 0.5412 0.7577]

Epoch 48, loss = 0.5605
Mean test/val loss: 0.6079
[25, 50, 75] percentiles test/val loss: [0.3812 0.5398 0.7591]

Epoch 50, loss = 0.5573
Mean test/val loss: 0.6065
[25, 50, 75] percentiles test/val loss: [0.3815 0.5378 0.7564]

Epoch 52, loss = 0.5545
Mean test/val loss: 0.6060
[25, 50, 75] percentiles test/val loss: [0.3787 0.5395 0.7561]

Epoch 54, loss = 0.5519
Mean test/val loss: 0.6050
[25, 50, 75] percentiles test/val loss: [0.3806 0.5379 0.7554]

Epoch 56, loss = 0.5495
Mean test/val loss: 0.6037
[25, 50, 75] percentiles test/val loss: [0.3779 0.5362 0.7551]

Epoch 58, loss = 0.5472
Mean test/val loss: 0.6034
[25, 50, 75] percentiles test/val loss: [0.3778 0.5359 0.7508]

Epoch 60, loss = 0.5449
Mean test/val loss: 0.6036
[25, 50, 75] percentiles test/val loss: [0.3775 0.5341 0.7508]

Epoch 62, loss = 0.5429
Mean test/val loss: 0.6010
[25, 50, 75] percentiles test/val loss: [0.377  0.5325 0.749 ]

Epoch 64, loss = 0.5410
Mean test/val loss: 0.6011
[25, 50, 75] percentiles test/val loss: [0.3792 0.5316 0.747 ]

Epoch 66, loss = 0.5391
Mean test/val loss: 0.6004
[25, 50, 75] percentiles test/val loss: [0.377  0.5323 0.7501]

Epoch 68, loss = 0.5373
Mean test/val loss: 0.5990
[25, 50, 75] percentiles test/val loss: [0.3766 0.5302 0.7448]

Epoch 70, loss = 0.5355
Mean test/val loss: 0.5991
[25, 50, 75] percentiles test/val loss: [0.3766 0.5296 0.7444]


Total parameters: 26462256
Total training + validation time: 18.0 hours, 19.0 mins, and 36.0 secs
Final val loss: 0.5990658278502524

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample1050: 1.5502115488052368
dataset_09_28_23 sample7802: 0.4951554536819458
dataset_09_28_23 sample156: 0.6378120183944702
dataset_09_28_23 sample2452: 0.23881986737251282
dataset_09_28_23 sample752: 0.013560453429818153
MSE Loss: 0.587 +- 0.527

Downsampling (200k) Results:
dataset_09_28_23 sample1050-downsampling: 150.6513671875
dataset_09_28_23 sample156-downsampling: 102.88847351074219
dataset_09_28_23 sample2452-downsampling: 23.387413024902344
dataset_09_28_23 sample752-downsampling: 0.7720246315002441
dataset_09_28_23 sample7802-downsampling: 26.248958587646484
Loss: 60.79 +- 56.642

Removing /scratch/midway3/erschultz/ContactGNNEnergy11downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1050-regular: 149.78646850585938
dataset_09_28_23 sample156-regular: 129.62307739257812
dataset_09_28_23 sample2452-regular: 23.276866912841797
dataset_09_28_23 sample752-regular: 0.5139535665512085
dataset_09_28_23 sample7802-regular: 27.119937896728516
Loss: 66.064 +- 61.145

Removing /scratch/midway3/erschultz/ContactGNNEnergy11regsample

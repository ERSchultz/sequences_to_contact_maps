#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_02_30_24_imr90'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy13', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, lambda3=1, grad_clip=None, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', save_early_stop=False, model_type='ContactGNNEnergy', id=689, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', output_clip=None, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, bonded_path=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/689', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/689/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/689/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/689/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=2, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), eig=False, criterion=<function mse_log at 0x7f84e8df6550>, cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 18.145 minutes
Number of samples: 5000
Average num edges per graph:  59567.4004
Mean degree: [190.48 248.96 204.09 ... 255.   254.97 255.  ] +- [43.53  7.8  33.59 ...  0.    0.17  0.  ]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [1640, 1672, 3464, 831, 1651, 2678, 861, 3660, 267, 810, 2325, 2890, 3805, 4444, 2956, 1308, 3942, 2151, 3235, 1362, 566, 1440, 3319, 161, 206, 459, 3674, 4352, 2576, 4555, 753, 2322, 275, 745, 2876, 2221, 1309, 2628, 2363, 1906, 2834, 3684, 166, 3987, 3663, 1549, 981, 3237, 803, 1932, 3661, 4977, 4056, 255, 2787, 3760, 4875, 4932, 1511, 3912, 2913, 2064, 3, 64, 2434, 930, 795, 1006, 727, 672, 2695, 338, 111, 787, 1626, 1407, 952, 833, 4570, 1725, 1798, 1787, 2072, 3457, 544, 3195, 3861, 3343, 1300, 3110, 3283, 4990, 4966, 4092, 1475, 1589, 367, 1972, 4641, 1487, 1184, 4058]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f84e011b6d0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.0170
Mean test/val loss: 1.0010
[25, 50, 75] percentiles test/val loss: [0.575  0.8747 1.2936]

Epoch 4, loss = 0.8689
Mean test/val loss: 0.8273
[25, 50, 75] percentiles test/val loss: [0.4368 0.7323 1.0868]

Epoch 6, loss = 0.7914
Mean test/val loss: 0.8153
[25, 50, 75] percentiles test/val loss: [0.4395 0.7097 1.0435]

Epoch 8, loss = 0.7537
Mean test/val loss: 0.8105
[25, 50, 75] percentiles test/val loss: [0.481  0.7334 1.0099]

Epoch 10, loss = 0.7178
Mean test/val loss: 0.7159
[25, 50, 75] percentiles test/val loss: [0.376  0.6398 0.9571]

Epoch 12, loss = 0.6891
Mean test/val loss: 0.8302
[25, 50, 75] percentiles test/val loss: [0.3975 0.6425 1.0093]

Epoch 14, loss = 0.6652
Mean test/val loss: 0.6824
[25, 50, 75] percentiles test/val loss: [0.3559 0.5992 0.9055]

Epoch 16, loss = 0.6446
Mean test/val loss: 0.6690
[25, 50, 75] percentiles test/val loss: [0.329  0.5671 0.8735]

Epoch 18, loss = 0.6237
Mean test/val loss: 0.6523
[25, 50, 75] percentiles test/val loss: [0.3268 0.5604 0.8455]

Epoch 20, loss = 0.6049
Mean test/val loss: 0.6284
[25, 50, 75] percentiles test/val loss: [0.3125 0.5471 0.8221]

Epoch 22, loss = 0.5831
Mean test/val loss: 0.6202
[25, 50, 75] percentiles test/val loss: [0.3084 0.5446 0.8232]

Epoch 24, loss = 0.5662
Mean test/val loss: 0.5883
[25, 50, 75] percentiles test/val loss: [0.2961 0.518  0.7797]

Epoch 26, loss = 0.5510
Mean test/val loss: 0.6122
[25, 50, 75] percentiles test/val loss: [0.29   0.54   0.8316]

Epoch 28, loss = 0.5364
Mean test/val loss: 0.5990
[25, 50, 75] percentiles test/val loss: [0.3071 0.523  0.7768]

Epoch 30, loss = 0.5233
Mean test/val loss: 0.5567
[25, 50, 75] percentiles test/val loss: [0.2802 0.4902 0.7344]

Epoch 32, loss = 0.5107
Mean test/val loss: 0.5696
[25, 50, 75] percentiles test/val loss: [0.2776 0.497  0.7573]

Epoch 34, loss = 0.4989
Mean test/val loss: 0.5436
[25, 50, 75] percentiles test/val loss: [0.2651 0.4639 0.7351]

Epoch 36, loss = 0.4898
Mean test/val loss: 0.5599
[25, 50, 75] percentiles test/val loss: [0.2722 0.4653 0.7468]

Epoch 38, loss = 0.4788
Mean test/val loss: 0.5637
[25, 50, 75] percentiles test/val loss: [0.2799 0.4784 0.7384]

Epoch 40, loss = 0.4680
Mean test/val loss: 0.5468
[25, 50, 75] percentiles test/val loss: [0.2695 0.4673 0.6987]

New lr: 1e-05
Epoch 42, loss = 0.4072
Mean test/val loss: 0.5009
[25, 50, 75] percentiles test/val loss: [0.2393 0.4242 0.6642]

Epoch 44, loss = 0.3961
Mean test/val loss: 0.4974
[25, 50, 75] percentiles test/val loss: [0.2392 0.4222 0.6539]

Epoch 46, loss = 0.3882
Mean test/val loss: 0.4946
[25, 50, 75] percentiles test/val loss: [0.2355 0.4155 0.6489]

Epoch 48, loss = 0.3815
Mean test/val loss: 0.4951
[25, 50, 75] percentiles test/val loss: [0.233  0.4152 0.6594]

Epoch 50, loss = 0.3754
Mean test/val loss: 0.4935
[25, 50, 75] percentiles test/val loss: [0.2294 0.4197 0.6594]

Epoch 52, loss = 0.3699
Mean test/val loss: 0.4943
[25, 50, 75] percentiles test/val loss: [0.2329 0.4154 0.6488]

Epoch 54, loss = 0.3647
Mean test/val loss: 0.4923
[25, 50, 75] percentiles test/val loss: [0.2313 0.4145 0.6468]

Epoch 56, loss = 0.3597
Mean test/val loss: 0.4949
[25, 50, 75] percentiles test/val loss: [0.2316 0.4158 0.6562]

Epoch 58, loss = 0.3552
Mean test/val loss: 0.4946
[25, 50, 75] percentiles test/val loss: [0.2342 0.4131 0.6591]

Epoch 60, loss = 0.3510
Mean test/val loss: 0.4927
[25, 50, 75] percentiles test/val loss: [0.2302 0.4164 0.6612]


Total parameters: 51478960
Total training + validation time: 28.0 hours, 16.0 mins, and 15.69999999999709 secs
Final val loss: 0.4927330497093499

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_02_30_24_imr90 sample981: 0.701533317565918
dataset_02_30_24_imr90 sample324: 0.12355674058198929
dataset_02_30_24_imr90 sample3464: 0.20541080832481384
dataset_02_30_24_imr90 sample2834: 0.9491018056869507
dataset_02_30_24_imr90 sample1936: 1.0893681049346924
MSE_log: 0.614 +- 0.388

Downsampling (200k) Results:
Original sampling (400k) Results:

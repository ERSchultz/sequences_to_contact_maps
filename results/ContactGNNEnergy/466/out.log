#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16896, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_08_25_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy14', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=466, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=True, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/466', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/466/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/466/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/466/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fa5b4645310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 14.596 minutes
Number of samples: 5000
Average num edges per graph:  64713.4272
Mean degree: [252.9  254.92 254.73 ... 254.88 254.63 254.43] +- [3.31 0.33 0.66 ... 0.35 0.82 1.18]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fa56c220d00>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.2467
Mean test/val loss: 1.1631
[25, 50, 75] percentiles test/val loss: [0.2923 0.7343 1.76  ]

Epoch 4, loss = 1.1219
Mean test/val loss: 1.1531
[25, 50, 75] percentiles test/val loss: [0.3629 0.7241 1.7105]

Epoch 6, loss = 1.1456
Mean test/val loss: 1.1098
[25, 50, 75] percentiles test/val loss: [0.2613 0.6986 1.6967]

Epoch 8, loss = 1.1092
Mean test/val loss: 1.1012
[25, 50, 75] percentiles test/val loss: [0.2656 0.6703 1.6586]

Epoch 10, loss = 6.3035
Mean test/val loss: 3.0592
[25, 50, 75] percentiles test/val loss: [0.7261 1.856  4.086 ]

Epoch 12, loss = 1.5735
Mean test/val loss: 1.3329
[25, 50, 75] percentiles test/val loss: [0.3277 0.8637 2.0545]

Epoch 14, loss = 1.3026
Mean test/val loss: 1.2660
[25, 50, 75] percentiles test/val loss: [0.3153 0.8597 1.9659]

Epoch 16, loss = 1.2684
Mean test/val loss: 1.1412
[25, 50, 75] percentiles test/val loss: [0.2549 0.7141 1.7611]

Epoch 18, loss = 1.1122
Mean test/val loss: 1.0538
[25, 50, 75] percentiles test/val loss: [0.2365 0.629  1.6425]

Epoch 20, loss = 1.2770
Mean test/val loss: 1.1713
[25, 50, 75] percentiles test/val loss: [0.2975 0.7504 1.79  ]

Epoch 22, loss = 5.0264
Mean test/val loss: 1.3214
[25, 50, 75] percentiles test/val loss: [0.3077 0.8975 1.944 ]

Epoch 24, loss = 2.0269
Mean test/val loss: 1.1967
[25, 50, 75] percentiles test/val loss: [0.2752 0.7743 1.8589]

Epoch 26, loss = 1.0306
Mean test/val loss: 1.1176
[25, 50, 75] percentiles test/val loss: [0.4188 0.7629 1.6236]

Epoch 28, loss = 0.9381
Mean test/val loss: 0.9031
[25, 50, 75] percentiles test/val loss: [0.2426 0.5673 1.3728]

Epoch 30, loss = 2.3383
Mean test/val loss: 1.4139
[25, 50, 75] percentiles test/val loss: [0.3273 0.8828 2.1344]

Epoch 32, loss = 1.1441
Mean test/val loss: 1.1177
[25, 50, 75] percentiles test/val loss: [0.2488 0.6963 1.7319]

Epoch 34, loss = 10.1868
Mean test/val loss: 1.7248
[25, 50, 75] percentiles test/val loss: [0.3693 0.9586 2.7163]

Epoch 36, loss = 1.2853
Mean test/val loss: 1.2124
[25, 50, 75] percentiles test/val loss: [0.2718 0.7426 1.8713]

Epoch 38, loss = 1.3355
Mean test/val loss: 1.2524
[25, 50, 75] percentiles test/val loss: [0.3217 0.7981 1.8921]

Epoch 40, loss = 1.9545
Mean test/val loss: 1.3942
[25, 50, 75] percentiles test/val loss: [0.3742 0.8999 2.1944]

New lr: 1e-05
Epoch 42, loss = 1.6160
Mean test/val loss: 1.2746
[25, 50, 75] percentiles test/val loss: [0.2822 0.8052 2.0519]

Epoch 44, loss = 1.2834
Mean test/val loss: 5.5791
[25, 50, 75] percentiles test/val loss: [3.394  4.4966 6.0496]

Epoch 46, loss = 1.1608
Mean test/val loss: 1.1060
[25, 50, 75] percentiles test/val loss: [0.2715 0.7125 1.7024]

Epoch 48, loss = 0.9992
Mean test/val loss: 1.0092
[25, 50, 75] percentiles test/val loss: [0.2587 0.6326 1.5871]

Epoch 50, loss = 0.9357
Mean test/val loss: 0.9802
[25, 50, 75] percentiles test/val loss: [0.247  0.6172 1.5707]

Epoch 52, loss = 1.0899
Mean test/val loss: 1.0546
[25, 50, 75] percentiles test/val loss: [0.2635 0.6984 1.6679]

Epoch 54, loss = 0.9404
Mean test/val loss: 0.9519
[25, 50, 75] percentiles test/val loss: [0.2261 0.5853 1.5107]

Epoch 56, loss = 0.9077
Mean test/val loss: 0.9255
[25, 50, 75] percentiles test/val loss: [0.2121 0.5733 1.4667]

Epoch 58, loss = 0.8745
Mean test/val loss: 0.8861
[25, 50, 75] percentiles test/val loss: [0.2032 0.5405 1.4018]

Epoch 60, loss = 0.8527
Mean test/val loss: 0.8765
[25, 50, 75] percentiles test/val loss: [0.2157 0.5457 1.3776]

Epoch 62, loss = 0.8352
Mean test/val loss: 0.8797
[25, 50, 75] percentiles test/val loss: [0.242  0.5475 1.352 ]

Epoch 64, loss = 0.8210
Mean test/val loss: 0.8599
[25, 50, 75] percentiles test/val loss: [0.2105 0.5336 1.3294]

Epoch 66, loss = 0.8062
Mean test/val loss: 0.8349
[25, 50, 75] percentiles test/val loss: [0.1939 0.5178 1.3034]

Epoch 68, loss = 0.7951
Mean test/val loss: 0.8181
[25, 50, 75] percentiles test/val loss: [0.197  0.5128 1.2871]

Epoch 70, loss = 0.7914
Mean test/val loss: 0.8379
[25, 50, 75] percentiles test/val loss: [0.1941 0.5098 1.2885]

Epoch 72, loss = 0.7758
Mean test/val loss: 0.8062
[25, 50, 75] percentiles test/val loss: [0.1883 0.5061 1.2611]

Epoch 74, loss = 0.7687
Mean test/val loss: 0.8142
[25, 50, 75] percentiles test/val loss: [0.2    0.5254 1.2863]

Epoch 76, loss = 0.8004
Mean test/val loss: 0.8112
[25, 50, 75] percentiles test/val loss: [0.1896 0.4973 1.2584]

Epoch 78, loss = 0.7590
Mean test/val loss: 0.7863
[25, 50, 75] percentiles test/val loss: [0.1825 0.4825 1.2555]

Epoch 80, loss = 2.2858
Mean test/val loss: 1.0962
[25, 50, 75] percentiles test/val loss: [0.2348 0.7167 1.7876]


Total parameters: 26974000
Total training + validation time: 17.0 hours, 15.0 mins, and 27.69999999999709 secs
Final val loss: 1.0961520680636168

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_08_25_23 sample981: 2.833418846130371
dataset_08_25_23 sample324: 0.34308522939682007
dataset_08_25_23 sample3464: 0.2552238702774048
dataset_08_25_23 sample2834: 0.1319858878850937
dataset_08_25_23 sample1936: 0.414745956659317
MSE Loss: 0.796 +- 1.023

Downsampling (40%) Results:
dataset_08_25_23 sample1936-downsampling: 700.3997802734375
dataset_08_25_23 sample2834-downsampling: 2042.3646240234375
dataset_08_25_23 sample324-downsampling: 1149.9281005859375
dataset_08_25_23 sample3464-downsampling: 1166.04345703125
dataset_08_25_23 sample981-downsampling: 5783.173828125
Loss: 2168.382 +- 1859.005

Removing /scratch/midway3/erschultz/ContactGNNEnergy14downsample
Original sampling (100%) Results:
dataset_08_25_23 sample1936-regular: 650.8511962890625
dataset_08_25_23 sample2834-regular: 2182.3759765625
dataset_08_25_23 sample324-regular: 1004.01806640625
dataset_08_25_23 sample3464-regular: 1045.3021240234375
dataset_08_25_23 sample981-regular: 4914.7607421875
Loss: 1959.462 +- 1564.896

Removing /scratch/midway3/erschultz/ContactGNNEnergy14regsample

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'ContactDistance_diagnorm', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy10', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=526, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/526', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/526/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/526/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/526/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fee79895280>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'ContactDistance(norm=False, diag_norm=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=4, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  ContactDistance(norm=False, diag_norm=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 36.379 minutes
Number of samples: 10000
Average num edges per graph:  63539.8822
Mean degree: [246.36 254.75 249.55 ... 251.39 254.63 242.59] +- [ 9.11  0.58  6.48 ...  3.73  0.95 19.1 ]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [3389, 8922, 4730, 4816, 5041, 9807, 1384, 496, 5296, 4413, 978, 4769, 5711, 5002, 3142, 7325, 6896, 47, 8927, 8888, 6926, 9992, 6617, 6108, 1317, 3094, 8711, 5784, 517, 381, 2305, 5615, 2975, 8722, 520, 3740, 3832, 1428, 821, 641, 4319, 5774, 4793, 99, 1398, 9481, 3188, 6346, 8948, 8305, 5511, 5942, 2760, 5940, 8789, 6509, 3072, 1119, 2799, 614, 16, 752, 3693, 9416, 4584, 7933, 364, 8241, 392, 9223, 297, 8850, 5288, 9975, 8442, 2377, 7264, 9257, 4583, 1455, 2352, 8631, 3592, 4067, 8122, 2108, 4304, 2729, 4175, 3463, 1885, 3244, 1945, 9966, 863, 3960, 3324, 9417, 3133, 8928, 4377, 6707]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fee34798160>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.1126
Mean test/val loss: 1.0375
[25, 50, 75] percentiles test/val loss: [0.693  0.9416 1.2785]

Epoch 4, loss = 0.9042
Mean test/val loss: 0.9439
[25, 50, 75] percentiles test/val loss: [0.6156 0.8348 1.1382]

Epoch 6, loss = 0.8169
Mean test/val loss: 0.8255
[25, 50, 75] percentiles test/val loss: [0.5196 0.7347 1.0496]

Epoch 8, loss = 0.7610
Mean test/val loss: 0.7588
[25, 50, 75] percentiles test/val loss: [0.4874 0.6813 0.9412]

Epoch 10, loss = 0.7213
Mean test/val loss: 0.7132
[25, 50, 75] percentiles test/val loss: [0.4482 0.6353 0.888 ]

Epoch 12, loss = 0.6920
Mean test/val loss: 0.6999
[25, 50, 75] percentiles test/val loss: [0.4474 0.6257 0.8751]

Epoch 14, loss = 0.6657
Mean test/val loss: 0.6583
[25, 50, 75] percentiles test/val loss: [0.4267 0.5921 0.8273]

Epoch 16, loss = 0.6458
Mean test/val loss: 0.6457
[25, 50, 75] percentiles test/val loss: [0.4161 0.579  0.8062]

Epoch 18, loss = 0.6299
Mean test/val loss: 0.6293
[25, 50, 75] percentiles test/val loss: [0.4105 0.5638 0.7897]

Epoch 20, loss = 0.6162
Mean test/val loss: 0.6147
[25, 50, 75] percentiles test/val loss: [0.3948 0.5519 0.7659]

Epoch 22, loss = 0.6044
Mean test/val loss: 0.6192
[25, 50, 75] percentiles test/val loss: [0.4053 0.5565 0.7768]

Epoch 24, loss = 0.5944
Mean test/val loss: 0.6356
[25, 50, 75] percentiles test/val loss: [0.3973 0.566  0.8038]

Epoch 26, loss = 0.5843
Mean test/val loss: 0.6177
[25, 50, 75] percentiles test/val loss: [0.3954 0.5588 0.7769]

Epoch 28, loss = 0.5774
Mean test/val loss: 0.5901
[25, 50, 75] percentiles test/val loss: [0.377  0.5271 0.7431]

Epoch 30, loss = 0.5686
Mean test/val loss: 0.5924
[25, 50, 75] percentiles test/val loss: [0.3792 0.539  0.7377]

Epoch 32, loss = 0.5611
Mean test/val loss: 0.5799
[25, 50, 75] percentiles test/val loss: [0.3761 0.5216 0.7267]

Epoch 34, loss = 0.5547
Mean test/val loss: 0.5905
[25, 50, 75] percentiles test/val loss: [0.3821 0.5264 0.7387]

Epoch 36, loss = 0.5496
Mean test/val loss: 0.5678
[25, 50, 75] percentiles test/val loss: [0.3663 0.5119 0.7168]

Epoch 38, loss = 0.5443
Mean test/val loss: 0.5660
[25, 50, 75] percentiles test/val loss: [0.3665 0.5108 0.7088]

Epoch 40, loss = 0.5391
Mean test/val loss: 0.5634
[25, 50, 75] percentiles test/val loss: [0.3665 0.506  0.7042]

New lr: 1e-05
Epoch 42, loss = 0.4946
Mean test/val loss: 0.5296
[25, 50, 75] percentiles test/val loss: [0.3467 0.481  0.6612]

Epoch 44, loss = 0.4891
Mean test/val loss: 0.5275
[25, 50, 75] percentiles test/val loss: [0.3451 0.4805 0.6577]

Epoch 46, loss = 0.4856
Mean test/val loss: 0.5266
[25, 50, 75] percentiles test/val loss: [0.3441 0.4782 0.6558]

Epoch 48, loss = 0.4826
Mean test/val loss: 0.5239
[25, 50, 75] percentiles test/val loss: [0.3439 0.4771 0.655 ]

Epoch 50, loss = 0.4801
Mean test/val loss: 0.5234
[25, 50, 75] percentiles test/val loss: [0.3422 0.4759 0.6517]

Epoch 52, loss = 0.4779
Mean test/val loss: 0.5220
[25, 50, 75] percentiles test/val loss: [0.3423 0.4773 0.652 ]

Epoch 54, loss = 0.4758
Mean test/val loss: 0.5222
[25, 50, 75] percentiles test/val loss: [0.3435 0.4771 0.652 ]

Epoch 56, loss = 0.4738
Mean test/val loss: 0.5205
[25, 50, 75] percentiles test/val loss: [0.3414 0.4755 0.6508]

Epoch 58, loss = 0.4720
Mean test/val loss: 0.5204
[25, 50, 75] percentiles test/val loss: [0.3412 0.4731 0.6494]

Epoch 60, loss = 0.4703
Mean test/val loss: 0.5198
[25, 50, 75] percentiles test/val loss: [0.3409 0.4726 0.648 ]

Epoch 62, loss = 0.4687
Mean test/val loss: 0.5191
[25, 50, 75] percentiles test/val loss: [0.343  0.472  0.6474]

Epoch 64, loss = 0.4671
Mean test/val loss: 0.5179
[25, 50, 75] percentiles test/val loss: [0.3406 0.4718 0.6446]

Epoch 66, loss = 0.4656
Mean test/val loss: 0.5182
[25, 50, 75] percentiles test/val loss: [0.3406 0.4728 0.6487]

Epoch 68, loss = 0.4642
Mean test/val loss: 0.5182
[25, 50, 75] percentiles test/val loss: [0.3411 0.4717 0.646 ]

Epoch 70, loss = 0.4628
Mean test/val loss: 0.5170
[25, 50, 75] percentiles test/val loss: [0.3399 0.4705 0.6478]


Total parameters: 26462256
Total training + validation time: 15.0 hours, 52.0 mins, and 25.099999999998545 secs
Final val loss: 0.5169676226777956

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample1050: 1.0587869882583618
dataset_09_28_23 sample7802: 0.4171479046344757
dataset_09_28_23 sample156: 0.5656654834747314
dataset_09_28_23 sample2452: 0.23405399918556213
dataset_09_28_23 sample752: 0.008213888853788376
MSE Loss: 0.457 +- 0.354

Downsampling (200k) Results:
dataset_09_28_23 sample1050-downsampling: 62.91493225097656
dataset_09_28_23 sample156-downsampling: 142.22381591796875
dataset_09_28_23 sample2452-downsampling: 22.3339900970459
dataset_09_28_23 sample752-downsampling: 0.4285406172275543
dataset_09_28_23 sample7802-downsampling: 41.358272552490234
Loss: 53.852 +- 48.776

Removing /scratch/midway3/erschultz/ContactGNNEnergy10downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1050-regular: 80.59790802001953
dataset_09_28_23 sample156-regular: 141.61367797851562
dataset_09_28_23 sample2452-regular: 23.638256072998047
dataset_09_28_23 sample752-regular: 0.8197572827339172
dataset_09_28_23 sample7802-regular: 45.04412841796875
Loss: 58.343 +- 49.233

Removing /scratch/midway3/erschultz/ContactGNNEnergy10regsample

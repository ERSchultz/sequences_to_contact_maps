#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_08_25_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy11', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[30], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=461, pretrain_id=434, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/461', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/461/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/461/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/461/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fba96ff6310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 12.826 minutes
Number of samples: 5000
Average num edges per graph:  64713.4272
Mean degree: [252.9  254.92 254.73 ... 254.88 254.63 254.43] +- [3.31 0.33 0.66 ... 0.35 0.82 1.18]

split sizes: train=4500, val=500, test=0, N=5000
Pre-trained model is loaded.
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fba51ee7c10>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.6813
Mean test/val loss: 0.6835
[25, 50, 75] percentiles test/val loss: [0.1787 0.4097 1.0554]

Epoch 4, loss = 0.6588
Mean test/val loss: 0.6908
[25, 50, 75] percentiles test/val loss: [0.1629 0.4082 1.0545]

Epoch 6, loss = 0.6467
Mean test/val loss: 0.6913
[25, 50, 75] percentiles test/val loss: [0.1997 0.4299 1.0433]

Epoch 8, loss = 0.6364
Mean test/val loss: 0.6748
[25, 50, 75] percentiles test/val loss: [0.1862 0.4208 1.0178]

Epoch 10, loss = 0.6273
Mean test/val loss: 0.6577
[25, 50, 75] percentiles test/val loss: [0.1575 0.3964 1.0097]

Epoch 12, loss = 0.6197
Mean test/val loss: 0.6482
[25, 50, 75] percentiles test/val loss: [0.1527 0.3878 1.0043]

Epoch 14, loss = 0.6120
Mean test/val loss: 0.6431
[25, 50, 75] percentiles test/val loss: [0.1571 0.3951 0.9997]

Epoch 16, loss = 0.6071
Mean test/val loss: 0.6413
[25, 50, 75] percentiles test/val loss: [0.1574 0.3879 1.0011]

Epoch 18, loss = 0.6027
Mean test/val loss: 0.7003
[25, 50, 75] percentiles test/val loss: [0.1969 0.4594 1.0847]

Epoch 20, loss = 0.5975
Mean test/val loss: 0.6337
[25, 50, 75] percentiles test/val loss: [0.1668 0.3992 0.9636]

Epoch 22, loss = 0.5946
Mean test/val loss: 0.6175
[25, 50, 75] percentiles test/val loss: [0.148  0.3831 0.9495]

Epoch 24, loss = 0.5920
Mean test/val loss: 0.6126
[25, 50, 75] percentiles test/val loss: [0.1451 0.372  0.9412]

Epoch 26, loss = 0.5896
Mean test/val loss: 0.6113
[25, 50, 75] percentiles test/val loss: [0.1443 0.3717 0.9324]

Epoch 28, loss = 0.5833
Mean test/val loss: 0.6244
[25, 50, 75] percentiles test/val loss: [0.165  0.4069 0.9477]

Epoch 30, loss = 0.5827
Mean test/val loss: 0.6063
[25, 50, 75] percentiles test/val loss: [0.1451 0.3739 0.9295]

New lr: 1e-05
Epoch 32, loss = 0.5483
Mean test/val loss: 0.5887
[25, 50, 75] percentiles test/val loss: [0.1375 0.3653 0.9037]

Epoch 34, loss = 0.5446
Mean test/val loss: 0.5877
[25, 50, 75] percentiles test/val loss: [0.1377 0.3656 0.9016]

Epoch 36, loss = 0.5422
Mean test/val loss: 0.5864
[25, 50, 75] percentiles test/val loss: [0.1368 0.3625 0.9056]

Epoch 38, loss = 0.5404
Mean test/val loss: 0.5854
[25, 50, 75] percentiles test/val loss: [0.1378 0.3634 0.9017]

Epoch 40, loss = 0.5386
Mean test/val loss: 0.5849
[25, 50, 75] percentiles test/val loss: [0.138  0.3627 0.9007]

Epoch 42, loss = 0.5371
Mean test/val loss: 0.5838
[25, 50, 75] percentiles test/val loss: [0.1376 0.3627 0.9024]

Epoch 44, loss = 0.5356
Mean test/val loss: 0.5838
[25, 50, 75] percentiles test/val loss: [0.1369 0.3611 0.9015]

Epoch 46, loss = 0.5344
Mean test/val loss: 0.5828
[25, 50, 75] percentiles test/val loss: [0.1357 0.3586 0.8997]

Epoch 48, loss = 0.5331
Mean test/val loss: 0.5837
[25, 50, 75] percentiles test/val loss: [0.1366 0.3602 0.8978]

Epoch 50, loss = 0.5320
Mean test/val loss: 0.5822
[25, 50, 75] percentiles test/val loss: [0.1356 0.3569 0.896 ]

Epoch 52, loss = 0.5308
Mean test/val loss: 0.5817
[25, 50, 75] percentiles test/val loss: [0.1355 0.3583 0.8915]

Epoch 54, loss = 0.5297
Mean test/val loss: 0.5816
[25, 50, 75] percentiles test/val loss: [0.1366 0.3573 0.8965]

Epoch 56, loss = 0.5288
Mean test/val loss: 0.5828
[25, 50, 75] percentiles test/val loss: [0.1371 0.3573 0.9017]

Epoch 58, loss = 0.5278
Mean test/val loss: 0.5810
[25, 50, 75] percentiles test/val loss: [0.1363 0.3568 0.8943]

Epoch 60, loss = 0.5268
Mean test/val loss: 0.5808
[25, 50, 75] percentiles test/val loss: [0.1348 0.3567 0.8952]


Total parameters: 26462000
Total training + validation time: 5.0 hours, 18.0 mins, and 53.5 secs
Final val loss: 0.5808201191090048

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_08_25_23 sample981: 1.528098702430725
dataset_08_25_23 sample324: 0.17059889435768127
dataset_08_25_23 sample3464: 0.15711656212806702
dataset_08_25_23 sample2834: 0.08270642161369324
dataset_08_25_23 sample1936: 0.22743573784828186
Loss: 0.433 +- 0.549

Downsampling (40%) Results:
dataset_08_25_23 sample1936-downsampling: 417.6872863769531
dataset_08_25_23 sample2834-downsampling: 861.7200317382812
dataset_08_25_23 sample324-downsampling: 667.5961303710938
dataset_08_25_23 sample3464-downsampling: 1067.5146484375
dataset_08_25_23 sample981-downsampling: 7331.0302734375
Loss: 2069.11 +- 2639.706

Removing /scratch/midway3/erschultz/ContactGNNEnergy11downsample
Original sampling (100%) Results:
dataset_08_25_23 sample1936-regular: 396.6278381347656
dataset_08_25_23 sample2834-regular: 736.1619262695312
dataset_08_25_23 sample324-regular: 558.6734619140625
dataset_08_25_23 sample3464-regular: 1185.9810791015625
dataset_08_25_23 sample981-regular: 7271.13720703125
Loss: 2029.716 +- 2633.956

Removing /scratch/midway3/erschultz/ContactGNNEnergy11regsample

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_10_14_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy9', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=581, pretrain_id=569, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/581', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/581/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/581/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/581/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7f0540c1b550>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 12.381 minutes
Number of samples: 5000
Average num edges per graph:  65200.434
Mean degree: [255.   254.73 254.98 ... 255.   255.   254.94] +- [0.   0.96 0.15 ... 0.   0.   0.3 ]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Pre-trained model is loaded.
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f050aa57580>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.0341
Mean test/val loss: 0.9811
[25, 50, 75] percentiles test/val loss: [0.6316 0.8911 1.2097]

Epoch 4, loss = 1.0027
Mean test/val loss: 0.9508
[25, 50, 75] percentiles test/val loss: [0.6049 0.8723 1.1878]

Epoch 6, loss = 0.9784
Mean test/val loss: 0.9366
[25, 50, 75] percentiles test/val loss: [0.5954 0.856  1.1596]

Epoch 8, loss = 0.9558
Mean test/val loss: 0.9501
[25, 50, 75] percentiles test/val loss: [0.6012 0.8553 1.1681]

Epoch 10, loss = 0.9461
Mean test/val loss: 0.9336
[25, 50, 75] percentiles test/val loss: [0.6033 0.8502 1.1641]

Epoch 12, loss = 0.9267
Mean test/val loss: 0.9187
[25, 50, 75] percentiles test/val loss: [0.5911 0.8317 1.1391]

Epoch 14, loss = 0.9153
Mean test/val loss: 0.9065
[25, 50, 75] percentiles test/val loss: [0.5784 0.8229 1.1133]

Epoch 16, loss = 0.8995
Mean test/val loss: 0.9145
[25, 50, 75] percentiles test/val loss: [0.5873 0.8275 1.124 ]

Epoch 18, loss = 0.8904
Mean test/val loss: 0.9037
[25, 50, 75] percentiles test/val loss: [0.567  0.8166 1.1288]

Epoch 20, loss = 0.8787
Mean test/val loss: 0.8868
[25, 50, 75] percentiles test/val loss: [0.5655 0.8029 1.089 ]

Epoch 22, loss = 0.8697
Mean test/val loss: 0.8870
[25, 50, 75] percentiles test/val loss: [0.5736 0.7985 1.0868]

Epoch 24, loss = 0.8564
Mean test/val loss: 0.9114
[25, 50, 75] percentiles test/val loss: [0.5779 0.8227 1.121 ]

Epoch 26, loss = 0.8449
Mean test/val loss: 0.9140
[25, 50, 75] percentiles test/val loss: [0.5821 0.8306 1.1486]

Epoch 28, loss = 0.8383
Mean test/val loss: 0.8775
[25, 50, 75] percentiles test/val loss: [0.5621 0.7884 1.0758]

Epoch 30, loss = 0.8304
Mean test/val loss: 0.8669
[25, 50, 75] percentiles test/val loss: [0.5649 0.7851 1.0885]

Epoch 32, loss = 0.8246
Mean test/val loss: 0.8773
[25, 50, 75] percentiles test/val loss: [0.5699 0.7979 1.0912]

Epoch 34, loss = 0.8190
Mean test/val loss: 0.8783
[25, 50, 75] percentiles test/val loss: [0.5649 0.7855 1.0872]

Epoch 36, loss = 0.8071
Mean test/val loss: 0.8740
[25, 50, 75] percentiles test/val loss: [0.5588 0.7931 1.0744]

Epoch 38, loss = 0.7981
Mean test/val loss: 0.8851
[25, 50, 75] percentiles test/val loss: [0.5594 0.7981 1.0991]

Epoch 40, loss = 0.7953
Mean test/val loss: 0.8615
[25, 50, 75] percentiles test/val loss: [0.5382 0.7835 1.0598]

New lr: 1e-05
Epoch 42, loss = 0.7111
Mean test/val loss: 0.8225
[25, 50, 75] percentiles test/val loss: [0.5187 0.7335 1.0054]

Epoch 44, loss = 0.6972
Mean test/val loss: 0.8222
[25, 50, 75] percentiles test/val loss: [0.5175 0.7427 1.008 ]

Epoch 46, loss = 0.6880
Mean test/val loss: 0.8221
[25, 50, 75] percentiles test/val loss: [0.5161 0.7328 1.0064]

Epoch 48, loss = 0.6805
Mean test/val loss: 0.8215
[25, 50, 75] percentiles test/val loss: [0.5147 0.736  1.0058]

Epoch 50, loss = 0.6738
Mean test/val loss: 0.8217
[25, 50, 75] percentiles test/val loss: [0.5108 0.7375 1.0083]

Epoch 52, loss = 0.6677
Mean test/val loss: 0.8249
[25, 50, 75] percentiles test/val loss: [0.5149 0.739  1.0059]

Epoch 54, loss = 0.6622
Mean test/val loss: 0.8244
[25, 50, 75] percentiles test/val loss: [0.5128 0.7416 1.0089]

Epoch 56, loss = 0.6569
Mean test/val loss: 0.8243
[25, 50, 75] percentiles test/val loss: [0.52   0.7398 1.0123]

Epoch 58, loss = 0.6520
Mean test/val loss: 0.8279
[25, 50, 75] percentiles test/val loss: [0.5189 0.7401 1.016 ]

Epoch 60, loss = 0.6470
Mean test/val loss: 0.8292
[25, 50, 75] percentiles test/val loss: [0.5207 0.7388 1.009 ]

Epoch 62, loss = 0.6425
Mean test/val loss: 0.8302
[25, 50, 75] percentiles test/val loss: [0.5191 0.739  1.017 ]

Epoch 64, loss = 0.6380
Mean test/val loss: 0.8292
[25, 50, 75] percentiles test/val loss: [0.5197 0.7382 1.005 ]

Epoch 66, loss = 0.6340
Mean test/val loss: 0.8295
[25, 50, 75] percentiles test/val loss: [0.5235 0.7409 1.014 ]

Epoch 68, loss = 0.6298
Mean test/val loss: 0.8340
[25, 50, 75] percentiles test/val loss: [0.5267 0.7392 1.0243]

Epoch 70, loss = 0.6255
Mean test/val loss: 0.8342
[25, 50, 75] percentiles test/val loss: [0.5238 0.7399 1.0124]


Total parameters: 51479472
Total training + validation time: 10.0 hours, 3.0 mins, and 22.5 secs
Final val loss: 0.8341768222749233

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_10_14_23 sample981: 0.6071380972862244
dataset_10_14_23 sample324: 0.2859609127044678
dataset_10_14_23 sample3464: 1.9130158424377441
dataset_10_14_23 sample2834: 0.6594270467758179
dataset_10_14_23 sample1936: 0.5416041016578674
MSE_log: 0.801 +- 0.57

Downsampling (200k) Results:

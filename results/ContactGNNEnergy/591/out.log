#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=65536, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_10_14_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy2', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=1, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=591, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/591', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/591/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/591/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/591/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7faf7071e4c0>, node_feature_size=0, input_m=512, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 14.957 minutes
Number of samples: 5000
Average num edges per graph:  260203.0024
Mean degree: [510.95 501.22 509.   ... 510.61 510.5  507.22] +- [ 0.25 15.32  4.23 ...  0.95  1.21  7.65]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [2249, 4901, 542, 2678, 651, 1838, 308, 275, 3464, 3931, 682, 267, 3045, 3132, 4892, 2425, 4058, 833, 930, 2984, 3435, 471, 4772, 953, 118, 4682, 962, 2376, 1667, 4459, 2434, 3304, 4370, 4503, 2834, 3317, 1475, 3383, 1001, 3237, 4194, 3660, 978, 1002, 3277, 3137, 2798, 3288, 4189, 4059, 4024, 3491, 1681, 4082, 4595, 1533, 1659, 391, 4067, 2642, 313, 1798, 4383, 1735, 2237, 3674, 2695, 2466, 320, 4669, 1309, 40, 1589, 920, 4875, 194, 161, 2906, 856, 2820, 3616, 3230, 3003, 2506, 1569, 1822, 2996, 2628, 4217, 4454, 3912, 3756, 3455, 1506, 3312, 2767, 3727, 147, 810, 475, 3414, 2787]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7faf2e816df0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.8556
Mean test/val loss: 1.7327
[25, 50, 75] percentiles test/val loss: [1.1993 1.6104 2.2518]

Epoch 4, loss = 1.6102
Mean test/val loss: 1.4650
[25, 50, 75] percentiles test/val loss: [1.0497 1.4252 1.7727]

Epoch 6, loss = 1.4299
Mean test/val loss: 1.3059
[25, 50, 75] percentiles test/val loss: [0.885  1.2356 1.6119]

Epoch 8, loss = 1.2400
Mean test/val loss: 1.1628
[25, 50, 75] percentiles test/val loss: [0.7972 1.0604 1.4317]

Epoch 10, loss = 1.1528
Mean test/val loss: 1.0828
[25, 50, 75] percentiles test/val loss: [0.6978 0.9802 1.3505]

Epoch 12, loss = 1.1019
Mean test/val loss: 1.0849
[25, 50, 75] percentiles test/val loss: [0.7119 0.9811 1.3349]

Epoch 14, loss = 1.0682
Mean test/val loss: 1.0351
[25, 50, 75] percentiles test/val loss: [0.6786 0.9186 1.2648]

Epoch 16, loss = 1.0341
Mean test/val loss: 1.0137
[25, 50, 75] percentiles test/val loss: [0.6603 0.8972 1.2466]

Epoch 18, loss = 1.0073
Mean test/val loss: 1.0028
[25, 50, 75] percentiles test/val loss: [0.6607 0.8929 1.2165]

Epoch 20, loss = 0.9873
Mean test/val loss: 0.9614
[25, 50, 75] percentiles test/val loss: [0.6109 0.8448 1.1837]

Epoch 22, loss = 0.9652
Mean test/val loss: 0.9386
[25, 50, 75] percentiles test/val loss: [0.5984 0.8295 1.1353]

Epoch 24, loss = 0.9448
Mean test/val loss: 0.9469
[25, 50, 75] percentiles test/val loss: [0.5993 0.8117 1.157 ]

Epoch 26, loss = 0.9327
Mean test/val loss: 0.9034
[25, 50, 75] percentiles test/val loss: [0.5639 0.7893 1.1261]

Epoch 28, loss = 0.9111
Mean test/val loss: 0.9049
[25, 50, 75] percentiles test/val loss: [0.5693 0.7818 1.1425]

Epoch 30, loss = 0.8965
Mean test/val loss: 0.8795
[25, 50, 75] percentiles test/val loss: [0.5506 0.7682 1.0726]

Epoch 32, loss = 0.8806
Mean test/val loss: 0.8835
[25, 50, 75] percentiles test/val loss: [0.5425 0.7704 1.0744]

Epoch 34, loss = 0.8694
Mean test/val loss: 0.8788
[25, 50, 75] percentiles test/val loss: [0.5396 0.7621 1.0758]

Epoch 36, loss = 0.8566
Mean test/val loss: 0.8877
[25, 50, 75] percentiles test/val loss: [0.5496 0.7972 1.078 ]

Epoch 38, loss = 0.8434
Mean test/val loss: 0.8486
[25, 50, 75] percentiles test/val loss: [0.5303 0.743  1.0343]

Epoch 40, loss = 0.8308
Mean test/val loss: 0.8463
[25, 50, 75] percentiles test/val loss: [0.5159 0.7506 1.0569]

New lr: 1e-05
Epoch 42, loss = 0.7470
Mean test/val loss: 0.7758
[25, 50, 75] percentiles test/val loss: [0.472  0.6775 0.968 ]

Epoch 44, loss = 0.7335
Mean test/val loss: 0.7734
[25, 50, 75] percentiles test/val loss: [0.4707 0.6714 0.9533]

Epoch 46, loss = 0.7239
Mean test/val loss: 0.7728
[25, 50, 75] percentiles test/val loss: [0.4706 0.6677 0.9629]

Epoch 48, loss = 0.7158
Mean test/val loss: 0.7673
[25, 50, 75] percentiles test/val loss: [0.4653 0.6605 0.948 ]

Epoch 50, loss = 0.7081
Mean test/val loss: 0.7651
[25, 50, 75] percentiles test/val loss: [0.4618 0.6636 0.9435]

Epoch 52, loss = 0.7011
Mean test/val loss: 0.7622
[25, 50, 75] percentiles test/val loss: [0.4579 0.6614 0.9463]

Epoch 54, loss = 0.6945
Mean test/val loss: 0.7629
[25, 50, 75] percentiles test/val loss: [0.4575 0.6586 0.9464]

Epoch 56, loss = 0.6881
Mean test/val loss: 0.7637
[25, 50, 75] percentiles test/val loss: [0.4587 0.6597 0.9436]

Epoch 58, loss = 0.6823
Mean test/val loss: 0.7601
[25, 50, 75] percentiles test/val loss: [0.4558 0.6463 0.9333]

Epoch 60, loss = 0.6765
Mean test/val loss: 0.7589
[25, 50, 75] percentiles test/val loss: [0.4555 0.663  0.9411]

Epoch 62, loss = 0.6711
Mean test/val loss: 0.7616
[25, 50, 75] percentiles test/val loss: [0.4526 0.6529 0.9335]

Epoch 64, loss = 0.6656
Mean test/val loss: 0.7596
[25, 50, 75] percentiles test/val loss: [0.4494 0.6547 0.949 ]

Epoch 66, loss = 0.6608
Mean test/val loss: 0.7570
[25, 50, 75] percentiles test/val loss: [0.451  0.6481 0.9371]

Epoch 68, loss = 0.6562
Mean test/val loss: 0.7564
[25, 50, 75] percentiles test/val loss: [0.4533 0.6495 0.9384]

Epoch 70, loss = 0.6511
Mean test/val loss: 0.7576
[25, 50, 75] percentiles test/val loss: [0.4479 0.6444 0.9333]


Total parameters: 84247472
Total training + validation time: 18.0 hours, 32.0 mins, and 8.39999999999418 secs
Final val loss: 0.7575872154384852

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_10_14_23 sample981: 0.6654723882675171
dataset_10_14_23 sample324: 0.2657032310962677

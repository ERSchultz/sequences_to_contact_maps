#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_12_06_23_max_ent2_exp'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy12', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, lambda3=1, grad_clip=None, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', save_early_stop=False, model_type='ContactGNNEnergy', id=715, pretrain_id=710, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', output_clip=None, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, bonded_path='optimize_grid_b_200_v_8_spheroid_1.5', kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/715', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/715/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/715/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/715/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=2, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), eig=False, criterion=<function mse_log at 0x7f1c3a6464c0>, cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 0.603 minutes
Number of samples: 162
Average num edges per graph:  64479.92592592593
Mean degree: [254.31 253.73 254.72 254.27 253.62 251.82 252.6  254.62 254.52 254.09
 250.7  253.17 253.05 252.16 254.96 249.36 254.16 249.72 253.5  252.77
 252.55 253.21 254.98 254.6  254.84 254.66 254.95 252.92 254.12 248.59
 254.68 251.94 253.63 248.46 251.72 250.67 254.23 254.19 254.85 245.24
 254.5  253.77 254.48 254.83 250.25 253.25 249.97 250.13 243.74 253.93
 253.07 244.54 238.76 248.68 254.77 247.69 243.68 239.15 252.33 254.59
 242.4  249.32 234.68 251.   254.84 251.71 253.19 254.97 240.64 253.98
 254.98 254.96 254.54 253.09 254.9  251.45 254.69 254.75 250.8  253.69
 253.7  254.79 254.62 250.88 254.61 254.03 253.02 254.63 248.42 253.88
 254.31 254.77 253.16 254.83 250.65 252.21 254.55 254.2  253.12 251.42
 254.37 254.34 252.68 254.88 250.21 254.68 251.11 252.98 253.25 254.38
 250.84 254.15 243.84 253.77 253.67 253.25 244.91 254.77 252.16 253.79
 251.94 254.22 244.73 254.79 253.05 253.17 248.35 254.19 248.29 251.34
 249.84 254.54 253.19 248.77 244.52 253.72 250.53 253.04 249.68 240.59
 249.8  242.12 250.29 244.29 249.92 250.   254.09 252.28 253.66 254.5
 254.47 250.93 253.95 254.65 254.69 252.1  253.57 254.59 253.17 253.98
 249.34 253.39] +- [ 1.24  1.94  0.71  1.71  2.39 13.73  5.14  0.81  1.03  1.97  9.81  2.87
  6.67  3.08  0.21 10.13  1.52 15.01  2.03  3.59  5.37  8.76  0.15  1.01
  0.53  0.93  0.25  2.61  1.37 16.36  0.71  3.82  1.63  7.4   3.75  5.51
  3.29  1.74  0.56 25.53  0.94  1.66  1.1   0.69  7.61  2.73 15.12  8.32
 23.02  2.97  2.21 14.02 21.14  5.72  0.73 11.7   8.82 15.47  3.59  0.94
 18.2   7.25 17.43 10.63  0.53 12.32  3.52  0.21 24.58  2.73  0.12  0.25
  1.02  3.52  0.84  6.41  0.72  0.56 13.12  1.73  2.84  0.63  0.73  4.59
  0.75  2.22  2.6   0.82 15.96  1.48  1.08  0.51  3.11  0.48 15.79  5.66
  1.66  1.29  3.4   6.76  1.18  2.96  2.3   0.55  8.98  0.75 10.8   3.85
  7.55  1.42  4.2   1.48 17.27  1.24  3.56  2.27  8.8   0.66  3.55  1.75
  3.63  1.61 20.48  0.49  2.43  2.91  8.27  1.31 16.36  7.88  7.35  1.41
  2.31  8.8  15.23  2.05  5.28  4.03  5.56 15.28  5.59 18.92  5.19  9.79
 11.84 11.76  1.78  4.8   6.07  1.25  0.98 14.44  1.3   1.26  0.62  4.04
  1.83  0.99  2.84  1.65 16.19  2.06]

split sizes: train=146, val=16, test=0, N=162
First 100 val samples: [587, 252, 86, 619, 613, 232, 583, 141, 122, 545, 536, 254, 633, 588, 108, 586]
Pre-trained model is loaded.
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f1c3196abe0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.2888
Mean test/val loss: 0.2495
[25, 50, 75] percentiles test/val loss: [0.2046 0.2294 0.2793]

Epoch 4, loss = 0.2584
Mean test/val loss: 0.2472
[25, 50, 75] percentiles test/val loss: [0.1943 0.2313 0.2726]

Epoch 6, loss = 0.2471
Mean test/val loss: 0.2509
[25, 50, 75] percentiles test/val loss: [0.2124 0.2436 0.2704]

Epoch 8, loss = 0.2770
Mean test/val loss: 0.2548
[25, 50, 75] percentiles test/val loss: [0.2059 0.2513 0.2761]

Epoch 10, loss = 0.2295
Mean test/val loss: 0.2379
[25, 50, 75] percentiles test/val loss: [0.1958 0.2275 0.268 ]

Epoch 12, loss = 0.2434
Mean test/val loss: 0.2441
[25, 50, 75] percentiles test/val loss: [0.2045 0.2206 0.2603]

Epoch 14, loss = 0.2185
Mean test/val loss: 0.2439
[25, 50, 75] percentiles test/val loss: [0.2038 0.226  0.2742]

Epoch 16, loss = 0.2114
Mean test/val loss: 0.2406
[25, 50, 75] percentiles test/val loss: [0.1873 0.2299 0.2707]

Epoch 18, loss = 0.2091
Mean test/val loss: 0.2413
[25, 50, 75] percentiles test/val loss: [0.1945 0.2221 0.2779]

Epoch 20, loss = 0.2009
Mean test/val loss: 0.2444
[25, 50, 75] percentiles test/val loss: [0.2057 0.2395 0.2662]

Epoch 22, loss = 0.2040
Mean test/val loss: 0.2431
[25, 50, 75] percentiles test/val loss: [0.2002 0.2265 0.2745]

Epoch 24, loss = 0.1997
Mean test/val loss: 0.2405
[25, 50, 75] percentiles test/val loss: [0.208  0.2243 0.2712]

Epoch 26, loss = 0.2139
Mean test/val loss: 0.2495
[25, 50, 75] percentiles test/val loss: [0.2094 0.2298 0.2665]

Epoch 28, loss = 0.1947
Mean test/val loss: 0.2444
[25, 50, 75] percentiles test/val loss: [0.1968 0.2288 0.268 ]

Epoch 30, loss = 0.1849
Mean test/val loss: 0.2470
[25, 50, 75] percentiles test/val loss: [0.2119 0.2459 0.2607]

Epoch 32, loss = 0.1814
Mean test/val loss: 0.2452
[25, 50, 75] percentiles test/val loss: [0.2025 0.2273 0.2752]

Epoch 34, loss = 0.2011
Mean test/val loss: 0.2587
[25, 50, 75] percentiles test/val loss: [0.225  0.2482 0.2718]

Epoch 36, loss = 0.1858
Mean test/val loss: 0.2475
[25, 50, 75] percentiles test/val loss: [0.21   0.234  0.2854]

Epoch 38, loss = 0.1756
Mean test/val loss: 0.2459
[25, 50, 75] percentiles test/val loss: [0.2037 0.2248 0.2789]

Epoch 40, loss = 0.1776
Mean test/val loss: 0.2418
[25, 50, 75] percentiles test/val loss: [0.1976 0.2302 0.2664]

New lr: 1e-05
Epoch 42, loss = 0.1591
Mean test/val loss: 0.2397
[25, 50, 75] percentiles test/val loss: [0.1971 0.2168 0.2714]

Epoch 44, loss = 0.1539
Mean test/val loss: 0.2413
[25, 50, 75] percentiles test/val loss: [0.2038 0.2192 0.2702]

Epoch 46, loss = 0.1511
Mean test/val loss: 0.2422
[25, 50, 75] percentiles test/val loss: [0.2019 0.2197 0.2728]

Epoch 48, loss = 0.1491
Mean test/val loss: 0.2427
[25, 50, 75] percentiles test/val loss: [0.1987 0.221  0.2759]

Epoch 50, loss = 0.1475
Mean test/val loss: 0.2436
[25, 50, 75] percentiles test/val loss: [0.1998 0.2211 0.2756]

Epoch 52, loss = 0.1461
Mean test/val loss: 0.2447
[25, 50, 75] percentiles test/val loss: [0.2034 0.2232 0.2767]

Epoch 54, loss = 0.1447
Mean test/val loss: 0.2446
[25, 50, 75] percentiles test/val loss: [0.2016 0.2226 0.2769]

Epoch 56, loss = 0.1434
Mean test/val loss: 0.2444
[25, 50, 75] percentiles test/val loss: [0.2009 0.2221 0.2779]

Epoch 58, loss = 0.1422
Mean test/val loss: 0.2441
[25, 50, 75] percentiles test/val loss: [0.2018 0.2216 0.2765]

Epoch 60, loss = 0.1409
Mean test/val loss: 0.2447
[25, 50, 75] percentiles test/val loss: [0.2022 0.2205 0.2784]


Total parameters: 51478960
Total training + validation time: 0.0 hours, 56.0 mins, and 16.199999999999818 secs
Final val loss: 0.24469106551259756

split sizes: train=146, val=16, test=0, N=162
#### Plotting Script ####
Prediction Results:
dataset_12_06_23_max_ent2_exp sample586: 0.19976074993610382
dataset_12_06_23_max_ent2_exp sample619: 0.2199663668870926
dataset_12_06_23_max_ent2_exp sample86: 0.3307190239429474
dataset_12_06_23_max_ent2_exp sample587: 0.1978115439414978
dataset_12_06_23_max_ent2_exp sample588: 0.17009852826595306
MSE_log: 0.224 +- 0.056

Downsampling (200k) Results:
Original sampling (400k) Results:

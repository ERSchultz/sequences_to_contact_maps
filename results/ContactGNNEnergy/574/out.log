#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_10_13_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy14', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=574, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/574', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/574/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/574/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/574/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f209dc2c310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 16.543 minutes
Number of samples: 5000
Average num edges per graph:  65236.9032
Mean degree: [255.   254.98 255.   ... 255.   255.   255.  ] +- [0.   0.18 0.   ... 0.   0.   0.  ]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f205ca34730>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.2887
Mean test/val loss: 1.2252
[25, 50, 75] percentiles test/val loss: [0.7735 1.1317 1.6123]

Epoch 4, loss = 1.0806
Mean test/val loss: 0.9804
[25, 50, 75] percentiles test/val loss: [0.6538 0.9466 1.2402]

Epoch 6, loss = 0.8912
Mean test/val loss: 0.8329
[25, 50, 75] percentiles test/val loss: [0.5093 0.7677 1.0506]

Epoch 8, loss = 0.8053
Mean test/val loss: 0.7689
[25, 50, 75] percentiles test/val loss: [0.475  0.6998 0.9779]

Epoch 10, loss = 0.7620
Mean test/val loss: 0.7364
[25, 50, 75] percentiles test/val loss: [0.4496 0.6598 0.9212]

Epoch 12, loss = 0.7278
Mean test/val loss: 0.7035
[25, 50, 75] percentiles test/val loss: [0.4399 0.6402 0.8724]

Epoch 14, loss = 0.7033
Mean test/val loss: 0.6878
[25, 50, 75] percentiles test/val loss: [0.4319 0.6196 0.8488]

Epoch 16, loss = 0.6790
Mean test/val loss: 0.6633
[25, 50, 75] percentiles test/val loss: [0.4121 0.6021 0.8341]

Epoch 18, loss = 0.6627
Mean test/val loss: 0.6762
[25, 50, 75] percentiles test/val loss: [0.4264 0.6156 0.8278]

Epoch 20, loss = 0.6423
Mean test/val loss: 0.6419
[25, 50, 75] percentiles test/val loss: [0.4071 0.5767 0.7936]

Epoch 22, loss = 0.6277
Mean test/val loss: 0.6207
[25, 50, 75] percentiles test/val loss: [0.3959 0.5554 0.7623]

Epoch 24, loss = 0.6151
Mean test/val loss: 0.5973
[25, 50, 75] percentiles test/val loss: [0.3819 0.54   0.7322]

Epoch 26, loss = 0.6035
Mean test/val loss: 0.5885
[25, 50, 75] percentiles test/val loss: [0.3703 0.5367 0.7224]

Epoch 28, loss = 0.5867
Mean test/val loss: 0.5988
[25, 50, 75] percentiles test/val loss: [0.3741 0.5385 0.7375]

Epoch 30, loss = 0.5774
Mean test/val loss: 0.5861
[25, 50, 75] percentiles test/val loss: [0.372  0.528  0.7146]

Epoch 32, loss = 0.5666
Mean test/val loss: 0.5928
[25, 50, 75] percentiles test/val loss: [0.3702 0.5375 0.7269]

Epoch 34, loss = 0.5608
Mean test/val loss: 0.5748
[25, 50, 75] percentiles test/val loss: [0.3607 0.5197 0.7087]

Epoch 36, loss = 0.5456
Mean test/val loss: 0.6080
[25, 50, 75] percentiles test/val loss: [0.371  0.5384 0.7557]

Epoch 38, loss = 0.5411
Mean test/val loss: 0.5583
[25, 50, 75] percentiles test/val loss: [0.3463 0.5031 0.6941]

Epoch 40, loss = 0.5318
Mean test/val loss: 0.5360
[25, 50, 75] percentiles test/val loss: [0.3342 0.4844 0.673 ]

New lr: 1e-05
Epoch 42, loss = 0.4644
Mean test/val loss: 0.4976
[25, 50, 75] percentiles test/val loss: [0.311  0.4449 0.6229]

Epoch 44, loss = 0.4545
Mean test/val loss: 0.4937
[25, 50, 75] percentiles test/val loss: [0.3095 0.4413 0.6182]

Epoch 46, loss = 0.4472
Mean test/val loss: 0.4908
[25, 50, 75] percentiles test/val loss: [0.3082 0.442  0.6191]

Epoch 48, loss = 0.4409
Mean test/val loss: 0.4871
[25, 50, 75] percentiles test/val loss: [0.3037 0.4358 0.6101]

Epoch 50, loss = 0.4352
Mean test/val loss: 0.4852
[25, 50, 75] percentiles test/val loss: [0.302  0.4324 0.6086]

Epoch 52, loss = 0.4298
Mean test/val loss: 0.4818
[25, 50, 75] percentiles test/val loss: [0.3002 0.4276 0.6024]

Epoch 54, loss = 0.4249
Mean test/val loss: 0.4803
[25, 50, 75] percentiles test/val loss: [0.2996 0.4261 0.6036]

Epoch 56, loss = 0.4202
Mean test/val loss: 0.4794
[25, 50, 75] percentiles test/val loss: [0.3017 0.424  0.6053]

Epoch 58, loss = 0.4157
Mean test/val loss: 0.4781
[25, 50, 75] percentiles test/val loss: [0.2949 0.4253 0.602 ]

Epoch 60, loss = 0.4114
Mean test/val loss: 0.4757
[25, 50, 75] percentiles test/val loss: [0.2941 0.4194 0.6045]

Epoch 62, loss = 0.4074
Mean test/val loss: 0.4747
[25, 50, 75] percentiles test/val loss: [0.2932 0.4201 0.5956]

Epoch 64, loss = 0.4037
Mean test/val loss: 0.4745
[25, 50, 75] percentiles test/val loss: [0.2933 0.4154 0.5977]

Epoch 66, loss = 0.3999
Mean test/val loss: 0.4715
[25, 50, 75] percentiles test/val loss: [0.2922 0.4176 0.5915]

Epoch 68, loss = 0.3963
Mean test/val loss: 0.4699
[25, 50, 75] percentiles test/val loss: [0.2892 0.4126 0.5922]

Epoch 70, loss = 0.3930
Mean test/val loss: 0.4697
[25, 50, 75] percentiles test/val loss: [0.2871 0.4149 0.5924]


Total parameters: 51479472
Total training + validation time: 10.0 hours, 0.0 mins, and 59.599999999998545 secs
Final val loss: 0.4697318146750331

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_10_13_23 sample981: 1.7561917304992676
dataset_10_13_23 sample324: 0.2137928158044815
dataset_10_13_23 sample3464: 0.7306731939315796
dataset_10_13_23 sample2834: 0.3336792588233948
dataset_10_13_23 sample1936: 0.9264688491821289
MSE Loss: 0.792 +- 0.547

Downsampling (200k) Results:

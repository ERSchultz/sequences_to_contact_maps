#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_08_25_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy2', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=453, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/453', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/453/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/453/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/453/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7ff369ab3310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 19.331 minutes
Number of samples: 5000
Average num edges per graph:  64969.4242
Mean degree: [253.9  255.92 255.73 ... 255.88 255.63 255.43] +- [3.31 0.33 0.66 ... 0.35 0.82 1.18]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7ff328944e80>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.1349
Mean test/val loss: 1.1121
[25, 50, 75] percentiles test/val loss: [0.3003 0.6889 1.6801]

Epoch 4, loss = 1.0420
Mean test/val loss: 0.9912
[25, 50, 75] percentiles test/val loss: [0.2301 0.6211 1.5473]

Epoch 6, loss = 0.9130
Mean test/val loss: 1.0716
[25, 50, 75] percentiles test/val loss: [0.2566 0.6628 1.6938]

Epoch 8, loss = 0.8553
Mean test/val loss: 0.8568
[25, 50, 75] percentiles test/val loss: [0.2179 0.5278 1.3326]

Epoch 10, loss = 0.8027
Mean test/val loss: 0.8211
[25, 50, 75] percentiles test/val loss: [0.1947 0.4953 1.2564]

Epoch 12, loss = 0.7633
Mean test/val loss: 0.8044
[25, 50, 75] percentiles test/val loss: [0.246  0.5141 1.2049]

Epoch 14, loss = 0.7445
Mean test/val loss: 0.7623
[25, 50, 75] percentiles test/val loss: [0.1981 0.4629 1.1906]

Epoch 16, loss = 0.7355
Mean test/val loss: 0.7283
[25, 50, 75] percentiles test/val loss: [0.1777 0.4459 1.1425]

Epoch 18, loss = 0.7122
Mean test/val loss: 0.7587
[25, 50, 75] percentiles test/val loss: [0.219  0.4746 1.1584]

Epoch 20, loss = 0.7008
Mean test/val loss: 0.7200
[25, 50, 75] percentiles test/val loss: [0.1847 0.441  1.1239]

Epoch 22, loss = 0.6870
Mean test/val loss: 0.7042
[25, 50, 75] percentiles test/val loss: [0.1667 0.4282 1.0901]

Epoch 24, loss = 0.6763
Mean test/val loss: 0.7057
[25, 50, 75] percentiles test/val loss: [0.1757 0.4437 1.0854]

Epoch 26, loss = 0.6706
Mean test/val loss: 0.6842
[25, 50, 75] percentiles test/val loss: [0.1629 0.4253 1.0667]

Epoch 28, loss = 0.6615
Mean test/val loss: 0.6812
[25, 50, 75] percentiles test/val loss: [0.1692 0.4223 1.0653]

Epoch 30, loss = 0.6518
Mean test/val loss: 0.6677
[25, 50, 75] percentiles test/val loss: [0.1588 0.4088 1.0409]

Epoch 32, loss = 0.6449
Mean test/val loss: 0.6961
[25, 50, 75] percentiles test/val loss: [0.2113 0.4228 1.0363]

Epoch 34, loss = 0.6402
Mean test/val loss: 0.6812
[25, 50, 75] percentiles test/val loss: [0.1637 0.4148 1.0765]

Epoch 36, loss = 0.6332
Mean test/val loss: 0.6902
[25, 50, 75] percentiles test/val loss: [0.1637 0.4045 1.0528]

Epoch 38, loss = 0.6297
Mean test/val loss: 0.6431
[25, 50, 75] percentiles test/val loss: [0.1549 0.3935 1.0035]

Epoch 40, loss = 0.6232
Mean test/val loss: 0.6637
[25, 50, 75] percentiles test/val loss: [0.1702 0.4252 1.0356]

New lr: 1e-05
Epoch 42, loss = 0.5865
Mean test/val loss: 0.6238
[25, 50, 75] percentiles test/val loss: [0.1473 0.3827 0.9705]

Epoch 44, loss = 0.5823
Mean test/val loss: 0.6217
[25, 50, 75] percentiles test/val loss: [0.1436 0.3764 0.966 ]

Epoch 46, loss = 0.5795
Mean test/val loss: 0.6206
[25, 50, 75] percentiles test/val loss: [0.1455 0.3785 0.9681]

Epoch 48, loss = 0.5770
Mean test/val loss: 0.6194
[25, 50, 75] percentiles test/val loss: [0.1431 0.378  0.9674]

Epoch 50, loss = 0.5750
Mean test/val loss: 0.6172
[25, 50, 75] percentiles test/val loss: [0.1411 0.3731 0.9661]

Epoch 52, loss = 0.5730
Mean test/val loss: 0.6149
[25, 50, 75] percentiles test/val loss: [0.1409 0.3731 0.9608]

Epoch 54, loss = 0.5712
Mean test/val loss: 0.6144
[25, 50, 75] percentiles test/val loss: [0.142  0.3727 0.9613]

Epoch 56, loss = 0.5695
Mean test/val loss: 0.6145
[25, 50, 75] percentiles test/val loss: [0.141 0.373 0.967]

Epoch 58, loss = 0.5680
Mean test/val loss: 0.6131
[25, 50, 75] percentiles test/val loss: [0.1389 0.3719 0.9654]

Epoch 60, loss = 0.5667
Mean test/val loss: 0.6126
[25, 50, 75] percentiles test/val loss: [0.1418 0.3718 0.963 ]

Epoch 62, loss = 0.5652
Mean test/val loss: 0.6121
[25, 50, 75] percentiles test/val loss: [0.143  0.3719 0.9619]

Epoch 64, loss = 0.5639
Mean test/val loss: 0.6107
[25, 50, 75] percentiles test/val loss: [0.1425 0.372  0.9586]

Epoch 66, loss = 0.5626
Mean test/val loss: 0.6094
[25, 50, 75] percentiles test/val loss: [0.1404 0.3698 0.9577]

Epoch 68, loss = 0.5615
Mean test/val loss: 0.6087
[25, 50, 75] percentiles test/val loss: [0.1396 0.3688 0.953 ]

Epoch 70, loss = 0.5603
Mean test/val loss: 0.6085
[25, 50, 75] percentiles test/val loss: [0.1401 0.3686 0.9542]

Epoch 72, loss = 0.5592
Mean test/val loss: 0.6081
[25, 50, 75] percentiles test/val loss: [0.1396 0.3684 0.9524]

Epoch 74, loss = 0.5582
Mean test/val loss: 0.6071
[25, 50, 75] percentiles test/val loss: [0.1403 0.3675 0.9517]

Epoch 76, loss = 0.5572
Mean test/val loss: 0.6068
[25, 50, 75] percentiles test/val loss: [0.1402 0.3665 0.9509]

Epoch 78, loss = 0.5562
Mean test/val loss: 0.6069
[25, 50, 75] percentiles test/val loss: [0.141  0.3667 0.953 ]

Epoch 80, loss = 0.5552
Mean test/val loss: 0.6063
[25, 50, 75] percentiles test/val loss: [0.1402 0.369  0.9526]


Total parameters: 26462000
Total training + validation time: 6.0 hours, 57.0 mins, and 56.599999999998545 secs
Final val loss: 0.6063417359814047

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_08_25_23 sample981: 1.5845024585723877
dataset_08_25_23 sample324: 0.17492665350437164
dataset_08_25_23 sample3464: 0.1581694781780243
dataset_08_25_23 sample2834: 0.08279024809598923
dataset_08_25_23 sample1936: 0.23156040906906128
Loss: 0.446 +- 0.571

Downsampling (40%) Results:
dataset_08_25_23 sample1936-downsampling: 516.66650390625
dataset_08_25_23 sample2834-downsampling: 1198.486328125
dataset_08_25_23 sample324-downsampling: 513.444580078125
dataset_08_25_23 sample3464-downsampling: 814.06689453125
dataset_08_25_23 sample981-downsampling: 9831.9619140625
Loss: 2574.925 +- 3637.194

Removing /scratch/midway3/erschultz/ContactGNNEnergy2downsample
Original sampling (100%) Results:
dataset_08_25_23 sample1936-regular: 470.8531494140625
dataset_08_25_23 sample2834-regular: 858.3541259765625
dataset_08_25_23 sample324-regular: 488.9773864746094
dataset_08_25_23 sample3464-regular: 795.151611328125
dataset_08_25_23 sample981-regular: 9315.267578125
Loss: 2385.721 +- 3468.306

Removing /scratch/midway3/erschultz/ContactGNNEnergy2regsample

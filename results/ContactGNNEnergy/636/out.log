#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 None 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(10, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project/depablo/erschultz/dataset_12_12_23_imr90'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy5', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=636, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=False, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/636', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/636/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/636/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/636/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7f6aa4307670>, node_feature_size=10, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)'], node_transforms=['AdjPCs(k=10, normalize=False)'], edge_dim=2, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  AdjPCs(k=10, normalize=False)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 8.869 minutes
Number of samples: 5000
Average num edges per graph:  62346.308
Mean degree: [254.87 255.   255.   ... 214.69 254.65 239.73] +- [ 0.48  0.    0.   ... 35.84  1.01 17.39]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [1634, 255, 831, 1651, 2956, 3283, 4352, 2250, 3009, 1764, 1710, 4907, 3304, 1520, 1317, 4459, 326, 2156, 391, 2904, 410, 2749, 1122, 727, 3100, 3736, 3464, 2072, 1523, 1972, 137, 4307, 2714, 4189, 1956, 78, 4182, 1798, 2700, 796, 1407, 4226, 4875, 4932, 1206, 1423, 2869, 4977, 4767, 3435, 3216, 3760, 1735, 280, 166, 4269, 4171, 1582, 324, 139, 2743, 3570, 2986, 147, 1649, 3455, 4454, 3912, 1512, 795, 3025, 566, 4772, 618, 4186, 1989, 4410, 2996, 981, 4611, 4751, 2933, 1253, 3135, 2825, 2811, 4830, 3426, 4179, 4638, 3229, 195, 3988, 3947, 2033, 3343, 2770, 2441, 1398, 2143, 1619, 3956]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f6a75f7a0a0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.9915
Mean test/val loss: 1.0339
[25, 50, 75] percentiles test/val loss: [0.6489 0.9432 1.3185]

Epoch 4, loss = 0.8782
Mean test/val loss: 0.8630
[25, 50, 75] percentiles test/val loss: [0.5014 0.7894 1.0895]

Epoch 6, loss = 0.8138
Mean test/val loss: 0.8661
[25, 50, 75] percentiles test/val loss: [0.5077 0.788  1.1085]

Epoch 8, loss = 0.7684
Mean test/val loss: 0.7891
[25, 50, 75] percentiles test/val loss: [0.453  0.7117 0.9888]

Epoch 10, loss = 0.7480
Mean test/val loss: 0.7967
[25, 50, 75] percentiles test/val loss: [0.4689 0.7155 0.9878]

Epoch 12, loss = 0.7150
Mean test/val loss: 0.7483
[25, 50, 75] percentiles test/val loss: [0.4245 0.6744 0.9374]

Epoch 14, loss = 0.6955
Mean test/val loss: 0.7456
[25, 50, 75] percentiles test/val loss: [0.4344 0.687  0.9403]

Epoch 16, loss = 0.6682
Mean test/val loss: 0.7094
[25, 50, 75] percentiles test/val loss: [0.4068 0.6564 0.8852]

Epoch 18, loss = 0.6518
Mean test/val loss: 0.6657
[25, 50, 75] percentiles test/val loss: [0.3836 0.589  0.8596]

Epoch 20, loss = 0.6289
Mean test/val loss: 0.6644
[25, 50, 75] percentiles test/val loss: [0.3685 0.5844 0.8435]

Epoch 22, loss = 0.6080
Mean test/val loss: 0.6669
[25, 50, 75] percentiles test/val loss: [0.3829 0.5824 0.836 ]

Epoch 24, loss = 0.5963
Mean test/val loss: 0.6523
[25, 50, 75] percentiles test/val loss: [0.3673 0.5811 0.8296]

Epoch 26, loss = 0.5825
Mean test/val loss: 0.6342
[25, 50, 75] percentiles test/val loss: [0.3605 0.5501 0.7902]

Epoch 28, loss = 0.5669
Mean test/val loss: 0.6229
[25, 50, 75] percentiles test/val loss: [0.3617 0.554  0.7954]

Epoch 30, loss = 0.5530
Mean test/val loss: 0.5960
[25, 50, 75] percentiles test/val loss: [0.3287 0.5312 0.7625]

Epoch 32, loss = 0.5393
Mean test/val loss: 0.5913
[25, 50, 75] percentiles test/val loss: [0.327  0.5249 0.7674]

Epoch 34, loss = 0.5254
Mean test/val loss: 0.5910
[25, 50, 75] percentiles test/val loss: [0.329  0.5288 0.7641]

Epoch 36, loss = 0.5171
Mean test/val loss: 0.5852
[25, 50, 75] percentiles test/val loss: [0.3291 0.5149 0.7378]

Epoch 38, loss = 0.5052
Mean test/val loss: 0.5844
[25, 50, 75] percentiles test/val loss: [0.3153 0.5179 0.7498]

Epoch 40, loss = 0.4940
Mean test/val loss: 0.5794
[25, 50, 75] percentiles test/val loss: [0.3176 0.5095 0.7289]

New lr: 1e-05
Epoch 42, loss = 0.4370
Mean test/val loss: 0.5308
[25, 50, 75] percentiles test/val loss: [0.2777 0.4561 0.6637]

Epoch 44, loss = 0.4279
Mean test/val loss: 0.5282
[25, 50, 75] percentiles test/val loss: [0.2788 0.4534 0.6673]

Epoch 46, loss = 0.4214
Mean test/val loss: 0.5243
[25, 50, 75] percentiles test/val loss: [0.2773 0.45   0.6531]

Epoch 48, loss = 0.4159
Mean test/val loss: 0.5222
[25, 50, 75] percentiles test/val loss: [0.2746 0.4444 0.6513]

Epoch 50, loss = 0.4109
Mean test/val loss: 0.5203
[25, 50, 75] percentiles test/val loss: [0.2748 0.4423 0.649 ]

Epoch 52, loss = 0.4061
Mean test/val loss: 0.5200
[25, 50, 75] percentiles test/val loss: [0.2733 0.4425 0.6588]

Epoch 54, loss = 0.4018
Mean test/val loss: 0.5182
[25, 50, 75] percentiles test/val loss: [0.2731 0.4407 0.6501]

Epoch 56, loss = 0.3976
Mean test/val loss: 0.5154
[25, 50, 75] percentiles test/val loss: [0.2686 0.4403 0.6541]

Epoch 58, loss = 0.3938
Mean test/val loss: 0.5175
[25, 50, 75] percentiles test/val loss: [0.2708 0.4452 0.6506]

Epoch 60, loss = 0.3899
Mean test/val loss: 0.5155
[25, 50, 75] percentiles test/val loss: [0.2701 0.442  0.6466]


Total parameters: 51447344
Total training + validation time: 3.0 hours, 42.0 mins, and 7.600000000000364 secs
Final val loss: 0.5155387412533164

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_12_12_23_imr90 sample981: 0.14895659685134888
dataset_12_12_23_imr90 sample324: 0.5443819761276245
dataset_12_12_23_imr90 sample3464: 0.5425350069999695
dataset_12_12_23_imr90 sample2834: 0.28959840536117554
dataset_12_12_23_imr90 sample1936: 0.0840287059545517
MSE_log: 0.322 +- 0.193

Downsampling (200k) Results:
Original sampling (400k) Results:

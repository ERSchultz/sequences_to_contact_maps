#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_11_08_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy10', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=601, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/601', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/601/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/601/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/601/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7f2880758550>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 42.681 minutes
Number of samples: 10000
Average num edges per graph:  64711.7162
Mean degree: [255.   255.   254.85 ... 199.16 253.4  255.  ] +- [ 0.    0.    0.5  ... 32.9   3.35  0.  ]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [1736, 8603, 4487, 7484, 1944, 6883, 5242, 5402, 2741, 5051, 6509, 7138, 316, 8888, 2400, 8268, 478, 5626, 4834, 8222, 2775, 7297, 9366, 3542, 9486, 5574, 1020, 9892, 5740, 1800, 7753, 2160, 9690, 201, 7926, 1469, 3437, 9939, 6550, 5567, 2452, 3201, 4402, 3181, 5685, 1790, 5045, 8122, 7296, 768, 5261, 2576, 6643, 4781, 1945, 5516, 8922, 8796, 6633, 7263, 9807, 7993, 4712, 1640, 1644, 2131, 8519, 2955, 203, 6356, 8148, 8107, 6575, 4769, 8354, 995, 8881, 972, 7933, 3869, 9749, 6260, 6269, 6134, 2997, 674, 5447, 8738, 7028, 53, 3314, 8398, 8061, 7264, 7488, 1001, 2594, 4870, 8312, 4053, 6041, 1680]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f284a5eca30>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.6693
Mean test/val loss: 1.5326
[25, 50, 75] percentiles test/val loss: [0.9302 1.4549 1.9989]

Epoch 4, loss = 1.3817
Mean test/val loss: 1.2674
[25, 50, 75] percentiles test/val loss: [0.7507 1.1928 1.6507]

Epoch 6, loss = 1.2658
Mean test/val loss: 1.2249
[25, 50, 75] percentiles test/val loss: [0.7272 1.1468 1.5896]

Epoch 8, loss = 1.2003
Mean test/val loss: 1.1431
[25, 50, 75] percentiles test/val loss: [0.6738 1.0659 1.4857]

Epoch 10, loss = 1.1545
Mean test/val loss: 1.1166
[25, 50, 75] percentiles test/val loss: [0.6617 1.0382 1.4497]

Epoch 12, loss = 1.1192
Mean test/val loss: 1.0855
[25, 50, 75] percentiles test/val loss: [0.6412 1.0023 1.4141]

Epoch 14, loss = 1.0971
Mean test/val loss: 1.0736
[25, 50, 75] percentiles test/val loss: [0.6299 0.9955 1.4045]

Epoch 16, loss = 1.0727
Mean test/val loss: 1.0611
[25, 50, 75] percentiles test/val loss: [0.6283 0.9946 1.3725]

Epoch 18, loss = 1.0542
Mean test/val loss: 1.0506
[25, 50, 75] percentiles test/val loss: [0.6265 0.9697 1.369 ]

Epoch 20, loss = 1.0367
Mean test/val loss: 1.0909
[25, 50, 75] percentiles test/val loss: [0.6382 1.0212 1.4338]

Epoch 22, loss = 1.0228
Mean test/val loss: 1.0118
[25, 50, 75] percentiles test/val loss: [0.576  0.934  1.3137]

Epoch 24, loss = 1.0040
Mean test/val loss: 1.0117
[25, 50, 75] percentiles test/val loss: [0.5865 0.9407 1.3191]

Epoch 26, loss = 0.9922
Mean test/val loss: 1.0073
[25, 50, 75] percentiles test/val loss: [0.5721 0.9313 1.3092]

Epoch 28, loss = 0.9780
Mean test/val loss: 0.9866
[25, 50, 75] percentiles test/val loss: [0.5655 0.9125 1.2814]

Epoch 30, loss = 0.9677
Mean test/val loss: 0.9958
[25, 50, 75] percentiles test/val loss: [0.5714 0.9165 1.2951]

Epoch 32, loss = 0.9578
Mean test/val loss: 0.9880
[25, 50, 75] percentiles test/val loss: [0.5761 0.9121 1.2759]

Epoch 34, loss = 0.9454
Mean test/val loss: 0.9807
[25, 50, 75] percentiles test/val loss: [0.5635 0.9005 1.2696]

Epoch 36, loss = 0.9386
Mean test/val loss: 0.9833
[25, 50, 75] percentiles test/val loss: [0.5672 0.9076 1.2809]

Epoch 38, loss = 0.9286
Mean test/val loss: 0.9649
[25, 50, 75] percentiles test/val loss: [0.5482 0.9001 1.2635]

Epoch 40, loss = 0.9201
Mean test/val loss: 0.9620
[25, 50, 75] percentiles test/val loss: [0.5422 0.8942 1.2664]

New lr: 1e-05
Epoch 42, loss = 0.8509
Mean test/val loss: 0.9186
[25, 50, 75] percentiles test/val loss: [0.5156 0.8458 1.2016]

Epoch 44, loss = 0.8394
Mean test/val loss: 0.9138
[25, 50, 75] percentiles test/val loss: [0.5076 0.8379 1.1958]

Epoch 46, loss = 0.8310
Mean test/val loss: 0.9124
[25, 50, 75] percentiles test/val loss: [0.5103 0.8326 1.1933]

Epoch 48, loss = 0.8239
Mean test/val loss: 0.9128
[25, 50, 75] percentiles test/val loss: [0.5101 0.8326 1.1911]

Epoch 50, loss = 0.8175
Mean test/val loss: 0.9122
[25, 50, 75] percentiles test/val loss: [0.5132 0.8339 1.1887]

Epoch 52, loss = 0.8115
Mean test/val loss: 0.9107
[25, 50, 75] percentiles test/val loss: [0.5121 0.8267 1.1926]

Epoch 54, loss = 0.8060
Mean test/val loss: 0.9113
[25, 50, 75] percentiles test/val loss: [0.5105 0.8308 1.1995]

Epoch 56, loss = 0.8007
Mean test/val loss: 0.9095
[25, 50, 75] percentiles test/val loss: [0.5089 0.8296 1.1991]

Epoch 58, loss = 0.7955
Mean test/val loss: 0.9097
[25, 50, 75] percentiles test/val loss: [0.5103 0.8286 1.1854]

Epoch 60, loss = 0.7906
Mean test/val loss: 0.9132
[25, 50, 75] percentiles test/val loss: [0.5064 0.8289 1.2049]


Total parameters: 51479472
Total training + validation time: 15.0 hours, 6.0 mins, and 12.69999999999709 secs
Final val loss: 0.9132486943434924

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_11_08_23 sample1050: 0.727450966835022
dataset_11_08_23 sample7802: 0.35007426142692566
dataset_11_08_23 sample156: 0.9628729224205017
dataset_11_08_23 sample2452: 1.6331781148910522
dataset_11_08_23 sample752: 1.1571590900421143
MSE_log: 0.966 +- 0.428

Downsampling (200k) Results:

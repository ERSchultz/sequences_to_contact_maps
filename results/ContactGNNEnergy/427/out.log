#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'GeneticDistance_norm', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy2', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=427, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/427', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/427/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/427/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/427/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fb1f6a22430>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'GeneticDistance(norm=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=4, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  GeneticDistance(norm=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 14.238 minutes
Number of samples: 5000
Average num edges per graph:  61627.9772
Mean degree: [245.68 254.88 219.23 ... 251.09 215.5  255.  ] +- [ 9.13  0.37 26.94 ...  4.77 29.22  0.  ]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fb1b80865e0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.5623
Mean test/val loss: 0.5494
[25, 50, 75] percentiles test/val loss: [0.2916 0.4283 0.6766]

Epoch 4, loss = 0.4745
Mean test/val loss: 0.4540
[25, 50, 75] percentiles test/val loss: [0.2166 0.3552 0.5633]

Epoch 6, loss = 0.4327
Mean test/val loss: 0.4249
[25, 50, 75] percentiles test/val loss: [0.1993 0.3219 0.5191]

Epoch 8, loss = 0.4214
Mean test/val loss: 0.4096
[25, 50, 75] percentiles test/val loss: [0.1848 0.3077 0.5255]

Epoch 10, loss = 0.3953
Mean test/val loss: 0.3828
[25, 50, 75] percentiles test/val loss: [0.1841 0.3004 0.4642]

Epoch 12, loss = 0.3693
Mean test/val loss: 0.3862
[25, 50, 75] percentiles test/val loss: [0.1829 0.2918 0.4768]

Epoch 14, loss = 0.3558
Mean test/val loss: 0.3538
[25, 50, 75] percentiles test/val loss: [0.1654 0.2687 0.44  ]

Epoch 16, loss = 0.3434
Mean test/val loss: 0.3502
[25, 50, 75] percentiles test/val loss: [0.1641 0.2732 0.4238]

Epoch 18, loss = 0.3317
Mean test/val loss: 0.3625
[25, 50, 75] percentiles test/val loss: [0.166  0.2676 0.4261]

Epoch 20, loss = 0.3205
Mean test/val loss: 0.3481
[25, 50, 75] percentiles test/val loss: [0.1702 0.2755 0.411 ]

Epoch 22, loss = 0.3106
Mean test/val loss: 0.3215
[25, 50, 75] percentiles test/val loss: [0.1546 0.2506 0.3974]

Epoch 24, loss = 0.3020
Mean test/val loss: 0.3200
[25, 50, 75] percentiles test/val loss: [0.1528 0.2475 0.3889]

Epoch 26, loss = 0.2972
Mean test/val loss: 0.3213
[25, 50, 75] percentiles test/val loss: [0.1513 0.2518 0.3848]

Epoch 28, loss = 0.2897
Mean test/val loss: 0.3007
[25, 50, 75] percentiles test/val loss: [0.144  0.2345 0.3665]

Epoch 30, loss = 0.2852
Mean test/val loss: 0.3144
[25, 50, 75] percentiles test/val loss: [0.1429 0.238  0.372 ]

Epoch 32, loss = 0.2784
Mean test/val loss: 0.3011
[25, 50, 75] percentiles test/val loss: [0.14   0.2336 0.3569]

Epoch 34, loss = 0.2762
Mean test/val loss: 0.3031
[25, 50, 75] percentiles test/val loss: [0.1444 0.2391 0.379 ]

Epoch 36, loss = 0.2707
Mean test/val loss: 0.2974
[25, 50, 75] percentiles test/val loss: [0.1419 0.2264 0.3564]

Epoch 38, loss = 0.2676
Mean test/val loss: 0.2918
[25, 50, 75] percentiles test/val loss: [0.1405 0.2268 0.3573]

Epoch 40, loss = 0.2637
Mean test/val loss: 0.2903
[25, 50, 75] percentiles test/val loss: [0.139  0.2258 0.3504]

New lr: 1e-05
Epoch 42, loss = 0.2389
Mean test/val loss: 0.2744
[25, 50, 75] percentiles test/val loss: [0.1289 0.2151 0.3305]

Epoch 44, loss = 0.2353
Mean test/val loss: 0.2731
[25, 50, 75] percentiles test/val loss: [0.1292 0.2135 0.3301]

Epoch 46, loss = 0.2330
Mean test/val loss: 0.2721
[25, 50, 75] percentiles test/val loss: [0.1283 0.213  0.3298]

Epoch 48, loss = 0.2310
Mean test/val loss: 0.2716
[25, 50, 75] percentiles test/val loss: [0.126  0.2117 0.3302]

Epoch 50, loss = 0.2293
Mean test/val loss: 0.2713
[25, 50, 75] percentiles test/val loss: [0.1263 0.2115 0.3273]

Epoch 52, loss = 0.2277
Mean test/val loss: 0.2702
[25, 50, 75] percentiles test/val loss: [0.1277 0.2112 0.3271]

Epoch 54, loss = 0.2262
Mean test/val loss: 0.2707
[25, 50, 75] percentiles test/val loss: [0.1289 0.21   0.326 ]

Epoch 56, loss = 0.2249
Mean test/val loss: 0.2699
[25, 50, 75] percentiles test/val loss: [0.1274 0.2117 0.3275]

Epoch 58, loss = 0.2238
Mean test/val loss: 0.2695
[25, 50, 75] percentiles test/val loss: [0.1249 0.2094 0.3258]

Epoch 60, loss = 0.2227
Mean test/val loss: 0.2694
[25, 50, 75] percentiles test/val loss: [0.1246 0.2089 0.3248]

Epoch 62, loss = 0.2216
Mean test/val loss: 0.2686
[25, 50, 75] percentiles test/val loss: [0.125  0.2082 0.325 ]

Epoch 64, loss = 0.2206
Mean test/val loss: 0.2685
[25, 50, 75] percentiles test/val loss: [0.1255 0.2106 0.3273]

Epoch 66, loss = 0.2197
Mean test/val loss: 0.2681
[25, 50, 75] percentiles test/val loss: [0.1245 0.2075 0.3228]

Epoch 68, loss = 0.2188
Mean test/val loss: 0.2673
[25, 50, 75] percentiles test/val loss: [0.1241 0.2083 0.3219]

Epoch 70, loss = 0.2180
Mean test/val loss: 0.2682
[25, 50, 75] percentiles test/val loss: [0.127  0.2074 0.3247]

Epoch 72, loss = 0.2172
Mean test/val loss: 0.2672
[25, 50, 75] percentiles test/val loss: [0.1244 0.2074 0.3228]

Epoch 74, loss = 0.2165
Mean test/val loss: 0.2681
[25, 50, 75] percentiles test/val loss: [0.1247 0.2081 0.3256]

Epoch 76, loss = 0.2156
Mean test/val loss: 0.2675
[25, 50, 75] percentiles test/val loss: [0.1262 0.2075 0.3238]

Epoch 78, loss = 0.2149
Mean test/val loss: 0.2669
[25, 50, 75] percentiles test/val loss: [0.1246 0.2059 0.3236]

Epoch 80, loss = 0.2143
Mean test/val loss: 0.2662
[25, 50, 75] percentiles test/val loss: [0.1251 0.2085 0.3228]


Total parameters: 26462256
Total training + validation time: 6.0 hours, 39.0 mins, and 53.79999999999927 secs
Final val loss: 0.26619241358339785

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_04_28_23 sample981: 0.6011949181556702
dataset_04_28_23 sample324: 0.6202921867370605
dataset_04_28_23 sample3464: 0.28567788004875183
dataset_04_28_23 sample2834: 0.43233171105384827
dataset_04_28_23 sample1936: 0.19785284996032715
Loss: 0.427 +- 0.167

Downsampling (40%) Results:
dataset_04_28_23 sample1936-downsampling: 11.212349891662598
dataset_04_28_23 sample2834-downsampling: 6.869948387145996
dataset_04_28_23 sample324-downsampling: 13.167036056518555
dataset_04_28_23 sample3464-downsampling: 7.556123733520508
dataset_04_28_23 sample981-downsampling: 12.028432846069336
Loss: 10.167 +- 2.5

Removing /scratch/midway3/erschultz/ContactGNNEnergy2downsample
Original sampling (100%) Results:
dataset_04_28_23 sample1936-regular: 9.768986701965332
dataset_04_28_23 sample2834-regular: 6.71803617477417
dataset_04_28_23 sample324-regular: 13.653100967407227
dataset_04_28_23 sample3464-regular: 10.00297737121582
dataset_04_28_23 sample981-regular: 10.689395904541016
Loss: 10.166 +- 2.214

Removing /scratch/midway3/erschultz/ContactGNNEnergy2regsample

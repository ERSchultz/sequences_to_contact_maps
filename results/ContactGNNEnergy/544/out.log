#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_25_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy14', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=544, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/544', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/544/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/544/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/544/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f4241397280>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 38.707 minutes
Number of samples: 10000
Average num edges per graph:  63755.8978
Mean degree: [254.56 248.63 254.51 ... 253.62 254.3  249.46] +- [0.83 9.66 1.47 ... 2.64 1.84 5.6 ]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [2729, 4175, 5211, 7125, 6072, 4886, 3437, 9395, 6505, 8312, 2775, 4982, 384, 7192, 4830, 4810, 5288, 8226, 5118, 1608, 8631, 1875, 6269, 1644, 8442, 3832, 8080, 8599, 7599, 7105, 6511, 5940, 2674, 8211, 1944, 99, 2741, 5296, 9991, 9100, 4900, 7094, 9422, 821, 2834, 203, 6164, 1053, 1623, 5339, 5618, 6419, 6648, 3837, 8951, 3740, 3648, 1317, 8142, 2131, 7446, 6617, 6883, 6997, 4168, 4707, 53, 9053, 5522, 3272, 9951, 8738, 7654, 9257, 5955, 668, 7114, 1249, 614, 4316, 3842, 3658, 5567, 4769, 1885, 988, 5620, 4659, 2576, 5258, 9231, 9147, 1408, 5103, 38, 5002, 5585, 520, 2008, 201, 195, 8305]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f41f843fe80>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.2638
Mean test/val loss: 1.1302
[25, 50, 75] percentiles test/val loss: [0.5476 1.0126 1.5471]

Epoch 4, loss = 2.3994
Mean test/val loss: 0.9618
[25, 50, 75] percentiles test/val loss: [0.4953 0.9104 1.2913]

Epoch 6, loss = 0.9552
Mean test/val loss: 0.8745
[25, 50, 75] percentiles test/val loss: [0.4483 0.8237 1.1665]

Epoch 8, loss = 0.7944
Mean test/val loss: 0.7105
[25, 50, 75] percentiles test/val loss: [0.3594 0.6587 0.9393]

Epoch 10, loss = 0.7256
Mean test/val loss: 0.7328
[25, 50, 75] percentiles test/val loss: [0.3935 0.6431 0.9466]

Epoch 12, loss = 0.6886
Mean test/val loss: 0.6440
[25, 50, 75] percentiles test/val loss: [0.3403 0.5921 0.8724]

Epoch 14, loss = 0.6522
Mean test/val loss: 0.6090
[25, 50, 75] percentiles test/val loss: [0.3272 0.5618 0.8056]

Epoch 16, loss = 0.6257
Mean test/val loss: 0.5924
[25, 50, 75] percentiles test/val loss: [0.3087 0.5384 0.7894]

Epoch 18, loss = 0.6004
Mean test/val loss: 0.6058
[25, 50, 75] percentiles test/val loss: [0.2981 0.5581 0.8055]

Epoch 20, loss = 0.5829
Mean test/val loss: 0.7005
[25, 50, 75] percentiles test/val loss: [0.5083 0.6248 0.8053]

Epoch 22, loss = 0.5612
Mean test/val loss: 0.5492
[25, 50, 75] percentiles test/val loss: [0.2968 0.5029 0.7116]

Epoch 24, loss = 0.5474
Mean test/val loss: 0.5515
[25, 50, 75] percentiles test/val loss: [0.3029 0.5027 0.7228]

Epoch 26, loss = 0.5358
Mean test/val loss: 0.5222
[25, 50, 75] percentiles test/val loss: [0.2673 0.4727 0.6841]

Epoch 28, loss = 0.5211
Mean test/val loss: 0.5172
[25, 50, 75] percentiles test/val loss: [0.27   0.4659 0.6792]

Epoch 30, loss = 0.5110
Mean test/val loss: 0.5089
[25, 50, 75] percentiles test/val loss: [0.2696 0.4615 0.6716]

Epoch 32, loss = 0.5023
Mean test/val loss: 0.5102
[25, 50, 75] percentiles test/val loss: [0.2689 0.4713 0.6718]

Epoch 34, loss = 0.4896
Mean test/val loss: 0.5039
[25, 50, 75] percentiles test/val loss: [0.2625 0.465  0.6609]

Epoch 36, loss = 0.4801
Mean test/val loss: 0.5008
[25, 50, 75] percentiles test/val loss: [0.2562 0.4458 0.6606]

Epoch 38, loss = 0.4710
Mean test/val loss: 0.4854
[25, 50, 75] percentiles test/val loss: [0.2586 0.439  0.6371]

Epoch 40, loss = 0.4650
Mean test/val loss: 0.5068
[25, 50, 75] percentiles test/val loss: [0.2806 0.4695 0.6586]

New lr: 1e-05
Epoch 42, loss = 0.4005
Mean test/val loss: 0.4313
[25, 50, 75] percentiles test/val loss: [0.2256 0.3902 0.5596]

Epoch 44, loss = 0.3902
Mean test/val loss: 0.4274
[25, 50, 75] percentiles test/val loss: [0.2256 0.3838 0.5557]

Epoch 46, loss = 0.3827
Mean test/val loss: 0.4236
[25, 50, 75] percentiles test/val loss: [0.2188 0.3775 0.5499]

Epoch 48, loss = 0.3763
Mean test/val loss: 0.4218
[25, 50, 75] percentiles test/val loss: [0.2228 0.3773 0.5451]

Epoch 50, loss = 0.3707
Mean test/val loss: 0.4190
[25, 50, 75] percentiles test/val loss: [0.2197 0.3748 0.5435]

Epoch 52, loss = 0.3655
Mean test/val loss: 0.4169
[25, 50, 75] percentiles test/val loss: [0.2173 0.3771 0.5423]

Epoch 54, loss = 0.3605
Mean test/val loss: 0.4148
[25, 50, 75] percentiles test/val loss: [0.2181 0.3722 0.5382]

Epoch 56, loss = 0.3563
Mean test/val loss: 0.4143
[25, 50, 75] percentiles test/val loss: [0.2162 0.3695 0.5385]

Epoch 58, loss = 0.3519
Mean test/val loss: 0.4121
[25, 50, 75] percentiles test/val loss: [0.215  0.3679 0.5357]

Epoch 60, loss = 0.3478
Mean test/val loss: 0.4099
[25, 50, 75] percentiles test/val loss: [0.2164 0.3686 0.5341]

Epoch 62, loss = 0.3442
Mean test/val loss: 0.4095
[25, 50, 75] percentiles test/val loss: [0.2154 0.3661 0.5289]

Epoch 64, loss = 0.3405
Mean test/val loss: 0.4068
[25, 50, 75] percentiles test/val loss: [0.2136 0.3636 0.5269]

Epoch 66, loss = 0.3373
Mean test/val loss: 0.4064
[25, 50, 75] percentiles test/val loss: [0.2146 0.36   0.5268]

Epoch 68, loss = 0.3343
Mean test/val loss: 0.4092
[25, 50, 75] percentiles test/val loss: [0.2146 0.3676 0.5338]

Epoch 70, loss = 0.3309
Mean test/val loss: 0.4050
[25, 50, 75] percentiles test/val loss: [0.2128 0.3605 0.5278]


Total parameters: 51479216
Total training + validation time: 20.0 hours, 58.0 mins, and 0.6999999999970896 secs
Final val loss: 0.40499900830793195

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_09_25_23 sample1050: 0.8051695823669434
dataset_09_25_23 sample7802: 0.7184131741523743
dataset_09_25_23 sample156: 0.6594944000244141
dataset_09_25_23 sample2452: 0.1187080591917038
dataset_09_25_23 sample752: 0.023797158151865005
MSE Loss: 0.465 +- 0.326

Downsampling (200k) Results:
dataset_09_25_23 sample1050-downsampling: 32.95100784301758
dataset_09_25_23 sample156-downsampling: 18.263065338134766
dataset_09_25_23 sample2452-downsampling: 26.920516967773438
dataset_09_25_23 sample752-downsampling: 1.295506238937378
dataset_09_25_23 sample7802-downsampling: 50.24819564819336
Loss: 25.936 +- 16.17

Removing /scratch/midway3/erschultz/ContactGNNEnergy14downsample
Original sampling (400k) Results:
dataset_09_25_23 sample1050-regular: 29.902236938476562
dataset_09_25_23 sample156-regular: 18.083677291870117
dataset_09_25_23 sample2452-regular: 15.21567153930664
dataset_09_25_23 sample752-regular: 0.9244246482849121
dataset_09_25_23 sample7802-regular: 59.6314697265625
Loss: 24.751 +- 19.729

Removing /scratch/midway3/erschultz/ContactGNNEnergy14regsample

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy15', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=536, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/536', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/536/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/536/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/536/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fb3487e7280>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 27.758 minutes
Number of samples: 10000
Average num edges per graph:  63539.8822
Mean degree: [246.36 254.75 249.55 ... 251.39 254.63 242.59] +- [ 9.11  0.58  6.48 ...  3.73  0.95 19.1 ]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [2729, 4175, 5211, 7125, 6072, 4886, 3437, 9395, 6505, 8312, 2775, 4982, 384, 7192, 4830, 4810, 5288, 8226, 5118, 1608, 8631, 1875, 6269, 1644, 8442, 3832, 8080, 8599, 7599, 7105, 6511, 5940, 2674, 8211, 1944, 99, 2741, 5296, 9991, 9100, 4900, 7094, 9422, 821, 2834, 203, 6164, 1053, 1623, 5339, 5618, 6419, 6648, 3837, 8951, 3740, 3648, 1317, 8142, 2131, 7446, 6617, 6883, 6997, 4168, 4707, 53, 9053, 5522, 3272, 9951, 8738, 7654, 9257, 5955, 668, 7114, 1249, 614, 4316, 3842, 3658, 5567, 4769, 1885, 988, 5620, 4659, 2576, 5258, 9231, 9147, 1408, 5103, 38, 5002, 5585, 520, 2008, 201, 195, 8305]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fb3075d13a0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.6891
Mean test/val loss: 1.5888
[25, 50, 75] percentiles test/val loss: [1.0274 1.5281 2.0398]

Epoch 4, loss = 1.3768
Mean test/val loss: 1.3639
[25, 50, 75] percentiles test/val loss: [0.9304 1.2976 1.7154]

Epoch 6, loss = 1.2199
Mean test/val loss: 1.1455
[25, 50, 75] percentiles test/val loss: [0.7533 1.0506 1.4209]

Epoch 8, loss = 1.0935
Mean test/val loss: 1.0554
[25, 50, 75] percentiles test/val loss: [0.6864 0.9553 1.3228]

Epoch 10, loss = 1.0379
Mean test/val loss: 1.0164
[25, 50, 75] percentiles test/val loss: [0.6585 0.9265 1.254 ]

Epoch 12, loss = 1.0021
Mean test/val loss: 1.0169
[25, 50, 75] percentiles test/val loss: [0.6702 0.9286 1.2668]

Epoch 14, loss = 0.9745
Mean test/val loss: 0.9762
[25, 50, 75] percentiles test/val loss: [0.6425 0.8923 1.2034]

Epoch 16, loss = 0.9498
Mean test/val loss: 0.9411
[25, 50, 75] percentiles test/val loss: [0.6078 0.8528 1.169 ]

Epoch 18, loss = 0.9321
Mean test/val loss: 0.9336
[25, 50, 75] percentiles test/val loss: [0.6124 0.8423 1.1582]

Epoch 20, loss = 0.9087
Mean test/val loss: 0.9126
[25, 50, 75] percentiles test/val loss: [0.5937 0.8231 1.1109]

Epoch 22, loss = 0.8973
Mean test/val loss: 0.8938
[25, 50, 75] percentiles test/val loss: [0.5765 0.8005 1.0962]

Epoch 24, loss = 0.8817
Mean test/val loss: 0.9240
[25, 50, 75] percentiles test/val loss: [0.5955 0.8364 1.1476]

Epoch 26, loss = 0.8682
Mean test/val loss: 0.8839
[25, 50, 75] percentiles test/val loss: [0.5638 0.7949 1.0981]

Epoch 28, loss = 0.8541
Mean test/val loss: 0.8777
[25, 50, 75] percentiles test/val loss: [0.5695 0.7968 1.0676]

Epoch 30, loss = 0.8444
Mean test/val loss: 0.8681
[25, 50, 75] percentiles test/val loss: [0.5593 0.7799 1.0846]

Epoch 32, loss = 0.8258
Mean test/val loss: 0.8522
[25, 50, 75] percentiles test/val loss: [0.5554 0.7687 1.0508]

Epoch 34, loss = 0.8395
Mean test/val loss: 0.9037
[25, 50, 75] percentiles test/val loss: [0.5872 0.8129 1.1164]

Epoch 36, loss = 0.8264
Mean test/val loss: 0.8573
[25, 50, 75] percentiles test/val loss: [0.5494 0.7728 1.0549]

Epoch 38, loss = 0.8170
Mean test/val loss: 0.8600
[25, 50, 75] percentiles test/val loss: [0.5541 0.7655 1.0626]

Epoch 40, loss = 0.8036
Mean test/val loss: 0.8405
[25, 50, 75] percentiles test/val loss: [0.5505 0.7608 1.0231]

New lr: 1e-05
Epoch 42, loss = 0.7220
Mean test/val loss: 0.7738
[25, 50, 75] percentiles test/val loss: [0.4978 0.6923 0.9534]

Epoch 44, loss = 0.7088
Mean test/val loss: 0.7690
[25, 50, 75] percentiles test/val loss: [0.499  0.6894 0.9463]

Epoch 46, loss = 0.6997
Mean test/val loss: 0.7648
[25, 50, 75] percentiles test/val loss: [0.4914 0.6841 0.9442]

Epoch 48, loss = 0.6921
Mean test/val loss: 0.7608
[25, 50, 75] percentiles test/val loss: [0.489  0.6802 0.9329]

Epoch 50, loss = 0.6848
Mean test/val loss: 0.7578
[25, 50, 75] percentiles test/val loss: [0.4875 0.6767 0.931 ]

Epoch 52, loss = 0.6782
Mean test/val loss: 0.7558
[25, 50, 75] percentiles test/val loss: [0.4862 0.6738 0.933 ]

Epoch 54, loss = 0.6721
Mean test/val loss: 0.7543
[25, 50, 75] percentiles test/val loss: [0.486  0.6726 0.926 ]

Epoch 56, loss = 0.6662
Mean test/val loss: 0.7522
[25, 50, 75] percentiles test/val loss: [0.4854 0.6673 0.9168]

Epoch 58, loss = 0.6608
Mean test/val loss: 0.7492
[25, 50, 75] percentiles test/val loss: [0.484  0.6689 0.9186]

Epoch 60, loss = 0.6558
Mean test/val loss: 0.7486
[25, 50, 75] percentiles test/val loss: [0.4843 0.6697 0.9198]

Epoch 62, loss = 0.6509
Mean test/val loss: 0.7461
[25, 50, 75] percentiles test/val loss: [0.4825 0.664  0.9123]

Epoch 64, loss = 0.6460
Mean test/val loss: 0.7467
[25, 50, 75] percentiles test/val loss: [0.4813 0.6675 0.9125]

Epoch 66, loss = 0.6418
Mean test/val loss: 0.7447
[25, 50, 75] percentiles test/val loss: [0.4794 0.6638 0.9136]

Epoch 68, loss = 0.6367
Mean test/val loss: 0.7447
[25, 50, 75] percentiles test/val loss: [0.4811 0.6631 0.9096]

Epoch 70, loss = 0.6334
Mean test/val loss: 0.7412
[25, 50, 75] percentiles test/val loss: [0.4804 0.6569 0.9062]


Total parameters: 51479216
Total training + validation time: 19.0 hours, 54.0 mins, and 17.19999999999709 secs
Final val loss: 0.7411816638885066

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample1050: 1.9234669208526611
dataset_09_28_23 sample7802: 0.6507062911987305
dataset_09_28_23 sample156: 0.7237233519554138
dataset_09_28_23 sample2452: 0.3489539325237274
dataset_09_28_23 sample752: 0.01000975351780653
MSE Loss: 0.731 +- 0.647

Downsampling (200k) Results:
dataset_09_28_23 sample1050-downsampling: 62.5699577331543
dataset_09_28_23 sample156-downsampling: 114.68276977539062
dataset_09_28_23 sample2452-downsampling: 20.826026916503906
dataset_09_28_23 sample752-downsampling: 0.681657075881958
dataset_09_28_23 sample7802-downsampling: 23.408843994140625
Loss: 44.434 +- 40.441

Removing /scratch/midway3/erschultz/ContactGNNEnergy15downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1050-regular: 67.34063720703125
dataset_09_28_23 sample156-regular: 101.38984680175781
dataset_09_28_23 sample2452-regular: 22.40762710571289
dataset_09_28_23 sample752-regular: 1.5863850116729736
dataset_09_28_23 sample7802-regular: 19.97414207458496
Loss: 42.54 +- 36.524

Removing /scratch/midway3/erschultz/ContactGNNEnergy15regsample

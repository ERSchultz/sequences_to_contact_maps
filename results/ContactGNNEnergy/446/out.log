#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy6', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=446, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/446', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/446/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/446/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/446/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fa382024310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 16.411 minutes
Number of samples: 5000
Average num edges per graph:  62810.2924
Mean degree: [252.07 254.88 219.23 ... 251.09 222.44 255.  ] +- [ 4.29  0.37 26.94 ...  4.77 27.21  0.  ]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fa344269a00>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.5510
Mean test/val loss: 0.5395
[25, 50, 75] percentiles test/val loss: [0.2727 0.4484 0.669 ]

Epoch 4, loss = 0.4711
Mean test/val loss: 0.4858
[25, 50, 75] percentiles test/val loss: [0.243  0.3773 0.6037]

Epoch 6, loss = 0.4313
Mean test/val loss: 0.4256
[25, 50, 75] percentiles test/val loss: [0.1992 0.3395 0.5126]

Epoch 8, loss = 0.3985
Mean test/val loss: 0.4214
[25, 50, 75] percentiles test/val loss: [0.2057 0.3308 0.5054]

Epoch 10, loss = 0.3812
Mean test/val loss: 0.3735
[25, 50, 75] percentiles test/val loss: [0.1771 0.2885 0.4432]

Epoch 12, loss = 0.3626
Mean test/val loss: 0.3654
[25, 50, 75] percentiles test/val loss: [0.1763 0.2939 0.4379]

Epoch 14, loss = 0.3472
Mean test/val loss: 0.3509
[25, 50, 75] percentiles test/val loss: [0.1663 0.2679 0.4318]

Epoch 16, loss = 0.3329
Mean test/val loss: 0.3472
[25, 50, 75] percentiles test/val loss: [0.1748 0.2689 0.4132]

Epoch 18, loss = 0.3227
Mean test/val loss: 0.3341
[25, 50, 75] percentiles test/val loss: [0.1751 0.2625 0.4083]

Epoch 20, loss = 0.3117
Mean test/val loss: 0.3246
[25, 50, 75] percentiles test/val loss: [0.1575 0.2492 0.392 ]

Epoch 22, loss = 0.3011
Mean test/val loss: 0.3197
[25, 50, 75] percentiles test/val loss: [0.1541 0.2442 0.3884]

Epoch 24, loss = 0.2947
Mean test/val loss: 0.3099
[25, 50, 75] percentiles test/val loss: [0.1468 0.2411 0.382 ]

Epoch 26, loss = 0.2866
Mean test/val loss: 0.3356
[25, 50, 75] percentiles test/val loss: [0.1783 0.2609 0.3878]

Epoch 28, loss = 0.2806
Mean test/val loss: 0.2948
[25, 50, 75] percentiles test/val loss: [0.1373 0.2293 0.3599]

Epoch 30, loss = 0.2760
Mean test/val loss: 0.3099
[25, 50, 75] percentiles test/val loss: [0.1466 0.239  0.3727]

Epoch 32, loss = 0.2709
Mean test/val loss: 0.2981
[25, 50, 75] percentiles test/val loss: [0.1388 0.2311 0.3649]

Epoch 34, loss = 0.2667
Mean test/val loss: 0.2975
[25, 50, 75] percentiles test/val loss: [0.1483 0.2332 0.3667]

Epoch 36, loss = 0.2619
Mean test/val loss: 0.2950
[25, 50, 75] percentiles test/val loss: [0.1466 0.2261 0.3595]

Epoch 38, loss = 0.2580
Mean test/val loss: 0.2868
[25, 50, 75] percentiles test/val loss: [0.1352 0.2215 0.3479]

Epoch 40, loss = 0.2546
Mean test/val loss: 0.3055
[25, 50, 75] percentiles test/val loss: [0.1473 0.2453 0.3699]

New lr: 1e-05
Epoch 42, loss = 0.2312
Mean test/val loss: 0.2665
[25, 50, 75] percentiles test/val loss: [0.1247 0.2049 0.3264]

Epoch 44, loss = 0.2278
Mean test/val loss: 0.2658
[25, 50, 75] percentiles test/val loss: [0.1243 0.2042 0.3237]

Epoch 46, loss = 0.2256
Mean test/val loss: 0.2643
[25, 50, 75] percentiles test/val loss: [0.1231 0.2039 0.3223]

Epoch 48, loss = 0.2237
Mean test/val loss: 0.2633
[25, 50, 75] percentiles test/val loss: [0.1232 0.2019 0.3212]

Epoch 50, loss = 0.2220
Mean test/val loss: 0.2627
[25, 50, 75] percentiles test/val loss: [0.1211 0.2028 0.3212]

Epoch 52, loss = 0.2205
Mean test/val loss: 0.2620
[25, 50, 75] percentiles test/val loss: [0.1206 0.2023 0.3191]

Epoch 54, loss = 0.2191
Mean test/val loss: 0.2615
[25, 50, 75] percentiles test/val loss: [0.121  0.2003 0.3194]

Epoch 56, loss = 0.2178
Mean test/val loss: 0.2614
[25, 50, 75] percentiles test/val loss: [0.121  0.2019 0.3217]

Epoch 58, loss = 0.2167
Mean test/val loss: 0.2608
[25, 50, 75] percentiles test/val loss: [0.1198 0.2014 0.3211]

Epoch 60, loss = 0.2156
Mean test/val loss: 0.2604
[25, 50, 75] percentiles test/val loss: [0.1206 0.2018 0.319 ]

Epoch 62, loss = 0.2146
Mean test/val loss: 0.2602
[25, 50, 75] percentiles test/val loss: [0.1198 0.2046 0.321 ]

Epoch 64, loss = 0.2136
Mean test/val loss: 0.2599
[25, 50, 75] percentiles test/val loss: [0.1193 0.2016 0.3175]

Epoch 66, loss = 0.2128
Mean test/val loss: 0.2593
[25, 50, 75] percentiles test/val loss: [0.1195 0.1999 0.3189]

Epoch 68, loss = 0.2119
Mean test/val loss: 0.2592
[25, 50, 75] percentiles test/val loss: [0.1188 0.2005 0.3177]

Epoch 70, loss = 0.2111
Mean test/val loss: 0.2587
[25, 50, 75] percentiles test/val loss: [0.1187 0.1993 0.3177]

Epoch 72, loss = 0.2103
Mean test/val loss: 0.2597
[25, 50, 75] percentiles test/val loss: [0.12   0.1998 0.3187]

Epoch 74, loss = 0.2095
Mean test/val loss: 0.2579
[25, 50, 75] percentiles test/val loss: [0.1173 0.1994 0.317 ]

Epoch 76, loss = 0.2088
Mean test/val loss: 0.2583
[25, 50, 75] percentiles test/val loss: [0.1184 0.1999 0.3181]

Epoch 78, loss = 0.2081
Mean test/val loss: 0.2582
[25, 50, 75] percentiles test/val loss: [0.1183 0.1974 0.3171]

Epoch 80, loss = 0.2074
Mean test/val loss: 0.2577
[25, 50, 75] percentiles test/val loss: [0.118  0.1984 0.315 ]


Total parameters: 26462000
Total training + validation time: 7.0 hours, 24.0 mins, and 32.70000000000073 secs
Final val loss: 0.25768883791193364

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_04_28_23 sample981: 0.4918082058429718
dataset_04_28_23 sample324: 0.49972397089004517
dataset_04_28_23 sample3464: 0.2875627875328064
dataset_04_28_23 sample2834: 0.40913125872612
dataset_04_28_23 sample1936: 0.18685056269168854
Loss: 0.375 +- 0.121

Downsampling (40%) Results:
dataset_04_28_23 sample1936-downsampling: 7.364778518676758
dataset_04_28_23 sample2834-downsampling: 6.1787519454956055
dataset_04_28_23 sample324-downsampling: 23.52106475830078
dataset_04_28_23 sample3464-downsampling: 10.56796646118164
dataset_04_28_23 sample981-downsampling: 10.065585136413574
Loss: 11.54 +- 6.21

Removing /scratch/midway3/erschultz/ContactGNNEnergy6downsample
Original sampling (100%) Results:
dataset_04_28_23 sample1936-regular: 7.9795331954956055
dataset_04_28_23 sample2834-regular: 6.185708999633789
dataset_04_28_23 sample324-regular: 20.796052932739258
dataset_04_28_23 sample3464-regular: 13.658968925476074
dataset_04_28_23 sample981-regular: 10.15279769897461
Loss: 11.755 +- 5.161

Removing /scratch/midway3/erschultz/ContactGNNEnergy6regsample

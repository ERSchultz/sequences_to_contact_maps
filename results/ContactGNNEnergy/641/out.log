#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project/depablo/erschultz/dataset_12_12_23_imr90'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy1', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_and_mse_log', loss_k=2, lambda1=0.1, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=641, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/641', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/641/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/641/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/641/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<scripts.neural_nets.losses.MSE_and_MSE_log object at 0x7fce7435a040>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=2, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 11.028 minutes
Number of samples: 5000
Average num edges per graph:  62346.308
Mean degree: [254.87 255.   255.   ... 214.69 254.65 239.73] +- [ 0.48  0.    0.   ... 35.84  1.01 17.39]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [1640, 1672, 3464, 831, 1651, 2678, 861, 3660, 267, 810, 2325, 2890, 3805, 4444, 2956, 1308, 3942, 2151, 3235, 1362, 566, 1440, 3319, 161, 206, 459, 3674, 4352, 2576, 4555, 753, 2322, 275, 745, 2876, 2221, 1309, 2628, 2363, 1906, 2834, 3684, 166, 3987, 3663, 1549, 981, 3237, 803, 1932, 3661, 4977, 4056, 255, 2787, 3760, 4875, 4932, 1511, 3912, 2913, 2064, 3, 64, 2434, 930, 795, 1006, 727, 672, 2695, 338, 111, 787, 1626, 1407, 952, 833, 4570, 1725, 1798, 1787, 2072, 3457, 544, 3195, 3861, 3343, 1300, 3110, 3283, 4990, 4966, 4092, 1475, 1589, 367, 1972, 4641, 1487, 1184, 4058]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fce6c59a9d0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 2.3979
Mean test/val loss: 2.3171
[25, 50, 75] percentiles test/val loss: [1.4555 1.93   2.8191]

Epoch 4, loss = 1.9903
Mean test/val loss: 2.0631
[25, 50, 75] percentiles test/val loss: [1.1455 1.7388 2.6237]

Epoch 6, loss = 1.7886
Mean test/val loss: 1.8147
[25, 50, 75] percentiles test/val loss: [0.9958 1.5095 2.2892]

Epoch 8, loss = 1.6608
Mean test/val loss: 1.7336
[25, 50, 75] percentiles test/val loss: [0.9277 1.4713 2.1438]

Epoch 10, loss = 1.6140
Mean test/val loss: 1.7231
[25, 50, 75] percentiles test/val loss: [0.9643 1.4776 2.1191]

Epoch 12, loss = 1.5204
Mean test/val loss: 1.6111
[25, 50, 75] percentiles test/val loss: [0.8634 1.3661 2.0442]

Epoch 14, loss = 1.4279
Mean test/val loss: 1.5687
[25, 50, 75] percentiles test/val loss: [0.8351 1.3387 1.9749]

Epoch 16, loss = 1.3810
Mean test/val loss: 1.4145
[25, 50, 75] percentiles test/val loss: [0.7353 1.201  1.7519]

Epoch 18, loss = 1.3253
Mean test/val loss: 1.4913
[25, 50, 75] percentiles test/val loss: [0.7795 1.2624 1.816 ]

Epoch 20, loss = 1.2830
Mean test/val loss: 1.3612
[25, 50, 75] percentiles test/val loss: [0.7259 1.1385 1.6735]

Epoch 22, loss = 1.2290
Mean test/val loss: 1.3099
[25, 50, 75] percentiles test/val loss: [0.6978 1.0985 1.6206]

Epoch 24, loss = 1.1866
Mean test/val loss: 1.3028
[25, 50, 75] percentiles test/val loss: [0.6828 1.0932 1.6235]

Epoch 26, loss = 1.1532
Mean test/val loss: 1.2761
[25, 50, 75] percentiles test/val loss: [0.6577 1.0646 1.6038]

Epoch 28, loss = 1.1200
Mean test/val loss: 1.2457
[25, 50, 75] percentiles test/val loss: [0.6463 1.0174 1.5099]

Epoch 30, loss = 1.0962
Mean test/val loss: 1.2130
[25, 50, 75] percentiles test/val loss: [0.6439 1.0149 1.4767]

Epoch 32, loss = 1.0685
Mean test/val loss: 1.1758
[25, 50, 75] percentiles test/val loss: [0.6101 0.9591 1.4611]

Epoch 34, loss = 1.0400
Mean test/val loss: 1.1800
[25, 50, 75] percentiles test/val loss: [0.6099 0.94   1.4471]

Epoch 36, loss = 1.0212
Mean test/val loss: 1.1690
[25, 50, 75] percentiles test/val loss: [0.6125 0.943  1.4444]

Epoch 38, loss = 1.0016
Mean test/val loss: 1.1541
[25, 50, 75] percentiles test/val loss: [0.6092 0.9255 1.445 ]

Epoch 40, loss = 0.9814
Mean test/val loss: 1.1753
[25, 50, 75] percentiles test/val loss: [0.6179 0.9602 1.4298]

New lr: 1e-05
Epoch 42, loss = 0.8550
Mean test/val loss: 1.0427
[25, 50, 75] percentiles test/val loss: [0.5338 0.8331 1.2456]

Epoch 44, loss = 0.8341
Mean test/val loss: 1.0389
[25, 50, 75] percentiles test/val loss: [0.5364 0.8247 1.2564]

Epoch 46, loss = 0.8203
Mean test/val loss: 1.0311
[25, 50, 75] percentiles test/val loss: [0.5294 0.822  1.2485]

Epoch 48, loss = 0.8084
Mean test/val loss: 1.0275
[25, 50, 75] percentiles test/val loss: [0.5288 0.815  1.235 ]

Epoch 50, loss = 0.7980
Mean test/val loss: 1.0239
[25, 50, 75] percentiles test/val loss: [0.5324 0.8128 1.2438]

Epoch 52, loss = 0.7886
Mean test/val loss: 1.0217
[25, 50, 75] percentiles test/val loss: [0.5161 0.81   1.2461]

Epoch 54, loss = 0.7795
Mean test/val loss: 1.0175
[25, 50, 75] percentiles test/val loss: [0.5141 0.8081 1.2385]

Epoch 56, loss = 0.7711
Mean test/val loss: 1.0153
[25, 50, 75] percentiles test/val loss: [0.5184 0.8085 1.234 ]

Epoch 58, loss = 0.7629
Mean test/val loss: 1.0107
[25, 50, 75] percentiles test/val loss: [0.5153 0.8061 1.217 ]

Epoch 60, loss = 0.7554
Mean test/val loss: 1.0160
[25, 50, 75] percentiles test/val loss: [0.516  0.8086 1.2328]


Total parameters: 51478960
Total training + validation time: 8.0 hours, 34.0 mins, and 24.200000000000728 secs
Final val loss: 1.0160227742493153

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_12_12_23_imr90 sample981: 0.31710030138492584
dataset_12_12_23_imr90 sample324: 1.4821195006370544
dataset_12_12_23_imr90 sample3464: 1.4031929969787598
dataset_12_12_23_imr90 sample2834: 0.5429851710796356
dataset_12_12_23_imr90 sample1936: 0.14631794020533562
Loss1: 0.468, Loss2: 0.31
MSE+MSE_log: 0.778 +- 0.557

Downsampling (200k) Results:
Original sampling (400k) Results:

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=5, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr_rank5', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_5'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy16', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=537, pretrain_id=None, resume_training=False, k=5, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/537', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/537/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/537/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/537/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fdfef9b3310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True, rank=5)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=5, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True, rank=5),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=5, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 27.873 minutes
Number of samples: 10000
Average num edges per graph:  63539.8822
Mean degree: [246.36 254.75 249.55 ... 251.39 254.63 242.59] +- [ 9.11  0.58  6.48 ...  3.73  0.95 19.1 ]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [3499, 8938, 7990, 9606, 1202, 2469, 8756, 3817, 3214, 2148, 896, 7382, 4928, 8522, 1662, 9336, 9952, 7736, 2042, 241, 5556, 6123, 1556, 5688, 3463, 2495, 5195, 3911, 1958, 8127, 3626, 6281, 7710, 3889, 7747, 6374, 3272, 3696, 520, 5468, 4274, 8312, 1249, 53, 7415, 297, 8599, 3519, 6838, 7823, 4319, 5002, 9595, 2741, 9401, 765, 4684, 5401, 3737, 3981, 3437, 5339, 2524, 1073, 1003, 6278, 115, 7025, 2434, 4531, 8259, 5356, 3286, 4077, 401, 2127, 316, 1178, 3397, 9746, 3268, 3693, 9279, 4144, 5261, 3396, 3188, 3610, 4138, 2997, 2101, 9335, 9761, 378, 8796, 4851, 99, 3128, 3086, 8631, 9967, 3114]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fdfae817a00>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.4131
Mean test/val loss: 1.2984
[25, 50, 75] percentiles test/val loss: [0.8586 1.2158 1.656 ]

Epoch 4, loss = 1.1886
Mean test/val loss: 1.1320
[25, 50, 75] percentiles test/val loss: [0.7419 1.0403 1.4196]

Epoch 6, loss = 1.0887
Mean test/val loss: 1.1186
[25, 50, 75] percentiles test/val loss: [0.7497 1.0205 1.3739]

Epoch 8, loss = 1.0399
Mean test/val loss: 1.0230
[25, 50, 75] percentiles test/val loss: [0.6726 0.9389 1.2683]

Epoch 10, loss = 1.0035
Mean test/val loss: 1.0056
[25, 50, 75] percentiles test/val loss: [0.6574 0.9085 1.2395]

Epoch 12, loss = 0.9829
Mean test/val loss: 0.9774
[25, 50, 75] percentiles test/val loss: [0.6428 0.88   1.1987]

Epoch 14, loss = 0.9600
Mean test/val loss: 0.9572
[25, 50, 75] percentiles test/val loss: [0.6284 0.8633 1.1887]

Epoch 16, loss = 0.9439
Mean test/val loss: 0.9653
[25, 50, 75] percentiles test/val loss: [0.6321 0.874  1.1902]

Epoch 18, loss = 0.9289
Mean test/val loss: 0.9601
[25, 50, 75] percentiles test/val loss: [0.6235 0.8619 1.1711]

Epoch 20, loss = 0.9188
Mean test/val loss: 0.9347
[25, 50, 75] percentiles test/val loss: [0.6128 0.8424 1.1584]

Epoch 22, loss = 0.9049
Mean test/val loss: 0.9262
[25, 50, 75] percentiles test/val loss: [0.6005 0.8365 1.1374]

Epoch 24, loss = 0.8947
Mean test/val loss: 0.9133
[25, 50, 75] percentiles test/val loss: [0.6008 0.8261 1.1257]

Epoch 26, loss = 0.8861
Mean test/val loss: 0.9081
[25, 50, 75] percentiles test/val loss: [0.5895 0.8228 1.1146]

Epoch 28, loss = 0.8783
Mean test/val loss: 0.8971
[25, 50, 75] percentiles test/val loss: [0.5906 0.8078 1.1157]

Epoch 30, loss = 0.8689
Mean test/val loss: 0.9347
[25, 50, 75] percentiles test/val loss: [0.6103 0.837  1.1517]

Epoch 32, loss = 0.8662
Mean test/val loss: 0.9049
[25, 50, 75] percentiles test/val loss: [0.593  0.8185 1.1129]

Epoch 34, loss = 0.8557
Mean test/val loss: 0.8747
[25, 50, 75] percentiles test/val loss: [0.572 0.793 1.07 ]

Epoch 36, loss = 0.8500
Mean test/val loss: 0.8993
[25, 50, 75] percentiles test/val loss: [0.5859 0.8042 1.11  ]

Epoch 38, loss = 0.8402
Mean test/val loss: 0.8763
[25, 50, 75] percentiles test/val loss: [0.5732 0.7859 1.0802]

Epoch 40, loss = 0.8382
Mean test/val loss: 0.8698
[25, 50, 75] percentiles test/val loss: [0.5748 0.7836 1.0704]

New lr: 1e-05
Epoch 42, loss = 0.7778
Mean test/val loss: 0.8272
[25, 50, 75] percentiles test/val loss: [0.5308 0.7354 1.0134]

Epoch 44, loss = 0.7695
Mean test/val loss: 0.8241
[25, 50, 75] percentiles test/val loss: [0.5316 0.7315 1.008 ]

Epoch 46, loss = 0.7641
Mean test/val loss: 0.8227
[25, 50, 75] percentiles test/val loss: [0.5289 0.732  1.0117]

Epoch 48, loss = 0.7597
Mean test/val loss: 0.8218
[25, 50, 75] percentiles test/val loss: [0.5296 0.732  1.0115]

Epoch 50, loss = 0.7557
Mean test/val loss: 0.8210
[25, 50, 75] percentiles test/val loss: [0.5291 0.7347 1.0075]

Epoch 52, loss = 0.7522
Mean test/val loss: 0.8188
[25, 50, 75] percentiles test/val loss: [0.5287 0.731  1.0026]

Epoch 54, loss = 0.7490
Mean test/val loss: 0.8186
[25, 50, 75] percentiles test/val loss: [0.5313 0.7318 1.0117]

Epoch 56, loss = 0.7459
Mean test/val loss: 0.8180
[25, 50, 75] percentiles test/val loss: [0.5264 0.7309 1.0028]

Epoch 58, loss = 0.7431
Mean test/val loss: 0.8179
[25, 50, 75] percentiles test/val loss: [0.5291 0.729  1.0064]

Epoch 60, loss = 0.7404
Mean test/val loss: 0.8180
[25, 50, 75] percentiles test/val loss: [0.5283 0.73   1.0078]

Epoch 62, loss = 0.7376
Mean test/val loss: 0.8164
[25, 50, 75] percentiles test/val loss: [0.5292 0.7302 1.0061]

Epoch 64, loss = 0.7352
Mean test/val loss: 0.8167
[25, 50, 75] percentiles test/val loss: [0.5313 0.7297 1.0046]

Epoch 66, loss = 0.7327
Mean test/val loss: 0.8159
[25, 50, 75] percentiles test/val loss: [0.5258 0.7277 1.0053]

Epoch 68, loss = 0.7303
Mean test/val loss: 0.8158
[25, 50, 75] percentiles test/val loss: [0.5275 0.7293 1.0069]

Epoch 70, loss = 0.7280
Mean test/val loss: 0.8156
[25, 50, 75] percentiles test/val loss: [0.5295 0.7293 1.0072]


Total parameters: 26461808
Total training + validation time: 15.0 hours, 54.0 mins, and 51.900000000001455 secs
Final val loss: 0.815562722383067

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample1050: 1.9555025100708008
dataset_09_28_23 sample7802: 0.7444121837615967
dataset_09_28_23 sample156: 0.7499589323997498
dataset_09_28_23 sample2452: 0.4465441405773163
dataset_09_28_23 sample752: 0.010270889848470688
MSE Loss: 0.781 +- 0.646

Downsampling (200k) Results:
dataset_09_28_23 sample1050-downsampling: 62.448543548583984
dataset_09_28_23 sample156-downsampling: 109.15151977539062
dataset_09_28_23 sample2452-downsampling: 26.74797248840332
dataset_09_28_23 sample752-downsampling: 0.6094887852668762
dataset_09_28_23 sample7802-downsampling: 29.198501586914062
Loss: 45.631 +- 37.34

Removing /scratch/midway3/erschultz/ContactGNNEnergy16downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1050-regular: 61.7924690246582
dataset_09_28_23 sample156-regular: 118.45484924316406
dataset_09_28_23 sample2452-regular: 21.01456069946289
dataset_09_28_23 sample752-regular: 2.1226298809051514
dataset_09_28_23 sample7802-regular: 21.75482940673828
Loss: 45.028 +- 41.549

Removing /scratch/midway3/erschultz/ContactGNNEnergy16regsample

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_10_14_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy7', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=596, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/596', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/596/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/596/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/596/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7ff47ceb64c0>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 14.849 minutes
Number of samples: 5000
Average num edges per graph:  65200.434
Mean degree: [255.   254.73 254.98 ... 255.   255.   254.94] +- [0.   0.96 0.15 ... 0.   0.   0.3 ]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7ff44fc91400>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.3907
Mean test/val loss: 1.2051
[25, 50, 75] percentiles test/val loss: [0.8026 1.1112 1.5221]

Epoch 4, loss = 1.2631
Mean test/val loss: 1.1148
[25, 50, 75] percentiles test/val loss: [0.7525 1.026  1.4083]

Epoch 6, loss = 1.1175
Mean test/val loss: 0.9860
[25, 50, 75] percentiles test/val loss: [0.639  0.9116 1.2257]

Epoch 8, loss = 0.9961
Mean test/val loss: 0.9164
[25, 50, 75] percentiles test/val loss: [0.5942 0.8277 1.1382]

Epoch 10, loss = 0.9358
Mean test/val loss: 0.9191
[25, 50, 75] percentiles test/val loss: [0.6165 0.8407 1.1258]

Epoch 12, loss = 0.8917
Mean test/val loss: 0.9851
[25, 50, 75] percentiles test/val loss: [0.6402 0.901  1.2439]

Epoch 14, loss = 0.8503
Mean test/val loss: 0.8341
[25, 50, 75] percentiles test/val loss: [0.5343 0.7622 1.0433]

Epoch 16, loss = 0.8184
Mean test/val loss: 0.7770
[25, 50, 75] percentiles test/val loss: [0.491  0.6983 0.9577]

Epoch 18, loss = 0.7952
Mean test/val loss: 0.7537
[25, 50, 75] percentiles test/val loss: [0.4699 0.6723 0.9384]

Epoch 20, loss = 0.7758
Mean test/val loss: 0.7241
[25, 50, 75] percentiles test/val loss: [0.4615 0.6555 0.8922]

Epoch 22, loss = 0.7572
Mean test/val loss: 0.7020
[25, 50, 75] percentiles test/val loss: [0.4446 0.631  0.8734]

Epoch 24, loss = 0.7401
Mean test/val loss: 0.6964
[25, 50, 75] percentiles test/val loss: [0.4419 0.6274 0.8774]

Epoch 26, loss = 0.7226
Mean test/val loss: 0.6790
[25, 50, 75] percentiles test/val loss: [0.4326 0.6188 0.8623]

Epoch 28, loss = 0.7092
Mean test/val loss: 0.6799
[25, 50, 75] percentiles test/val loss: [0.4297 0.6179 0.8553]

Epoch 30, loss = 0.6938
Mean test/val loss: 0.6848
[25, 50, 75] percentiles test/val loss: [0.4224 0.6181 0.8898]

Epoch 32, loss = 0.6825
Mean test/val loss: 0.6499
[25, 50, 75] percentiles test/val loss: [0.4207 0.5904 0.8123]

Epoch 34, loss = 0.6698
Mean test/val loss: 0.6501
[25, 50, 75] percentiles test/val loss: [0.415  0.5902 0.8198]

Epoch 36, loss = 0.6625
Mean test/val loss: 0.6501
[25, 50, 75] percentiles test/val loss: [0.4185 0.5947 0.8197]

Epoch 38, loss = 0.6560
Mean test/val loss: 0.6420
[25, 50, 75] percentiles test/val loss: [0.4086 0.5814 0.8127]

Epoch 40, loss = 0.6458
Mean test/val loss: 0.6237
[25, 50, 75] percentiles test/val loss: [0.3984 0.5656 0.782 ]

New lr: 1e-05
Epoch 42, loss = 0.5764
Mean test/val loss: 0.5847
[25, 50, 75] percentiles test/val loss: [0.3727 0.5329 0.7391]

Epoch 44, loss = 0.5655
Mean test/val loss: 0.5811
[25, 50, 75] percentiles test/val loss: [0.3723 0.5329 0.7324]

Epoch 46, loss = 0.5583
Mean test/val loss: 0.5779
[25, 50, 75] percentiles test/val loss: [0.3703 0.5319 0.7273]

Epoch 48, loss = 0.5519
Mean test/val loss: 0.5757
[25, 50, 75] percentiles test/val loss: [0.3671 0.5314 0.7278]

Epoch 50, loss = 0.5469
Mean test/val loss: 0.5749
[25, 50, 75] percentiles test/val loss: [0.367  0.5298 0.7284]

Epoch 52, loss = 0.5418
Mean test/val loss: 0.5737
[25, 50, 75] percentiles test/val loss: [0.3689 0.5265 0.7205]

Epoch 54, loss = 0.5372
Mean test/val loss: 0.5731
[25, 50, 75] percentiles test/val loss: [0.3671 0.525  0.7269]

Epoch 56, loss = 0.5333
Mean test/val loss: 0.5728
[25, 50, 75] percentiles test/val loss: [0.3664 0.5253 0.7226]

Epoch 58, loss = 0.5293
Mean test/val loss: 0.5707
[25, 50, 75] percentiles test/val loss: [0.3656 0.5208 0.7179]

Epoch 60, loss = 0.5258
Mean test/val loss: 0.5695
[25, 50, 75] percentiles test/val loss: [0.3628 0.5276 0.7165]

Epoch 62, loss = 0.5224
Mean test/val loss: 0.5714
[25, 50, 75] percentiles test/val loss: [0.3664 0.5216 0.722 ]

Epoch 64, loss = 0.5187
Mean test/val loss: 0.5687
[25, 50, 75] percentiles test/val loss: [0.3652 0.5213 0.7121]

Epoch 66, loss = 0.5154
Mean test/val loss: 0.5703
[25, 50, 75] percentiles test/val loss: [0.3629 0.5204 0.717 ]

Epoch 68, loss = 0.5129
Mean test/val loss: 0.5699
[25, 50, 75] percentiles test/val loss: [0.3655 0.5256 0.7196]

Epoch 70, loss = 0.5097
Mean test/val loss: 0.5666
[25, 50, 75] percentiles test/val loss: [0.361  0.5199 0.7131]


Total parameters: 51479472
Total training + validation time: 10.0 hours, 16.0 mins, and 34.30000000000291 secs
Final val loss: 0.5666347522437573

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_10_14_23 sample981: 0.42094919085502625
dataset_10_14_23 sample324: 0.21017692983150482
dataset_10_14_23 sample3464: 1.1126127243041992
dataset_10_14_23 sample2834: 0.5782052278518677
dataset_10_14_23 sample1936: 0.40382465720176697
MSE_log: 0.545 +- 0.307

Downsampling (200k) Results:

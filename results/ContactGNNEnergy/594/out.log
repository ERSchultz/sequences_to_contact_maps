#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_10_14_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy5', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=594, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/594', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/594/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/594/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/594/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7f2dacc194c0>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=2, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 13.363 minutes
Number of samples: 5000
Average num edges per graph:  65200.434
Mean degree: [255.   254.73 254.98 ... 255.   255.   254.94] +- [0.   0.96 0.15 ... 0.   0.   0.3 ]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [1640, 1672, 3464, 831, 1651, 2678, 861, 3660, 267, 810, 2325, 2890, 3805, 4444, 2956, 1308, 3942, 2151, 3235, 1362, 566, 1440, 3319, 161, 206, 459, 3674, 4352, 2576, 4555, 753, 2322, 275, 745, 2876, 2221, 1309, 2628, 2363, 1906, 2834, 3684, 166, 3987, 3663, 1549, 981, 3237, 803, 1932, 3661, 4977, 4056, 255, 2787, 3760, 4875, 4932, 1511, 3912, 2913, 2064, 3, 64, 2434, 930, 795, 1006, 727, 672, 2695, 338, 111, 787, 1626, 1407, 952, 833, 4570, 1725, 1798, 1787, 2072, 3457, 544, 3195, 3861, 3343, 1300, 3110, 3283, 4990, 4966, 4092, 1475, 1589, 367, 1972, 4641, 1487, 1184, 4058]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f2d7f9c7220>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.9176
Mean test/val loss: 1.7854
[25, 50, 75] percentiles test/val loss: [1.2772 1.6783 2.2531]

Epoch 4, loss = 1.7752
Mean test/val loss: 1.6711
[25, 50, 75] percentiles test/val loss: [1.2143 1.6065 2.1051]

Epoch 6, loss = 1.6888
Mean test/val loss: 1.6617
[25, 50, 75] percentiles test/val loss: [1.186  1.5786 2.0347]

Epoch 8, loss = 1.6437
Mean test/val loss: 1.5794
[25, 50, 75] percentiles test/val loss: [1.1363 1.4993 1.935 ]

Epoch 10, loss = 1.6027
Mean test/val loss: 1.5425
[25, 50, 75] percentiles test/val loss: [1.1212 1.4639 1.9156]

Epoch 12, loss = 1.5242
Mean test/val loss: 1.4374
[25, 50, 75] percentiles test/val loss: [1.0277 1.3901 1.7836]

Epoch 14, loss = 1.4519
Mean test/val loss: 1.3959
[25, 50, 75] percentiles test/val loss: [0.992  1.3532 1.7326]

Epoch 16, loss = 1.3162
Mean test/val loss: 1.2320
[25, 50, 75] percentiles test/val loss: [0.8318 1.1331 1.5225]

Epoch 18, loss = 1.2345
Mean test/val loss: 1.2087
[25, 50, 75] percentiles test/val loss: [0.8337 1.1309 1.5014]

Epoch 20, loss = 1.1858
Mean test/val loss: 1.1314
[25, 50, 75] percentiles test/val loss: [0.7443 1.0351 1.4081]

Epoch 22, loss = 1.1544
Mean test/val loss: 1.1035
[25, 50, 75] percentiles test/val loss: [0.7472 1.0052 1.3741]

Epoch 24, loss = 1.1246
Mean test/val loss: 1.0831
[25, 50, 75] percentiles test/val loss: [0.7255 0.9875 1.3387]

Epoch 26, loss = 1.1008
Mean test/val loss: 1.0543
[25, 50, 75] percentiles test/val loss: [0.6819 0.963  1.3321]

Epoch 28, loss = 1.0881
Mean test/val loss: 1.0515
[25, 50, 75] percentiles test/val loss: [0.6803 0.9531 1.3144]

Epoch 30, loss = 1.0601
Mean test/val loss: 1.0556
[25, 50, 75] percentiles test/val loss: [0.7055 0.9564 1.3157]

Epoch 32, loss = 1.0483
Mean test/val loss: 1.0275
[25, 50, 75] percentiles test/val loss: [0.6678 0.9527 1.2909]

Epoch 34, loss = 1.0328
Mean test/val loss: 1.0045
[25, 50, 75] percentiles test/val loss: [0.6433 0.9156 1.278 ]

Epoch 36, loss = 1.0172
Mean test/val loss: 0.9846
[25, 50, 75] percentiles test/val loss: [0.6287 0.9043 1.2224]

Epoch 38, loss = 1.0026
Mean test/val loss: 0.9877
[25, 50, 75] percentiles test/val loss: [0.6379 0.8993 1.2353]

Epoch 40, loss = 0.9888
Mean test/val loss: 0.9570
[25, 50, 75] percentiles test/val loss: [0.6072 0.87   1.1973]

New lr: 1e-05
Epoch 42, loss = 0.9051
Mean test/val loss: 0.9136
[25, 50, 75] percentiles test/val loss: [0.5718 0.8357 1.142 ]

Epoch 44, loss = 0.8915
Mean test/val loss: 0.9086
[25, 50, 75] percentiles test/val loss: [0.5685 0.8327 1.1378]

Epoch 46, loss = 0.8813
Mean test/val loss: 0.9030
[25, 50, 75] percentiles test/val loss: [0.5643 0.8263 1.1279]

Epoch 48, loss = 0.8731
Mean test/val loss: 0.9001
[25, 50, 75] percentiles test/val loss: [0.5672 0.8173 1.131 ]

Epoch 50, loss = 0.8650
Mean test/val loss: 0.8992
[25, 50, 75] percentiles test/val loss: [0.5626 0.8149 1.1182]

Epoch 52, loss = 0.8575
Mean test/val loss: 0.8971
[25, 50, 75] percentiles test/val loss: [0.5673 0.8128 1.1175]

Epoch 54, loss = 0.8506
Mean test/val loss: 0.8935
[25, 50, 75] percentiles test/val loss: [0.5575 0.81   1.1205]

Epoch 56, loss = 0.8444
Mean test/val loss: 0.8918
[25, 50, 75] percentiles test/val loss: [0.554  0.8104 1.107 ]

Epoch 58, loss = 0.8377
Mean test/val loss: 0.8887
[25, 50, 75] percentiles test/val loss: [0.5573 0.8078 1.1141]

Epoch 60, loss = 0.8320
Mean test/val loss: 0.8930
[25, 50, 75] percentiles test/val loss: [0.5592 0.8174 1.1077]

Epoch 62, loss = 0.8260
Mean test/val loss: 0.8861
[25, 50, 75] percentiles test/val loss: [0.5536 0.8047 1.1008]

Epoch 64, loss = 0.8206
Mean test/val loss: 0.8855
[25, 50, 75] percentiles test/val loss: [0.5533 0.8047 1.0995]

Epoch 66, loss = 0.8153
Mean test/val loss: 0.8869
[25, 50, 75] percentiles test/val loss: [0.5558 0.8054 1.0976]

Epoch 68, loss = 0.8101
Mean test/val loss: 0.8875
[25, 50, 75] percentiles test/val loss: [0.5562 0.797  1.0926]

Epoch 70, loss = 0.8053
Mean test/val loss: 0.8869
[25, 50, 75] percentiles test/val loss: [0.5552 0.8008 1.1011]


Total parameters: 51478960
Total training + validation time: 10.0 hours, 17.0 mins, and 9.0 secs
Final val loss: 0.8868643927872181

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_10_14_23 sample981: 0.7501589059829712
dataset_10_14_23 sample324: 0.31813985109329224
dataset_10_14_23 sample3464: 2.0662684440612793
dataset_10_14_23 sample2834: 0.6968352794647217
dataset_10_14_23 sample1936: 0.6440274715423584
MSE_log: 0.895 +- 0.605

Downsampling (200k) Results:

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy4', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=444, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/444', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/444/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/444/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/444/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fc064147310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=2, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 15.702 minutes
Number of samples: 5000
Average num edges per graph:  61627.9772
Mean degree: [245.68 254.88 219.23 ... 251.09 215.5  255.  ] +- [ 9.13  0.37 26.94 ...  4.77 29.22  0.  ]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fc02a048400>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.9306
Mean test/val loss: 0.9321
[25, 50, 75] percentiles test/val loss: [0.4058 0.7575 1.242 ]

Epoch 4, loss = 0.8648
Mean test/val loss: 0.8294
[25, 50, 75] percentiles test/val loss: [0.352  0.6511 1.072 ]

Epoch 6, loss = 0.6625
Mean test/val loss: 0.6778
[25, 50, 75] percentiles test/val loss: [0.371  0.5442 0.8267]

Epoch 8, loss = 0.6020
Mean test/val loss: 0.5904
[25, 50, 75] percentiles test/val loss: [0.2818 0.463  0.7365]

Epoch 10, loss = 0.5804
Mean test/val loss: 0.5913
[25, 50, 75] percentiles test/val loss: [0.2747 0.4745 0.7631]

Epoch 12, loss = 0.5611
Mean test/val loss: 0.5835
[25, 50, 75] percentiles test/val loss: [0.2749 0.4713 0.7435]

Epoch 14, loss = 0.5502
Mean test/val loss: 0.5521
[25, 50, 75] percentiles test/val loss: [0.2601 0.431  0.7025]

Epoch 16, loss = 0.5381
Mean test/val loss: 0.5569
[25, 50, 75] percentiles test/val loss: [0.2662 0.4339 0.7132]

Epoch 18, loss = 0.5318
Mean test/val loss: 0.5491
[25, 50, 75] percentiles test/val loss: [0.2589 0.4395 0.7094]

Epoch 20, loss = 0.5198
Mean test/val loss: 0.5496
[25, 50, 75] percentiles test/val loss: [0.2664 0.4147 0.6933]

Epoch 22, loss = 0.5082
Mean test/val loss: 0.5328
[25, 50, 75] percentiles test/val loss: [0.242  0.4113 0.6785]

Epoch 24, loss = 0.4962
Mean test/val loss: 0.5308
[25, 50, 75] percentiles test/val loss: [0.251  0.4228 0.6688]

Epoch 26, loss = 0.4857
Mean test/val loss: 0.5229
[25, 50, 75] percentiles test/val loss: [0.2438 0.404  0.6634]

Epoch 28, loss = 0.4781
Mean test/val loss: 0.5129
[25, 50, 75] percentiles test/val loss: [0.2365 0.4035 0.6521]

Epoch 30, loss = 0.4712
Mean test/val loss: 0.4989
[25, 50, 75] percentiles test/val loss: [0.2278 0.392  0.6431]

Epoch 32, loss = 0.4639
Mean test/val loss: 0.5050
[25, 50, 75] percentiles test/val loss: [0.2402 0.4031 0.6357]

Epoch 34, loss = 0.4590
Mean test/val loss: 0.4926
[25, 50, 75] percentiles test/val loss: [0.227  0.3873 0.6369]

Epoch 36, loss = 0.4535
Mean test/val loss: 0.5000
[25, 50, 75] percentiles test/val loss: [0.2309 0.3933 0.6338]

Epoch 38, loss = 0.4455
Mean test/val loss: 0.4795
[25, 50, 75] percentiles test/val loss: [0.2197 0.3721 0.6244]

Epoch 40, loss = 0.4408
Mean test/val loss: 0.4775
[25, 50, 75] percentiles test/val loss: [0.2231 0.3782 0.6163]

New lr: 1e-05
Epoch 42, loss = 0.4062
Mean test/val loss: 0.4566
[25, 50, 75] percentiles test/val loss: [0.2128 0.361  0.5999]

Epoch 44, loss = 0.3999
Mean test/val loss: 0.4538
[25, 50, 75] percentiles test/val loss: [0.2112 0.3563 0.5883]

Epoch 46, loss = 0.3958
Mean test/val loss: 0.4519
[25, 50, 75] percentiles test/val loss: [0.2097 0.3583 0.5958]

Epoch 48, loss = 0.3924
Mean test/val loss: 0.4490
[25, 50, 75] percentiles test/val loss: [0.2097 0.3551 0.5869]

Epoch 50, loss = 0.3893
Mean test/val loss: 0.4481
[25, 50, 75] percentiles test/val loss: [0.2081 0.3569 0.5818]

Epoch 52, loss = 0.3866
Mean test/val loss: 0.4483
[25, 50, 75] percentiles test/val loss: [0.2107 0.3534 0.5858]

Epoch 54, loss = 0.3841
Mean test/val loss: 0.4482
[25, 50, 75] percentiles test/val loss: [0.2088 0.3538 0.5852]

Epoch 56, loss = 0.3818
Mean test/val loss: 0.4461
[25, 50, 75] percentiles test/val loss: [0.2067 0.3512 0.5794]

Epoch 58, loss = 0.3797
Mean test/val loss: 0.4477
[25, 50, 75] percentiles test/val loss: [0.207  0.3521 0.5731]

Epoch 60, loss = 0.3777
Mean test/val loss: 0.4468
[25, 50, 75] percentiles test/val loss: [0.2077 0.3507 0.5841]

Epoch 62, loss = 0.3758
Mean test/val loss: 0.4462
[25, 50, 75] percentiles test/val loss: [0.2068 0.3528 0.5794]

Epoch 64, loss = 0.3740
Mean test/val loss: 0.4469
[25, 50, 75] percentiles test/val loss: [0.207  0.3542 0.5783]

Epoch 66, loss = 0.3724
Mean test/val loss: 0.4442
[25, 50, 75] percentiles test/val loss: [0.2063 0.35   0.574 ]

Epoch 68, loss = 0.3708
Mean test/val loss: 0.4440
[25, 50, 75] percentiles test/val loss: [0.2073 0.3498 0.5703]

Epoch 70, loss = 0.3692
Mean test/val loss: 0.4448
[25, 50, 75] percentiles test/val loss: [0.2044 0.3531 0.5773]

Epoch 72, loss = 0.3677
Mean test/val loss: 0.4436
[25, 50, 75] percentiles test/val loss: [0.2061 0.3487 0.5722]

Epoch 74, loss = 0.3664
Mean test/val loss: 0.4424
[25, 50, 75] percentiles test/val loss: [0.2037 0.347  0.5725]

Epoch 76, loss = 0.3649
Mean test/val loss: 0.4433
[25, 50, 75] percentiles test/val loss: [0.2055 0.3478 0.5699]

Epoch 78, loss = 0.3636
Mean test/val loss: 0.4433
[25, 50, 75] percentiles test/val loss: [0.2041 0.3482 0.5729]

Epoch 80, loss = 0.3624
Mean test/val loss: 0.4410
[25, 50, 75] percentiles test/val loss: [0.2035 0.3468 0.5715]


Total parameters: 26461744
Total training + validation time: 7.0 hours, 31.0 mins, and 52.099999999998545 secs
Final val loss: 0.44096232745796443

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_04_28_23 sample981: 0.7297148108482361
dataset_04_28_23 sample324: 0.8735318183898926
dataset_04_28_23 sample3464: 0.6313788294792175
dataset_04_28_23 sample2834: 0.7086916565895081
dataset_04_28_23 sample1936: 0.34157854318618774
Loss: 0.657 +- 0.176

Downsampling (40%) Results:
dataset_04_28_23 sample1936-downsampling: 9.437143325805664
dataset_04_28_23 sample2834-downsampling: 8.807238578796387
dataset_04_28_23 sample324-downsampling: 13.80003547668457
dataset_04_28_23 sample3464-downsampling: 11.905323028564453
dataset_04_28_23 sample981-downsampling: 22.8936767578125
Loss: 13.369 +- 5.086

Removing /scratch/midway3/erschultz/ContactGNNEnergy4downsample
Original sampling (100%) Results:
dataset_04_28_23 sample1936-regular: 8.983748435974121
dataset_04_28_23 sample2834-regular: 8.92002010345459
dataset_04_28_23 sample324-regular: 13.419355392456055
dataset_04_28_23 sample3464-regular: 11.084928512573242
dataset_04_28_23 sample981-regular: 12.280344009399414
Loss: 10.938 +- 1.782

Removing /scratch/midway3/erschultz/ContactGNNEnergy4regsample

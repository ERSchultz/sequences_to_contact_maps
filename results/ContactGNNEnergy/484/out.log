#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy0', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=484, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/484', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/484/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/484/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/484/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fa826570310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 20.654 minutes
Number of samples: 5000
Average num edges per graph:  61627.9772
Mean degree: [245.68 254.88 219.23 ... 251.09 215.5  255.  ] +- [ 9.13  0.37 26.94 ...  4.77 29.22  0.  ]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fa7e135d340>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.5665
Mean test/val loss: 0.5472
[25, 50, 75] percentiles test/val loss: [0.2651 0.4491 0.6856]

Epoch 4, loss = 0.4911
Mean test/val loss: 0.5152
[25, 50, 75] percentiles test/val loss: [0.2433 0.4013 0.6417]

Epoch 6, loss = 0.4656
Mean test/val loss: 0.4514
[25, 50, 75] percentiles test/val loss: [0.2039 0.3474 0.5579]

Epoch 8, loss = 0.4322
Mean test/val loss: 0.4255
[25, 50, 75] percentiles test/val loss: [0.1944 0.3289 0.526 ]

Epoch 10, loss = 0.4061
Mean test/val loss: 0.3986
[25, 50, 75] percentiles test/val loss: [0.1955 0.3112 0.4884]

Epoch 12, loss = 0.3840
Mean test/val loss: 0.3783
[25, 50, 75] percentiles test/val loss: [0.1798 0.3076 0.4604]

Epoch 14, loss = 0.3664
Mean test/val loss: 0.3634
[25, 50, 75] percentiles test/val loss: [0.1694 0.2821 0.438 ]

Epoch 16, loss = 0.3543
Mean test/val loss: 0.3835
[25, 50, 75] percentiles test/val loss: [0.2123 0.3029 0.453 ]

Epoch 18, loss = 0.3416
Mean test/val loss: 0.3886
[25, 50, 75] percentiles test/val loss: [0.1959 0.324  0.4688]

Epoch 20, loss = 0.3309
Mean test/val loss: 0.3349
[25, 50, 75] percentiles test/val loss: [0.1627 0.2656 0.4003]

Epoch 22, loss = 0.3172
Mean test/val loss: 0.3311
[25, 50, 75] percentiles test/val loss: [0.163  0.2619 0.399 ]

Epoch 24, loss = 0.3100
Mean test/val loss: 0.3270
[25, 50, 75] percentiles test/val loss: [0.1585 0.2576 0.39  ]

Epoch 26, loss = 0.3025
Mean test/val loss: 0.3166
[25, 50, 75] percentiles test/val loss: [0.1549 0.2495 0.3889]

Epoch 28, loss = 0.2957
Mean test/val loss: 0.3079
[25, 50, 75] percentiles test/val loss: [0.1499 0.244  0.3809]

Epoch 30, loss = 0.2885
Mean test/val loss: 0.3140
[25, 50, 75] percentiles test/val loss: [0.1511 0.2487 0.3846]

Epoch 32, loss = 0.2837
Mean test/val loss: 0.3342
[25, 50, 75] percentiles test/val loss: [0.1833 0.27   0.3947]

Epoch 34, loss = 0.2772
Mean test/val loss: 0.3090
[25, 50, 75] percentiles test/val loss: [0.1502 0.2424 0.3747]

Epoch 36, loss = 0.2730
Mean test/val loss: 0.3079
[25, 50, 75] percentiles test/val loss: [0.1503 0.2435 0.3695]

Epoch 38, loss = 0.2696
Mean test/val loss: 0.3013
[25, 50, 75] percentiles test/val loss: [0.1414 0.2346 0.3639]

Epoch 40, loss = 0.2655
Mean test/val loss: 0.3040
[25, 50, 75] percentiles test/val loss: [0.1523 0.2404 0.3637]

New lr: 1e-05
Epoch 42, loss = 0.2399
Mean test/val loss: 0.2776
[25, 50, 75] percentiles test/val loss: [0.1311 0.2139 0.3373]

Epoch 44, loss = 0.2363
Mean test/val loss: 0.2762
[25, 50, 75] percentiles test/val loss: [0.1308 0.2125 0.3337]

Epoch 46, loss = 0.2338
Mean test/val loss: 0.2753
[25, 50, 75] percentiles test/val loss: [0.13   0.2136 0.3324]

Epoch 48, loss = 0.2317
Mean test/val loss: 0.2744
[25, 50, 75] percentiles test/val loss: [0.1293 0.211  0.33  ]

Epoch 50, loss = 0.2299
Mean test/val loss: 0.2742
[25, 50, 75] percentiles test/val loss: [0.1297 0.2113 0.3301]

Epoch 52, loss = 0.2283
Mean test/val loss: 0.2735
[25, 50, 75] percentiles test/val loss: [0.1279 0.2078 0.329 ]

Epoch 54, loss = 0.2268
Mean test/val loss: 0.2735
[25, 50, 75] percentiles test/val loss: [0.1268 0.2108 0.3308]

Epoch 56, loss = 0.2255
Mean test/val loss: 0.2726
[25, 50, 75] percentiles test/val loss: [0.1263 0.2079 0.3306]

Epoch 58, loss = 0.2243
Mean test/val loss: 0.2733
[25, 50, 75] percentiles test/val loss: [0.1283 0.2097 0.3254]

Epoch 60, loss = 0.2231
Mean test/val loss: 0.2724
[25, 50, 75] percentiles test/val loss: [0.1256 0.2086 0.3275]

Epoch 62, loss = 0.2220
Mean test/val loss: 0.2718
[25, 50, 75] percentiles test/val loss: [0.1272 0.2081 0.3275]

Epoch 64, loss = 0.2210
Mean test/val loss: 0.2722
[25, 50, 75] percentiles test/val loss: [0.125  0.2076 0.328 ]

Epoch 66, loss = 0.2201
Mean test/val loss: 0.2712
[25, 50, 75] percentiles test/val loss: [0.1253 0.207  0.3299]

Epoch 68, loss = 0.2192
Mean test/val loss: 0.2718
[25, 50, 75] percentiles test/val loss: [0.1248 0.2072 0.3249]

Epoch 70, loss = 0.2184
Mean test/val loss: 0.2717
[25, 50, 75] percentiles test/val loss: [0.1246 0.2073 0.325 ]

Epoch 72, loss = 0.2175
Mean test/val loss: 0.2719
[25, 50, 75] percentiles test/val loss: [0.1257 0.2059 0.3285]

Epoch 74, loss = 0.2167
Mean test/val loss: 0.2711
[25, 50, 75] percentiles test/val loss: [0.1247 0.2056 0.3259]

Epoch 76, loss = 0.2160
Mean test/val loss: 0.2707
[25, 50, 75] percentiles test/val loss: [0.1244 0.2039 0.3281]

Epoch 78, loss = 0.2152
Mean test/val loss: 0.2708
[25, 50, 75] percentiles test/val loss: [0.1239 0.2054 0.3245]

Epoch 80, loss = 0.2145
Mean test/val loss: 0.2707
[25, 50, 75] percentiles test/val loss: [0.124  0.2052 0.325 ]


Total parameters: 26462000
Total training + validation time: 8.0 hours, 1.0 mins, and 55.5 secs
Final val loss: 0.2706830841302872

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_04_28_23 sample981: 0.5186769962310791
dataset_04_28_23 sample324: 0.6715510487556458
dataset_04_28_23 sample3464: 0.2738015353679657
dataset_04_28_23 sample2834: 0.4019499123096466
dataset_04_28_23 sample1936: 0.20192459225654602
MSE Loss: 0.414 +- 0.169

Downsampling (40%) Results:
dataset_04_28_23 sample1936-downsampling: 8.250802993774414
dataset_04_28_23 sample2834-downsampling: 6.312061786651611
dataset_04_28_23 sample324-downsampling: 11.956193923950195
dataset_04_28_23 sample3464-downsampling: 6.570622444152832
dataset_04_28_23 sample981-downsampling: 10.443111419677734
Loss: 8.707 +- 2.195

Removing /scratch/midway3/erschultz/ContactGNNEnergy0downsample
Original sampling (100%) Results:
dataset_04_28_23 sample1936-regular: 7.86110782623291
dataset_04_28_23 sample2834-regular: 6.072145462036133
dataset_04_28_23 sample324-regular: 13.284421920776367
dataset_04_28_23 sample3464-regular: 10.73997688293457
dataset_04_28_23 sample981-regular: 10.045694351196289
Loss: 9.601 +- 2.472

Removing /scratch/midway3/erschultz/ContactGNNEnergy0regsample

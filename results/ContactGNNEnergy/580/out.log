#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_10_14_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy10', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=580, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/580', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/580/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/580/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/580/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7fbbecbbe550>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 44.183 minutes
Number of samples: 10000
Average num edges per graph:  65198.2786
Mean degree: [255.   254.73 254.98 ... 255.   255.   255.  ] +- [0.   0.96 0.15 ... 0.   0.   0.  ]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [1736, 8603, 4487, 7484, 1944, 6883, 5242, 5402, 2741, 5051, 6509, 7138, 316, 8888, 2400, 8268, 478, 5626, 4834, 8222, 2775, 7297, 9366, 3542, 9486, 5574, 1020, 9892, 5740, 1800, 7753, 2160, 9690, 201, 7926, 1469, 3437, 9939, 6550, 5567, 2452, 3201, 4402, 3181, 5685, 1790, 5045, 8122, 7296, 768, 5261, 2576, 6643, 4781, 1945, 5516, 8922, 8796, 6633, 7263, 9807, 7993, 4712, 1640, 1644, 2131, 8519, 2955, 203, 6356, 8148, 8107, 6575, 4769, 8354, 995, 8881, 972, 7933, 3869, 9749, 6260, 6269, 6134, 2997, 674, 5447, 8738, 7028, 53, 3314, 8398, 8061, 7264, 7488, 1001, 2594, 4870, 8312, 4053, 6041, 1680]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fbbc2a56700>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.6650
Mean test/val loss: 1.5547
[25, 50, 75] percentiles test/val loss: [1.0763 1.4635 1.8988]

Epoch 4, loss = 1.2937
Mean test/val loss: 1.2661
[25, 50, 75] percentiles test/val loss: [0.8278 1.1513 1.543 ]

Epoch 6, loss = 1.1870
Mean test/val loss: 1.3377
[25, 50, 75] percentiles test/val loss: [0.9079 1.2189 1.6556]

Epoch 8, loss = 1.1320
Mean test/val loss: 1.1235
[25, 50, 75] percentiles test/val loss: [0.7108 1.0106 1.3781]

Epoch 10, loss = 1.0936
Mean test/val loss: 1.1121
[25, 50, 75] percentiles test/val loss: [0.6937 0.9975 1.3641]

Epoch 12, loss = 1.0647
Mean test/val loss: 1.0621
[25, 50, 75] percentiles test/val loss: [0.6776 0.9427 1.3111]

Epoch 14, loss = 1.0429
Mean test/val loss: 1.0581
[25, 50, 75] percentiles test/val loss: [0.6706 0.9485 1.2998]

Epoch 16, loss = 1.0209
Mean test/val loss: 1.0333
[25, 50, 75] percentiles test/val loss: [0.6572 0.9203 1.268 ]

Epoch 18, loss = 1.0001
Mean test/val loss: 1.0057
[25, 50, 75] percentiles test/val loss: [0.6219 0.8955 1.2488]

Epoch 20, loss = 0.9826
Mean test/val loss: 1.0027
[25, 50, 75] percentiles test/val loss: [0.6326 0.8996 1.2345]

Epoch 22, loss = 0.9670
Mean test/val loss: 0.9856
[25, 50, 75] percentiles test/val loss: [0.6306 0.8851 1.2104]

Epoch 24, loss = 0.9527
Mean test/val loss: 0.9679
[25, 50, 75] percentiles test/val loss: [0.6085 0.8639 1.1767]

Epoch 26, loss = 0.9361
Mean test/val loss: 0.9469
[25, 50, 75] percentiles test/val loss: [0.5983 0.8373 1.1608]

Epoch 28, loss = 0.9232
Mean test/val loss: 0.9726
[25, 50, 75] percentiles test/val loss: [0.6146 0.858  1.1933]

Epoch 30, loss = 0.9145
Mean test/val loss: 0.9555
[25, 50, 75] percentiles test/val loss: [0.609  0.8522 1.1657]

Epoch 32, loss = 0.9011
Mean test/val loss: 0.9376
[25, 50, 75] percentiles test/val loss: [0.5942 0.8431 1.1443]

Epoch 34, loss = 0.8887
Mean test/val loss: 0.9176
[25, 50, 75] percentiles test/val loss: [0.5801 0.8137 1.1213]

Epoch 36, loss = 0.8802
Mean test/val loss: 0.9172
[25, 50, 75] percentiles test/val loss: [0.5755 0.816  1.1238]

Epoch 38, loss = 0.8667
Mean test/val loss: 0.9147
[25, 50, 75] percentiles test/val loss: [0.5783 0.8202 1.1212]

Epoch 40, loss = 0.8585
Mean test/val loss: 0.9014
[25, 50, 75] percentiles test/val loss: [0.5604 0.7989 1.1067]

New lr: 1e-05
Epoch 42, loss = 0.7789
Mean test/val loss: 0.8546
[25, 50, 75] percentiles test/val loss: [0.5317 0.7548 1.0495]

Epoch 44, loss = 0.7664
Mean test/val loss: 0.8520
[25, 50, 75] percentiles test/val loss: [0.5304 0.7534 1.0475]

Epoch 46, loss = 0.7576
Mean test/val loss: 0.8512
[25, 50, 75] percentiles test/val loss: [0.5305 0.7508 1.0391]

Epoch 48, loss = 0.7497
Mean test/val loss: 0.8490
[25, 50, 75] percentiles test/val loss: [0.5309 0.7487 1.0383]

Epoch 50, loss = 0.7427
Mean test/val loss: 0.8475
[25, 50, 75] percentiles test/val loss: [0.5256 0.7496 1.0381]

Epoch 52, loss = 0.7363
Mean test/val loss: 0.8498
[25, 50, 75] percentiles test/val loss: [0.5278 0.7476 1.0352]

Epoch 54, loss = 0.7301
Mean test/val loss: 0.8479
[25, 50, 75] percentiles test/val loss: [0.5288 0.7487 1.0351]

Epoch 56, loss = 0.7244
Mean test/val loss: 0.8489
[25, 50, 75] percentiles test/val loss: [0.5231 0.7461 1.0315]

Epoch 58, loss = 0.7189
Mean test/val loss: 0.8464
[25, 50, 75] percentiles test/val loss: [0.5247 0.7445 1.0291]

Epoch 60, loss = 0.7136
Mean test/val loss: 0.8467
[25, 50, 75] percentiles test/val loss: [0.5262 0.7461 1.0341]

Epoch 62, loss = 0.7086
Mean test/val loss: 0.8482
[25, 50, 75] percentiles test/val loss: [0.5223 0.7439 1.0341]

Epoch 64, loss = 0.7038
Mean test/val loss: 0.8475
[25, 50, 75] percentiles test/val loss: [0.5228 0.7436 1.027 ]

Epoch 66, loss = 0.6992
Mean test/val loss: 0.8469
[25, 50, 75] percentiles test/val loss: [0.5234 0.7396 1.0252]

Epoch 68, loss = 0.6947
Mean test/val loss: 0.8469
[25, 50, 75] percentiles test/val loss: [0.5226 0.7446 1.0246]

Epoch 70, loss = 0.6902
Mean test/val loss: 0.8483
[25, 50, 75] percentiles test/val loss: [0.5208 0.7412 1.0309]

Epoch 72, loss = 0.6862
Mean test/val loss: 0.8468
[25, 50, 75] percentiles test/val loss: [0.5226 0.7441 1.0286]

Epoch 74, loss = 0.6823
Mean test/val loss: 0.8497
[25, 50, 75] percentiles test/val loss: [0.5211 0.7402 1.033 ]

Epoch 76, loss = 0.6782
Mean test/val loss: 0.8516
[25, 50, 75] percentiles test/val loss: [0.5216 0.7447 1.0284]

Epoch 78, loss = 0.6746
Mean test/val loss: 0.8470
[25, 50, 75] percentiles test/val loss: [0.5216 0.74   1.0256]

Epoch 80, loss = 0.6708
Mean test/val loss: 0.8503
[25, 50, 75] percentiles test/val loss: [0.5213 0.7407 1.029 ]


Total parameters: 51479472
Total training + validation time: 22.0 hours, 32.0 mins, and 50.30000000000291 secs
Final val loss: 0.8503044866770506

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_10_14_23 sample1050: 0.20256014168262482
dataset_10_14_23 sample7802: 0.7866159677505493
dataset_10_14_23 sample156: 0.4595208764076233
dataset_10_14_23 sample2452: 0.5649392604827881
dataset_10_14_23 sample752: 0.5879973769187927
MSE_log: 0.52 +- 0.191

Downsampling (200k) Results:

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_12_06_23_max_ent_all'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy15', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=20, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[20], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, lambda3=1, grad_clip=None, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', save_early_stop=False, model_type='ContactGNNEnergy', id=720, pretrain_id=710, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', output_clip=None, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, bonded_path='optimize_grid_b_200_v_8_spheroid_1.5', kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/720', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/720/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/720/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/720/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=2, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), eig=False, criterion=<function mse_log at 0x7f96d09b54c0>, cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 0.69 minutes
Number of samples: 227
Average num edges per graph:  65271.48898678414
Mean degree: [255.   255.   255.   255.   254.98 254.95 255.   255.   255.   254.68
 254.92 255.   255.   254.75 255.   254.91 255.   254.86 255.   254.98
 255.   255.   255.   255.   255.   255.   255.   255.   255.   255.
 255.   254.95 255.   254.97 255.   255.   255.   254.98 255.   255.
 255.   255.   255.   254.81 255.   255.   255.   254.96 254.98 254.97
 255.   255.   254.99 255.   254.94 255.   255.   255.   254.86 255.
 254.97 255.   255.   255.   255.   255.   255.   255.   254.98 254.99
 255.   255.   255.   255.   254.91 254.93 254.91 255.   254.98 255.
 254.9  254.94 254.95 254.77 255.   254.98 254.99 254.3  255.   255.
 254.99 254.85 255.   254.97 255.   255.   255.   254.99 255.   255.
 255.   255.   254.98 255.   254.99 255.   255.   254.93 254.85 255.
 255.   255.   255.   254.96 254.08 253.78 254.87 255.   255.   255.
 255.   255.   255.   255.   255.   255.   255.   255.   255.   255.
 255.   255.   255.   255.   255.   255.   255.   255.   255.   255.
 254.95 255.   255.   255.   254.96 255.   254.98 255.   255.   255.
 255.   255.   255.   255.   255.   255.   255.   255.   255.   255.
 255.   255.   255.   255.   255.   255.   255.   255.   254.99 255.
 255.   255.   254.98 255.   255.   255.   255.   255.   255.   255.
 255.   254.98 255.   254.81 254.99 255.   255.   254.83 255.   254.99
 255.   255.   255.   254.98 255.   254.99 255.   254.99 255.   255.
 255.   255.   255.   254.99 254.84 254.98 255.   255.   255.   254.84
 254.94 254.93 255.   255.   255.   255.   254.96 254.99 254.98 254.98
 254.47 255.   255.   254.96 254.99 254.96 254.99] +- [0.   0.   0.   0.   0.12 0.23 0.   0.   0.   0.65 0.31 0.   0.   0.57
 0.   0.33 0.   0.45 0.   0.12 0.   0.   0.   0.   0.   0.   0.   0.
 0.   0.   0.   0.25 0.   0.17 0.   0.   0.   0.18 0.   0.   0.   0.
 0.   0.53 0.   0.   0.   0.23 0.15 0.17 0.   0.   0.09 0.   0.26 0.
 0.   0.   0.5  0.   0.17 0.   0.   0.   0.   0.   0.   0.   0.12 0.09
 0.   0.   0.   0.   0.33 0.27 0.31 0.   0.12 0.   0.3  0.27 0.21 0.6
 0.   0.18 0.09 1.1  0.   0.   0.09 0.39 0.   0.2  0.   0.   0.   0.09
 0.   0.   0.   0.   0.15 0.   0.09 0.   0.   0.27 0.44 0.   0.   0.
 0.   0.19 1.39 1.78 0.46 0.   0.   0.   0.   0.   0.   0.   0.   0.
 0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.
 0.24 0.   0.   0.   0.21 0.   0.12 0.   0.   0.   0.   0.   0.   0.
 0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.
 0.09 0.   0.   0.   0.12 0.   0.   0.   0.   0.   0.   0.   0.   0.12
 0.   0.5  0.09 0.   0.   0.44 0.   0.09 0.   0.   0.   0.12 0.   0.09
 0.   0.09 0.   0.   0.   0.   0.   0.09 0.5  0.12 0.   0.   0.   0.44
 0.27 0.3  0.   0.   0.   0.   0.19 0.09 0.12 0.12 1.25 0.   0.   0.25
 0.09 0.19 0.09]

split sizes: train=205, val=22, test=0, N=227
First 100 val samples: [398, 386, 374, 410, 290, 507, 503, 596, 362, 279, 291, 585, 608, 422, 626, 206, 637, 150, 539, 376, 326, 361]
Pre-trained model is loaded.
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f96cfa099a0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.1986
Mean test/val loss: 0.2074
[25, 50, 75] percentiles test/val loss: [0.1607 0.2094 0.2342]

Epoch 4, loss = 0.1928
Mean test/val loss: 0.2109
[25, 50, 75] percentiles test/val loss: [0.1682 0.2109 0.2385]

Epoch 6, loss = 0.1838
Mean test/val loss: 0.2003
[25, 50, 75] percentiles test/val loss: [0.1661 0.2016 0.2345]

Epoch 8, loss = 0.1745
Mean test/val loss: 0.1954
[25, 50, 75] percentiles test/val loss: [0.1615 0.193  0.2225]

Epoch 10, loss = 0.1704
Mean test/val loss: 0.1952
[25, 50, 75] percentiles test/val loss: [0.1556 0.1947 0.2209]

Epoch 12, loss = 0.1685
Mean test/val loss: 0.1992
[25, 50, 75] percentiles test/val loss: [0.1603 0.1966 0.231 ]

Epoch 14, loss = 0.1616
Mean test/val loss: 0.1964
[25, 50, 75] percentiles test/val loss: [0.1563 0.197  0.2256]

Epoch 16, loss = 0.1623
Mean test/val loss: 0.1972
[25, 50, 75] percentiles test/val loss: [0.1576 0.192  0.227 ]

Epoch 18, loss = 0.1590
Mean test/val loss: 0.1971
[25, 50, 75] percentiles test/val loss: [0.1666 0.1924 0.2258]

Epoch 20, loss = 0.1543
Mean test/val loss: 0.1958
[25, 50, 75] percentiles test/val loss: [0.1603 0.1897 0.2274]

New lr: 1e-05

Total parameters: 51478960
Total training + validation time: 0.0 hours, 22.0 mins, and 19.799999999999955 secs
Final val loss: 0.19583433256907898

split sizes: train=205, val=22, test=0, N=227
#### Plotting Script ####
Prediction Results:
dataset_12_06_23_max_ent_all sample150: 0.20800206065177917
dataset_12_06_23_max_ent_all sample291: 0.21078729629516602
dataset_12_06_23_max_ent_all sample361: 0.17688167095184326
dataset_12_06_23_max_ent_all sample376: 0.21627037227153778
dataset_12_06_23_max_ent_all sample596: 0.14707547426223755
MSE_log: 0.192 +- 0.026

Downsampling (200k) Results:
Original sampling (400k) Results:

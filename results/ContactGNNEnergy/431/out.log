Warning: falling back to cpu
#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'GeneticDistance_norm', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy1', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=431, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/431', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/431/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/431/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/431/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f067f2f5310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'GeneticDistance(norm=True)', 'MeanContactDistance(norm=False)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  GeneticDistance(norm=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=False, use_parallel=False, device=device(type='cpu'))

Dataset construction time: 18.096 minutes
Number of samples: 5000
Average num edges per graph:  61627.9772
Mean degree: [245.68 254.88 219.23 ... 251.09 215.5  255.  ] +- [ 9.13  0.37 26.94 ...  4.77 29.22  0.  ]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f06601a3940>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.6103
Mean test/val loss: 0.5767
[25, 50, 75] percentiles test/val loss: [0.3047 0.4845 0.71  ]

Epoch 4, loss = 0.5202
Mean test/val loss: 0.5257
[25, 50, 75] percentiles test/val loss: [0.2735 0.4359 0.6694]

Epoch 6, loss = 0.4696
Mean test/val loss: 0.4651
[25, 50, 75] percentiles test/val loss: [0.244  0.3774 0.5487]

Epoch 8, loss = 0.4326
Mean test/val loss: 0.4512
[25, 50, 75] percentiles test/val loss: [0.25   0.367  0.5534]

Epoch 10, loss = 0.4055
Mean test/val loss: 0.4066
[25, 50, 75] percentiles test/val loss: [0.2078 0.3289 0.4833]

Epoch 12, loss = 0.3847
Mean test/val loss: 0.4004
[25, 50, 75] percentiles test/val loss: [0.2103 0.318  0.4914]

Epoch 14, loss = 0.3670
Mean test/val loss: 0.3746
[25, 50, 75] percentiles test/val loss: [0.1997 0.292  0.449 ]

Epoch 16, loss = 0.3581
Mean test/val loss: 0.3545
[25, 50, 75] percentiles test/val loss: [0.176  0.2829 0.424 ]

Epoch 18, loss = 0.3402
Mean test/val loss: 0.3752
[25, 50, 75] percentiles test/val loss: [0.1843 0.3059 0.4415]

Epoch 20, loss = 0.3309
Mean test/val loss: 0.3403
[25, 50, 75] percentiles test/val loss: [0.167  0.271  0.4148]

Epoch 22, loss = 0.3186
Mean test/val loss: 0.3446
[25, 50, 75] percentiles test/val loss: [0.1751 0.2807 0.4185]

Epoch 24, loss = 0.3150
Mean test/val loss: 0.3341
[25, 50, 75] percentiles test/val loss: [0.1665 0.2702 0.3988]

Epoch 26, loss = 0.3047
#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'GeneticDistance_norm', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy1', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=431, pretrain_id=None, resume_training=True, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/431', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/431/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/431/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/431/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fdad6722310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'GeneticDistance(norm=True)', 'MeanContactDistance(norm=False)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  GeneticDistance(norm=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 0.056 minutes
Number of samples: 5000
Average num edges per graph:  nan
split sizes: train=4500, val=500, test=0, N=5000
Partially-trained model is loaded.
Starting at epoch 26
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fdaa06393a0>
#### TRAINING/VALIDATION ####
Epoch 26, loss = 0.3053
Mean test/val loss: 0.3324
[25, 50, 75] percentiles test/val loss: [0.1663 0.2643 0.4089]

Epoch 28, loss = 0.2980
Mean test/val loss: 0.3188
[25, 50, 75] percentiles test/val loss: [0.1577 0.2489 0.3796]

Epoch 30, loss = 0.2933
Mean test/val loss: 0.3281
[25, 50, 75] percentiles test/val loss: [0.1634 0.2589 0.3946]

Epoch 32, loss = 0.2875
Mean test/val loss: 0.3215
[25, 50, 75] percentiles test/val loss: [0.1597 0.249  0.3937]

Epoch 34, loss = 0.2817
Mean test/val loss: 0.3097
[25, 50, 75] percentiles test/val loss: [0.1478 0.2421 0.3702]

Epoch 36, loss = 0.2780
Mean test/val loss: 0.3099
[25, 50, 75] percentiles test/val loss: [0.1533 0.2375 0.3778]

Epoch 38, loss = 0.2721
Mean test/val loss: 0.3111
[25, 50, 75] percentiles test/val loss: [0.1473 0.2405 0.3722]

Epoch 40, loss = 0.2689
Mean test/val loss: 0.3090
[25, 50, 75] percentiles test/val loss: [0.1506 0.2398 0.368 ]

New lr: 1e-05
Epoch 42, loss = 0.2422
Mean test/val loss: 0.2868
[25, 50, 75] percentiles test/val loss: [0.1383 0.2232 0.3441]

Epoch 44, loss = 0.2383
Mean test/val loss: 0.2862
[25, 50, 75] percentiles test/val loss: [0.1364 0.2205 0.3448]

Epoch 46, loss = 0.2357
Mean test/val loss: 0.2845
[25, 50, 75] percentiles test/val loss: [0.1348 0.2212 0.3427]

Epoch 48, loss = 0.2335
Mean test/val loss: 0.2841
[25, 50, 75] percentiles test/val loss: [0.1351 0.2202 0.3374]

Epoch 50, loss = 0.2317
Mean test/val loss: 0.2839
[25, 50, 75] percentiles test/val loss: [0.1351 0.2219 0.3395]

Epoch 52, loss = 0.2300
Mean test/val loss: 0.2828
[25, 50, 75] percentiles test/val loss: [0.1347 0.2187 0.3346]

Epoch 54, loss = 0.2285
Mean test/val loss: 0.2824
[25, 50, 75] percentiles test/val loss: [0.1333 0.2182 0.3364]

Epoch 56, loss = 0.2271
Mean test/val loss: 0.2823
[25, 50, 75] percentiles test/val loss: [0.1337 0.2212 0.3379]

Epoch 58, loss = 0.2258
Mean test/val loss: 0.2822
[25, 50, 75] percentiles test/val loss: [0.1342 0.2185 0.3379]

Epoch 60, loss = 0.2247
Mean test/val loss: 0.2816
[25, 50, 75] percentiles test/val loss: [0.1343 0.2184 0.3357]

Epoch 62, loss = 0.2236
Mean test/val loss: 0.2813
[25, 50, 75] percentiles test/val loss: [0.1338 0.2177 0.337 ]

Epoch 64, loss = 0.2226
Mean test/val loss: 0.2807
[25, 50, 75] percentiles test/val loss: [0.132  0.2187 0.3367]

Epoch 66, loss = 0.2217
Mean test/val loss: 0.2800
[25, 50, 75] percentiles test/val loss: [0.1321 0.2161 0.3359]

Epoch 68, loss = 0.2208
Mean test/val loss: 0.2808
[25, 50, 75] percentiles test/val loss: [0.1326 0.2181 0.3364]

Epoch 70, loss = 0.2199
Mean test/val loss: 0.2800
[25, 50, 75] percentiles test/val loss: [0.1323 0.2177 0.3344]

Epoch 72, loss = 0.2191
Mean test/val loss: 0.2801
[25, 50, 75] percentiles test/val loss: [0.133  0.2176 0.3373]

Epoch 74, loss = 0.2183
Mean test/val loss: 0.2806
[25, 50, 75] percentiles test/val loss: [0.1317 0.2168 0.3373]

Epoch 76, loss = 0.2175
Mean test/val loss: 0.2803
[25, 50, 75] percentiles test/val loss: [0.1319 0.2151 0.3391]

Epoch 78, loss = 0.2168
Mean test/val loss: 0.2806
[25, 50, 75] percentiles test/val loss: [0.1309 0.2154 0.3391]

Epoch 80, loss = 0.2160
Mean test/val loss: 0.2795
[25, 50, 75] percentiles test/val loss: [0.1304 0.2159 0.3339]


Total parameters: 26462000
Total training + validation time: 5.0 hours, 53.0 mins, and 44.400000000001455 secs
Final val loss: 0.27948213188908994

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_04_28_23 sample981: 0.4707024097442627
dataset_04_28_23 sample324: 0.5532235503196716
dataset_04_28_23 sample3464: 0.29966893792152405
dataset_04_28_23 sample2834: 0.391056627035141
dataset_04_28_23 sample1936: 0.19677500426769257
Loss: 0.382 +- 0.125

Downsampling (40%) Results:
dataset_04_28_23 sample1936-downsampling: 8.698402404785156
dataset_04_28_23 sample2834-downsampling: 7.572065830230713
dataset_04_28_23 sample324-downsampling: 11.95207691192627
dataset_04_28_23 sample3464-downsampling: 8.525896072387695
dataset_04_28_23 sample981-downsampling: 12.276657104492188
Loss: 9.805 +- 1.927

Removing /scratch/midway3/erschultz/ContactGNNEnergy1downsample
Original sampling (100%) Results:
dataset_04_28_23 sample1936-regular: 8.065788269042969
dataset_04_28_23 sample2834-regular: 7.672895431518555
dataset_04_28_23 sample324-regular: 12.817902565002441
dataset_04_28_23 sample3464-regular: 16.3083438873291
dataset_04_28_23 sample981-regular: 16.32524299621582
Loss: 12.238 +- 3.791

Removing /scratch/midway3/erschultz/ContactGNNEnergy1regsample

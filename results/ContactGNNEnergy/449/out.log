#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy9', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=1, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=449, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/449', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/449/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/449/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/449/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fdf673d5310>, channels=1, node_feature_size=0, input_m=512, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 22.615 minutes
Number of samples: 5000
Average num edges per graph:  221897.8496
Mean degree: [427.75 497.38 374.65 ... 471.86 367.9  508.75] +- [40.03  8.98 67.12 ... 29.74 69.03  2.11]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fdf2945bf40>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.5965
Mean test/val loss: 0.5632
[25, 50, 75] percentiles test/val loss: [0.3081 0.4676 0.6846]

Epoch 4, loss = 0.4881
Mean test/val loss: 0.4794
[25, 50, 75] percentiles test/val loss: [0.2641 0.3921 0.5707]

Epoch 6, loss = 0.4276
Mean test/val loss: 0.4127
[25, 50, 75] percentiles test/val loss: [0.2024 0.3119 0.4959]

Epoch 8, loss = 0.3930
Mean test/val loss: 0.4139
[25, 50, 75] percentiles test/val loss: [0.193  0.293  0.4811]

Epoch 10, loss = 0.3662
Mean test/val loss: 0.3860
[25, 50, 75] percentiles test/val loss: [0.2007 0.2855 0.4487]

Epoch 12, loss = 0.3419
Mean test/val loss: 0.3270
[25, 50, 75] percentiles test/val loss: [0.1599 0.2473 0.3924]

Epoch 14, loss = 0.3274
Mean test/val loss: 0.4038
[25, 50, 75] percentiles test/val loss: [0.2199 0.3187 0.472 ]

Epoch 16, loss = 0.3125
Mean test/val loss: 0.3228
[25, 50, 75] percentiles test/val loss: [0.153  0.2451 0.3848]

Epoch 18, loss = 0.2999
Mean test/val loss: 0.3106
[25, 50, 75] percentiles test/val loss: [0.1518 0.2328 0.3675]

Epoch 20, loss = 0.2862
Mean test/val loss: 0.3046
[25, 50, 75] percentiles test/val loss: [0.143  0.2211 0.3635]

Epoch 22, loss = 0.2750
Mean test/val loss: 0.2906
[25, 50, 75] percentiles test/val loss: [0.139  0.2175 0.3533]

Epoch 24, loss = 0.2662
Mean test/val loss: 0.2884
[25, 50, 75] percentiles test/val loss: [0.1329 0.2153 0.3437]

Epoch 26, loss = 0.2599
Mean test/val loss: 0.2790
[25, 50, 75] percentiles test/val loss: [0.1332 0.2092 0.3291]

Epoch 28, loss = 0.2494
Mean test/val loss: 0.2714
[25, 50, 75] percentiles test/val loss: [0.1284 0.2031 0.3198]

Epoch 30, loss = 0.2451
Mean test/val loss: 0.2768
[25, 50, 75] percentiles test/val loss: [0.1326 0.2081 0.3307]

Epoch 32, loss = 0.2374
Mean test/val loss: 0.2735
[25, 50, 75] percentiles test/val loss: [0.1288 0.2084 0.3243]

Epoch 34, loss = 0.2305
Mean test/val loss: 0.2566
[25, 50, 75] percentiles test/val loss: [0.1208 0.1889 0.3005]

Epoch 36, loss = 0.2261
Mean test/val loss: 0.2584
[25, 50, 75] percentiles test/val loss: [0.1161 0.1872 0.3021]

Epoch 38, loss = 0.2232
Mean test/val loss: 0.2594
[25, 50, 75] percentiles test/val loss: [0.1261 0.197  0.302 ]

Epoch 40, loss = 0.2172
Mean test/val loss: 0.2508
[25, 50, 75] percentiles test/val loss: [0.1183 0.1881 0.2975]

New lr: 1e-05
Epoch 42, loss = 0.1888
Mean test/val loss: 0.2294
[25, 50, 75] percentiles test/val loss: [0.1035 0.1664 0.2647]

Epoch 44, loss = 0.1847
Mean test/val loss: 0.2284
[25, 50, 75] percentiles test/val loss: [0.1033 0.1657 0.2587]

Epoch 46, loss = 0.1819
Mean test/val loss: 0.2271
[25, 50, 75] percentiles test/val loss: [0.1017 0.1633 0.2604]

Epoch 48, loss = 0.1796
Mean test/val loss: 0.2261
[25, 50, 75] percentiles test/val loss: [0.1015 0.1643 0.2553]

Epoch 50, loss = 0.1776
Mean test/val loss: 0.2257
[25, 50, 75] percentiles test/val loss: [0.1015 0.1631 0.2563]

Epoch 52, loss = 0.1759
Mean test/val loss: 0.2248
[25, 50, 75] percentiles test/val loss: [0.1019 0.1631 0.25  ]

Epoch 54, loss = 0.1742
Mean test/val loss: 0.2237
[25, 50, 75] percentiles test/val loss: [0.1002 0.1623 0.2518]

Epoch 56, loss = 0.1727
Mean test/val loss: 0.2233
[25, 50, 75] percentiles test/val loss: [0.0994 0.1597 0.2513]

Epoch 58, loss = 0.1714
Mean test/val loss: 0.2236
[25, 50, 75] percentiles test/val loss: [0.0996 0.1616 0.2526]

Epoch 60, loss = 0.1702
Mean test/val loss: 0.2231
[25, 50, 75] percentiles test/val loss: [0.0995 0.1614 0.2505]

Epoch 62, loss = 0.1690
Mean test/val loss: 0.2224
[25, 50, 75] percentiles test/val loss: [0.0995 0.1597 0.2499]

Epoch 64, loss = 0.1679
Mean test/val loss: 0.2211
[25, 50, 75] percentiles test/val loss: [0.0979 0.1606 0.2473]

Epoch 66, loss = 0.1668
Mean test/val loss: 0.2215
[25, 50, 75] percentiles test/val loss: [0.0988 0.1599 0.2496]

Epoch 68, loss = 0.1659
Mean test/val loss: 0.2212
[25, 50, 75] percentiles test/val loss: [0.098  0.1592 0.2463]

Epoch 70, loss = 0.1649
Mean test/val loss: 0.2210
[25, 50, 75] percentiles test/val loss: [0.0973 0.1611 0.2472]

Epoch 72, loss = 0.1640
Mean test/val loss: 0.2208
[25, 50, 75] percentiles test/val loss: [0.0975 0.1588 0.25  ]

Epoch 74, loss = 0.1631
Mean test/val loss: 0.2203
[25, 50, 75] percentiles test/val loss: [0.0968 0.1564 0.2475]

Epoch 76, loss = 0.1623
Mean test/val loss: 0.2199
[25, 50, 75] percentiles test/val loss: [0.0968 0.158  0.2489]

Epoch 78, loss = 0.1615
Mean test/val loss: 0.2190
[25, 50, 75] percentiles test/val loss: [0.0967 0.1567 0.2437]

Epoch 80, loss = 0.1607
Mean test/val loss: 0.2192
[25, 50, 75] percentiles test/val loss: [0.0972 0.1573 0.245 ]


Total parameters: 42846000
Total training + validation time: 9.0 hours, 57.0 mins, and 30.69999999999709 secs
Final val loss: 0.21915876904688775

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_04_28_23 sample981: 0.4491006135940552
dataset_04_28_23 sample324: 0.5043228268623352
dataset_04_28_23 sample3464: 0.23913276195526123
dataset_04_28_23 sample2834: 0.28171855211257935
dataset_04_28_23 sample1936: 0.15529435873031616
Loss: 0.326 +- 0.131

Downsampling (40%) Results:
dataset_04_28_23 sample1936-downsampling: 16.002803802490234
dataset_04_28_23 sample2834-downsampling: 7.170587539672852
dataset_04_28_23 sample324-downsampling: 13.946243286132812
dataset_04_28_23 sample3464-downsampling: 7.1093244552612305
dataset_04_28_23 sample981-downsampling: 10.980722427368164
Loss: 11.042 +- 3.564

Removing /scratch/midway3/erschultz/ContactGNNEnergy9downsample
Original sampling (100%) Results:
dataset_04_28_23 sample1936-regular: 17.151187896728516
dataset_04_28_23 sample2834-regular: 6.5199689865112305
dataset_04_28_23 sample324-regular: 13.83197021484375
dataset_04_28_23 sample3464-regular: 10.485472679138184
dataset_04_28_23 sample981-regular: 11.419258117675781
Loss: 11.882 +- 3.535

Removing /scratch/midway3/erschultz/ContactGNNEnergy9regsample

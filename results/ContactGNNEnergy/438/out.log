#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 None 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(8, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'GeneticDistance_norm', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy3', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=438, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, use_sign_net=False, use_sign_plus=False, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/438', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/438/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/438/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/438/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fceb2e7f3a0>, channels=1, node_feature_size=8, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'GeneticDistance(norm=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False)'], edge_dim=4, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  GeneticDistance(norm=True),
  AdjPCs(k=8, normalize=False)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 14.075 minutes
Number of samples: 5000
Average num edges per graph:  61627.9772
Mean degree: [245.68 254.88 219.23 ... 251.09 215.5  255.  ] +- [ 9.13  0.37 26.94 ...  4.77 29.22  0.  ]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fce74089af0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.5986
Mean test/val loss: 0.5623
[25, 50, 75] percentiles test/val loss: [0.273  0.4403 0.7122]

Epoch 4, loss = 0.5573
Mean test/val loss: 0.5580
[25, 50, 75] percentiles test/val loss: [0.2984 0.4474 0.7018]

Epoch 6, loss = 0.5046
Mean test/val loss: 0.4820
[25, 50, 75] percentiles test/val loss: [0.2359 0.3732 0.6002]

Epoch 8, loss = 0.4701
Mean test/val loss: 0.4703
[25, 50, 75] percentiles test/val loss: [0.2202 0.3612 0.5886]

Epoch 10, loss = 0.4486
Mean test/val loss: 0.4468
[25, 50, 75] percentiles test/val loss: [0.211  0.3505 0.5609]

Epoch 12, loss = 0.4306
Mean test/val loss: 0.4206
[25, 50, 75] percentiles test/val loss: [0.2028 0.3298 0.5268]

Epoch 14, loss = 0.4145
Mean test/val loss: 0.4584
[25, 50, 75] percentiles test/val loss: [0.2168 0.3499 0.5714]

Epoch 16, loss = 0.4022
Mean test/val loss: 0.4068
[25, 50, 75] percentiles test/val loss: [0.194  0.3202 0.5024]

Epoch 18, loss = 0.3920
Mean test/val loss: 0.3977
[25, 50, 75] percentiles test/val loss: [0.188  0.308  0.4894]

Epoch 20, loss = 0.3829
Mean test/val loss: 0.4269
[25, 50, 75] percentiles test/val loss: [0.2063 0.3358 0.5437]

Epoch 22, loss = 0.3718
Mean test/val loss: 0.3943
[25, 50, 75] percentiles test/val loss: [0.1934 0.3159 0.4956]

Epoch 24, loss = 0.3600
Mean test/val loss: 0.3832
[25, 50, 75] percentiles test/val loss: [0.1819 0.3037 0.4657]

Epoch 26, loss = 0.3510
Mean test/val loss: 0.3761
[25, 50, 75] percentiles test/val loss: [0.1801 0.2889 0.4502]

Epoch 28, loss = 0.3435
Mean test/val loss: 0.3910
[25, 50, 75] percentiles test/val loss: [0.1885 0.3051 0.481 ]

Epoch 30, loss = 0.3340
Mean test/val loss: 0.3736
[25, 50, 75] percentiles test/val loss: [0.1926 0.2932 0.454 ]

Epoch 32, loss = 0.3280
Mean test/val loss: 0.3583
[25, 50, 75] percentiles test/val loss: [0.1673 0.2838 0.4208]

Epoch 34, loss = 0.3232
Mean test/val loss: 0.3477
[25, 50, 75] percentiles test/val loss: [0.1606 0.2692 0.4222]

Epoch 36, loss = 0.3151
Mean test/val loss: 0.3426
[25, 50, 75] percentiles test/val loss: [0.1675 0.2626 0.4104]

Epoch 38, loss = 0.3128
Mean test/val loss: 0.3421
[25, 50, 75] percentiles test/val loss: [0.1552 0.2596 0.4201]

Epoch 40, loss = 0.3063
Mean test/val loss: 0.3549
[25, 50, 75] percentiles test/val loss: [0.1677 0.2719 0.4312]

New lr: 1e-05
Epoch 42, loss = 0.2760
Mean test/val loss: 0.3158
[25, 50, 75] percentiles test/val loss: [0.1461 0.2428 0.3881]

Epoch 44, loss = 0.2712
Mean test/val loss: 0.3157
[25, 50, 75] percentiles test/val loss: [0.1454 0.2426 0.3864]

Epoch 46, loss = 0.2680
Mean test/val loss: 0.3124
[25, 50, 75] percentiles test/val loss: [0.1447 0.2403 0.3814]

Epoch 48, loss = 0.2654
Mean test/val loss: 0.3112
[25, 50, 75] percentiles test/val loss: [0.1423 0.2399 0.3853]

Epoch 50, loss = 0.2632
Mean test/val loss: 0.3109
[25, 50, 75] percentiles test/val loss: [0.1431 0.2376 0.3788]

Epoch 52, loss = 0.2611
Mean test/val loss: 0.3104
[25, 50, 75] percentiles test/val loss: [0.1419 0.2383 0.3817]

Epoch 54, loss = 0.2593
Mean test/val loss: 0.3097
[25, 50, 75] percentiles test/val loss: [0.141  0.2361 0.3789]

Epoch 56, loss = 0.2576
Mean test/val loss: 0.3096
[25, 50, 75] percentiles test/val loss: [0.1417 0.2375 0.3792]

Epoch 58, loss = 0.2561
Mean test/val loss: 0.3085
[25, 50, 75] percentiles test/val loss: [0.1412 0.2368 0.3776]

Epoch 60, loss = 0.2545
Mean test/val loss: 0.3078
[25, 50, 75] percentiles test/val loss: [0.141  0.234  0.3768]

Epoch 62, loss = 0.2532
Mean test/val loss: 0.3079
[25, 50, 75] percentiles test/val loss: [0.1415 0.2371 0.3756]

Epoch 64, loss = 0.2519
Mean test/val loss: 0.3073
[25, 50, 75] percentiles test/val loss: [0.1399 0.2357 0.3752]

Epoch 66, loss = 0.2507
Mean test/val loss: 0.3072
[25, 50, 75] percentiles test/val loss: [0.1411 0.2351 0.3726]

Epoch 68, loss = 0.2495
Mean test/val loss: 0.3065
[25, 50, 75] percentiles test/val loss: [0.1397 0.2341 0.3733]

Epoch 70, loss = 0.2484
Mean test/val loss: 0.3065
[25, 50, 75] percentiles test/val loss: [0.1394 0.2341 0.375 ]

Epoch 72, loss = 0.2474
Mean test/val loss: 0.3058
[25, 50, 75] percentiles test/val loss: [0.1383 0.2332 0.3709]

Epoch 74, loss = 0.2464
Mean test/val loss: 0.3057
[25, 50, 75] percentiles test/val loss: [0.1399 0.2324 0.3727]

Epoch 76, loss = 0.2454
Mean test/val loss: 0.3059
[25, 50, 75] percentiles test/val loss: [0.1395 0.2317 0.3731]

Epoch 78, loss = 0.2445
Mean test/val loss: 0.3061
[25, 50, 75] percentiles test/val loss: [0.1391 0.2333 0.3732]

Epoch 80, loss = 0.2436
Mean test/val loss: 0.3052
[25, 50, 75] percentiles test/val loss: [0.1389 0.2323 0.3722]


Total parameters: 26454512
Total training + validation time: 3.0 hours, 51.0 mins, and 25.5 secs
Final val loss: 0.30523093353956937

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_04_28_23 sample981: 0.6318086385726929
dataset_04_28_23 sample324: 0.6714918613433838
dataset_04_28_23 sample3464: 0.5191082954406738
dataset_04_28_23 sample2834: 0.4335300326347351
dataset_04_28_23 sample1936: 0.23332494497299194
Loss: 0.498 +- 0.157

Downsampling (40%) Results:
dataset_04_28_23 sample1936-downsampling: 6.7630109786987305
dataset_04_28_23 sample2834-downsampling: 7.1837358474731445
dataset_04_28_23 sample324-downsampling: 12.742864608764648
dataset_04_28_23 sample3464-downsampling: 9.384561538696289
dataset_04_28_23 sample981-downsampling: 12.65625
Loss: 9.746 +- 2.571

Removing /scratch/midway3/erschultz/ContactGNNEnergy3downsample
Original sampling (100%) Results:
dataset_04_28_23 sample1936-regular: 6.588120460510254
dataset_04_28_23 sample2834-regular: 7.108597278594971
dataset_04_28_23 sample324-regular: 11.441615104675293
dataset_04_28_23 sample3464-regular: 8.980758666992188
dataset_04_28_23 sample981-regular: 14.541827201843262
Loss: 9.732 +- 2.946

Removing /scratch/midway3/erschultz/ContactGNNEnergy3regsample

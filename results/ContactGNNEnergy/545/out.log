#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_10_12_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy10', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=545, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/545', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/545/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/545/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/545/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f6aeed97280>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 35.221 minutes
Number of samples: 10000
Average num edges per graph:  65234.8006
Mean degree: [255.   255.   255.   ... 255.   254.99 255.  ] +- [0.   0.   0.   ... 0.   0.09 0.  ]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [1736, 8603, 4487, 7484, 1944, 6883, 5242, 5402, 2741, 5051, 6509, 7138, 316, 8888, 2400, 8268, 478, 5626, 4834, 8222, 2775, 7297, 9366, 3542, 9486, 5574, 1020, 9892, 5740, 1800, 7753, 2160, 9690, 201, 7926, 1469, 3437, 9939, 6550, 5567, 2452, 3201, 4402, 3181, 5685, 1790, 5045, 8122, 7296, 768, 5261, 2576, 6643, 4781, 1945, 5516, 8922, 8796, 6633, 7263, 9807, 7993, 4712, 1640, 1644, 2131, 8519, 2955, 203, 6356, 8148, 8107, 6575, 4769, 8354, 995, 8881, 972, 7933, 3869, 9749, 6260, 6269, 6134, 2997, 674, 5447, 8738, 7028, 53, 3314, 8398, 8061, 7264, 7488, 1001, 2594, 4870, 8312, 4053, 6041, 1680]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f6aadb9d7f0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.2080
Mean test/val loss: 1.1099
[25, 50, 75] percentiles test/val loss: [0.7218 1.0495 1.4399]

Epoch 4, loss = 0.8669
Mean test/val loss: 0.7627
[25, 50, 75] percentiles test/val loss: [0.4658 0.6904 0.9732]

Epoch 6, loss = 0.7358
Mean test/val loss: 0.6910
[25, 50, 75] percentiles test/val loss: [0.4198 0.6236 0.8887]

Epoch 8, loss = 0.6811
Mean test/val loss: 0.6335
[25, 50, 75] percentiles test/val loss: [0.4014 0.5764 0.8029]

Epoch 10, loss = 0.6447
Mean test/val loss: 0.6350
[25, 50, 75] percentiles test/val loss: [0.3912 0.5767 0.8042]

Epoch 12, loss = 0.6167
Mean test/val loss: 0.5876
[25, 50, 75] percentiles test/val loss: [0.3652 0.5298 0.7451]

Epoch 14, loss = 0.5954
Mean test/val loss: 0.5863
[25, 50, 75] percentiles test/val loss: [0.3545 0.5249 0.7507]

Epoch 16, loss = 0.5760
Mean test/val loss: 0.5672
[25, 50, 75] percentiles test/val loss: [0.3516 0.4998 0.7164]

Epoch 18, loss = 0.5605
Mean test/val loss: 0.5429
[25, 50, 75] percentiles test/val loss: [0.3429 0.49   0.6811]

Epoch 20, loss = 0.5462
Mean test/val loss: 0.5236
[25, 50, 75] percentiles test/val loss: [0.3261 0.4634 0.6585]

Epoch 22, loss = 0.5313
Mean test/val loss: 0.5406
[25, 50, 75] percentiles test/val loss: [0.3448 0.486  0.6749]

Epoch 24, loss = 0.5182
Mean test/val loss: 0.5099
[25, 50, 75] percentiles test/val loss: [0.3163 0.46   0.6501]

Epoch 26, loss = 0.5054
Mean test/val loss: 0.5055
[25, 50, 75] percentiles test/val loss: [0.3122 0.4539 0.6324]

Epoch 28, loss = 0.4946
Mean test/val loss: 0.5108
[25, 50, 75] percentiles test/val loss: [0.3202 0.462  0.6471]

Epoch 30, loss = 0.4847
Mean test/val loss: 0.4882
[25, 50, 75] percentiles test/val loss: [0.3037 0.4323 0.6219]

Epoch 32, loss = 0.4724
Mean test/val loss: 0.4703
[25, 50, 75] percentiles test/val loss: [0.2965 0.4211 0.5921]

Epoch 34, loss = 0.4634
Mean test/val loss: 0.4702
[25, 50, 75] percentiles test/val loss: [0.2987 0.4198 0.5948]

Epoch 36, loss = 0.4559
Mean test/val loss: 0.4605
[25, 50, 75] percentiles test/val loss: [0.2893 0.4054 0.5734]

Epoch 38, loss = 0.4460
Mean test/val loss: 0.4532
[25, 50, 75] percentiles test/val loss: [0.2806 0.407  0.5694]

Epoch 40, loss = 0.4377
Mean test/val loss: 0.4572
[25, 50, 75] percentiles test/val loss: [0.293  0.4065 0.5796]

New lr: 1e-05
Epoch 42, loss = 0.3750
Mean test/val loss: 0.3990
[25, 50, 75] percentiles test/val loss: [0.2567 0.3545 0.5025]

Epoch 44, loss = 0.3655
Mean test/val loss: 0.3940
[25, 50, 75] percentiles test/val loss: [0.2546 0.3493 0.4932]

Epoch 46, loss = 0.3590
Mean test/val loss: 0.3904
[25, 50, 75] percentiles test/val loss: [0.2512 0.3468 0.4922]

Epoch 48, loss = 0.3535
Mean test/val loss: 0.3877
[25, 50, 75] percentiles test/val loss: [0.2497 0.3443 0.486 ]

Epoch 50, loss = 0.3487
Mean test/val loss: 0.3855
[25, 50, 75] percentiles test/val loss: [0.2489 0.3444 0.4847]

Epoch 52, loss = 0.3442
Mean test/val loss: 0.3840
[25, 50, 75] percentiles test/val loss: [0.2479 0.3421 0.4787]

Epoch 54, loss = 0.3401
Mean test/val loss: 0.3821
[25, 50, 75] percentiles test/val loss: [0.2462 0.3374 0.4781]

Epoch 56, loss = 0.3363
Mean test/val loss: 0.3800
[25, 50, 75] percentiles test/val loss: [0.244  0.3368 0.4747]

Epoch 58, loss = 0.3328
Mean test/val loss: 0.3787
[25, 50, 75] percentiles test/val loss: [0.2418 0.3361 0.4725]

Epoch 60, loss = 0.3294
Mean test/val loss: 0.3771
[25, 50, 75] percentiles test/val loss: [0.2428 0.3337 0.4678]

Epoch 62, loss = 0.3261
Mean test/val loss: 0.3761
[25, 50, 75] percentiles test/val loss: [0.2401 0.3347 0.4698]

Epoch 64, loss = 0.3231

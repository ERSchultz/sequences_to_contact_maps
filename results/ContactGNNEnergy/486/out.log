#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_17_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy20', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=486, pretrain_id=434, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/486', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/486/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/486/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/486/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7efc3e0b4310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 17.705 minutes
Number of samples: 5000
Average num edges per graph:  63391.2592
Mean degree: [245.12 249.23 254.53 ... 250.54 253.05 254.34] +- [9.06 7.42 0.85 ... 6.51 2.57 1.27]

split sizes: train=4500, val=500, test=0, N=5000
Pre-trained model is loaded.
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7efbf421cdf0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.8557
Mean test/val loss: 0.8124
[25, 50, 75] percentiles test/val loss: [0.5333 0.7303 1.0465]

Epoch 4, loss = 0.8196
Mean test/val loss: 0.8060
[25, 50, 75] percentiles test/val loss: [0.5282 0.73   1.024 ]

Epoch 6, loss = 0.7981
Mean test/val loss: 0.7699
[25, 50, 75] percentiles test/val loss: [0.512  0.6978 0.9902]

Epoch 8, loss = 0.7803
Mean test/val loss: 0.7637
[25, 50, 75] percentiles test/val loss: [0.5087 0.7022 0.9909]

Epoch 10, loss = 0.7644
Mean test/val loss: 0.7659
[25, 50, 75] percentiles test/val loss: [0.5131 0.702  0.9746]

Epoch 12, loss = 0.7531
Mean test/val loss: 0.7753
[25, 50, 75] percentiles test/val loss: [0.5184 0.7054 0.9948]

Epoch 14, loss = 0.7406
Mean test/val loss: 0.7413
[25, 50, 75] percentiles test/val loss: [0.4894 0.6758 0.9591]

Epoch 16, loss = 0.7332
Mean test/val loss: 0.7394
[25, 50, 75] percentiles test/val loss: [0.4972 0.6802 0.9469]

Epoch 18, loss = 0.7232
Mean test/val loss: 0.7278
[25, 50, 75] percentiles test/val loss: [0.49   0.6587 0.9365]

Epoch 20, loss = 0.7155
Mean test/val loss: 0.7263
[25, 50, 75] percentiles test/val loss: [0.4838 0.6609 0.941 ]

Epoch 22, loss = 0.7101
Mean test/val loss: 0.7356
[25, 50, 75] percentiles test/val loss: [0.4961 0.6655 0.9504]

Epoch 24, loss = 0.7013
Mean test/val loss: 0.7236
[25, 50, 75] percentiles test/val loss: [0.4735 0.6573 0.932 ]

Epoch 26, loss = 0.6963
Mean test/val loss: 0.7168
[25, 50, 75] percentiles test/val loss: [0.4723 0.6553 0.9178]

Epoch 28, loss = 0.6906
Mean test/val loss: 0.7103
[25, 50, 75] percentiles test/val loss: [0.4742 0.6501 0.9287]

Epoch 30, loss = 0.6852
Mean test/val loss: 0.7051
[25, 50, 75] percentiles test/val loss: [0.4727 0.6476 0.9082]

Epoch 32, loss = 0.6788
Mean test/val loss: 0.7075
[25, 50, 75] percentiles test/val loss: [0.4752 0.6483 0.9152]

Epoch 34, loss = 0.6739
Mean test/val loss: 0.7008
[25, 50, 75] percentiles test/val loss: [0.4674 0.64   0.9113]

Epoch 36, loss = 0.6713
Mean test/val loss: 0.7080
[25, 50, 75] percentiles test/val loss: [0.4641 0.6506 0.9192]

Epoch 38, loss = 0.6646
Mean test/val loss: 0.6961
[25, 50, 75] percentiles test/val loss: [0.4597 0.6347 0.9099]

Epoch 40, loss = 0.6588
Mean test/val loss: 0.6997
[25, 50, 75] percentiles test/val loss: [0.4613 0.6479 0.8996]

New lr: 1e-05
Epoch 42, loss = 0.6134
Mean test/val loss: 0.6723
[25, 50, 75] percentiles test/val loss: [0.4434 0.6177 0.875 ]

Epoch 44, loss = 0.6080
Mean test/val loss: 0.6708
[25, 50, 75] percentiles test/val loss: [0.4426 0.6162 0.8718]

Epoch 46, loss = 0.6047
Mean test/val loss: 0.6699
[25, 50, 75] percentiles test/val loss: [0.442  0.6127 0.873 ]

Epoch 48, loss = 0.6018
Mean test/val loss: 0.6704
[25, 50, 75] percentiles test/val loss: [0.4411 0.6115 0.8679]

Epoch 50, loss = 0.5995
Mean test/val loss: 0.6698
[25, 50, 75] percentiles test/val loss: [0.4398 0.6126 0.8697]

Epoch 52, loss = 0.5973
Mean test/val loss: 0.6695
[25, 50, 75] percentiles test/val loss: [0.4403 0.6148 0.8694]

Epoch 54, loss = 0.5953
Mean test/val loss: 0.6705
[25, 50, 75] percentiles test/val loss: [0.4391 0.6137 0.8702]

Epoch 56, loss = 0.5934
Mean test/val loss: 0.6717
[25, 50, 75] percentiles test/val loss: [0.4416 0.6162 0.8699]

Epoch 58, loss = 0.5916
Mean test/val loss: 0.6711
[25, 50, 75] percentiles test/val loss: [0.4406 0.6128 0.8708]

Epoch 60, loss = 0.5899
Mean test/val loss: 0.6712
[25, 50, 75] percentiles test/val loss: [0.4408 0.6123 0.8748]

Epoch 62, loss = 0.5883
Mean test/val loss: 0.6703
[25, 50, 75] percentiles test/val loss: [0.4389 0.6176 0.8735]

Epoch 64, loss = 0.5868
Mean test/val loss: 0.6702
[25, 50, 75] percentiles test/val loss: [0.439  0.6167 0.8665]

Epoch 66, loss = 0.5853
Mean test/val loss: 0.6712
[25, 50, 75] percentiles test/val loss: [0.441  0.6147 0.8686]

Epoch 68, loss = 0.5838
Mean test/val loss: 0.6695
[25, 50, 75] percentiles test/val loss: [0.4405 0.6154 0.8704]

Epoch 70, loss = 0.5824
Mean test/val loss: 0.6708
[25, 50, 75] percentiles test/val loss: [0.4386 0.6167 0.87  ]

Epoch 72, loss = 0.5810
Mean test/val loss: 0.6704
[25, 50, 75] percentiles test/val loss: [0.4383 0.6161 0.8673]

Epoch 74, loss = 0.5798
Mean test/val loss: 0.6708
[25, 50, 75] percentiles test/val loss: [0.4403 0.6174 0.8685]

Epoch 76, loss = 0.5784
Mean test/val loss: 0.6698
[25, 50, 75] percentiles test/val loss: [0.44   0.6134 0.8685]

Epoch 78, loss = 0.5771
Mean test/val loss: 0.6703
[25, 50, 75] percentiles test/val loss: [0.439  0.6156 0.8662]

Epoch 80, loss = 0.5758
Mean test/val loss: 0.6709
[25, 50, 75] percentiles test/val loss: [0.4388 0.6151 0.8652]


Total parameters: 26462000
Total training + validation time: 8.0 hours, 10.0 mins, and 43.70000000000073 secs
Final val loss: 0.6709402325749397

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_09_17_23 sample981: 0.6890528202056885
dataset_09_17_23 sample324: 0.9139508008956909
dataset_09_17_23 sample3464: 0.5954115390777588
dataset_09_17_23 sample2834: 0.7559086084365845
dataset_09_17_23 sample1936: 0.6358093023300171
MSE Loss: 0.718 +- 0.112

Downsampling (40%) Results:
dataset_09_17_23 sample1936-downsampling: 59.88945007324219
dataset_09_17_23 sample2834-downsampling: 52.494483947753906
dataset_09_17_23 sample324-downsampling: 100.17155456542969
dataset_09_17_23 sample3464-downsampling: 61.74238586425781
dataset_09_17_23 sample981-downsampling: 160.61251831054688
Loss: 86.982 +- 40.388

Removing /scratch/midway3/erschultz/ContactGNNEnergy20downsample
Original sampling (100%) Results:
dataset_09_17_23 sample1936-regular: 78.90623474121094
dataset_09_17_23 sample2834-regular: 198.30357360839844
dataset_09_17_23 sample324-regular: 96.64580535888672
dataset_09_17_23 sample3464-regular: 55.55577850341797
dataset_09_17_23 sample981-regular: 161.7467041015625
Loss: 118.232 +- 53.377

Removing /scratch/midway3/erschultz/ContactGNNEnergy20regsample

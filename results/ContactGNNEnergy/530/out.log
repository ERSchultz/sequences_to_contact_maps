#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_diagnorm_rank15', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy16', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=530, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/530', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/530/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/530/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/530/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f241ed99310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, diag_norm=True, rank=15)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False, diag_norm=True, rank=15),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 32.202 minutes
Number of samples: 10000
Average num edges per graph:  63539.8822
Mean degree: [246.36 254.75 249.55 ... 251.39 254.63 242.59] +- [ 9.11  0.58  6.48 ...  3.73  0.95 19.1 ]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [203, 6265, 4528, 7937, 5385, 9207, 3610, 2030, 5359, 392, 7358, 3013, 5242, 7635, 1408, 9365, 8107, 8340, 6135, 1838, 4982, 343, 7192, 3297, 5306, 3066, 3556, 3247, 4686, 3311, 3969, 3807, 3832, 9312, 2851, 3526, 4002, 4612, 9253, 2311, 4422, 3094, 5195, 4308, 4886, 5444, 3284, 763, 5579, 8633, 9143, 2434, 9894, 156, 1846, 2466, 7810, 6278, 2469, 1087, 9389, 2535, 4781, 6346, 7734, 134, 6333, 8199, 2279, 1313, 3970, 9496, 3181, 5339, 1478, 3397, 6655, 3953, 109, 4531, 5784, 2148, 8522, 7465, 9606, 495, 7439, 6040, 3945, 7492, 9380, 7100, 7771, 4584, 3860, 7640, 6343, 2099, 9991, 5771, 8727, 752]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f23d9c93820>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.1168
Mean test/val loss: 1.0643
[25, 50, 75] percentiles test/val loss: [0.6743 0.9565 1.352 ]

Epoch 4, loss = 0.9729
Mean test/val loss: 0.9943
[25, 50, 75] percentiles test/val loss: [0.638  0.899  1.2366]

Epoch 6, loss = 0.9093
Mean test/val loss: 0.8972
[25, 50, 75] percentiles test/val loss: [0.5607 0.8167 1.1091]

Epoch 8, loss = 0.8679
Mean test/val loss: 0.8855
[25, 50, 75] percentiles test/val loss: [0.5778 0.7917 1.0817]

Epoch 10, loss = 0.8389
Mean test/val loss: 0.8554
[25, 50, 75] percentiles test/val loss: [0.5475 0.7756 1.064 ]

Epoch 12, loss = 0.8149
Mean test/val loss: 0.8436
[25, 50, 75] percentiles test/val loss: [0.5198 0.7666 1.0407]

Epoch 14, loss = 0.7977
Mean test/val loss: 0.8125
[25, 50, 75] percentiles test/val loss: [0.5052 0.7211 1.0157]

Epoch 16, loss = 0.7828
Mean test/val loss: 0.7919
[25, 50, 75] percentiles test/val loss: [0.4852 0.7121 0.9995]

Epoch 18, loss = 0.7678
Mean test/val loss: 0.7882
[25, 50, 75] percentiles test/val loss: [0.4949 0.708  0.9888]

Epoch 20, loss = 0.7578
Mean test/val loss: 0.7656
[25, 50, 75] percentiles test/val loss: [0.4751 0.6826 0.9551]

Epoch 22, loss = 0.7472
Mean test/val loss: 0.7641
[25, 50, 75] percentiles test/val loss: [0.4646 0.6829 0.9588]

Epoch 24, loss = 0.7387
Mean test/val loss: 0.7498
[25, 50, 75] percentiles test/val loss: [0.4623 0.6709 0.9438]

Epoch 26, loss = 0.7295
Mean test/val loss: 0.7428
[25, 50, 75] percentiles test/val loss: [0.4673 0.6594 0.9261]

Epoch 28, loss = 0.7209
Mean test/val loss: 0.7439
[25, 50, 75] percentiles test/val loss: [0.4595 0.6681 0.9243]

Epoch 30, loss = 0.7139
Mean test/val loss: 0.7376
[25, 50, 75] percentiles test/val loss: [0.4529 0.6619 0.9268]

Epoch 32, loss = 0.7076
Mean test/val loss: 0.7228
[25, 50, 75] percentiles test/val loss: [0.4488 0.6446 0.9117]

Epoch 34, loss = 0.7025
Mean test/val loss: 0.7300
[25, 50, 75] percentiles test/val loss: [0.4477 0.6516 0.9215]

Epoch 36, loss = 0.6947
Mean test/val loss: 0.7258
[25, 50, 75] percentiles test/val loss: [0.4392 0.6461 0.9136]

Epoch 38, loss = 0.6888
Mean test/val loss: 0.7169
[25, 50, 75] percentiles test/val loss: [0.4346 0.6404 0.9061]

Epoch 40, loss = 0.6827
Mean test/val loss: 0.7113
[25, 50, 75] percentiles test/val loss: [0.4297 0.6336 0.8915]

New lr: 1e-05
Epoch 42, loss = 0.6356
Mean test/val loss: 0.6800
[25, 50, 75] percentiles test/val loss: [0.4206 0.6079 0.8588]

Epoch 44, loss = 0.6297
Mean test/val loss: 0.6770
[25, 50, 75] percentiles test/val loss: [0.419  0.6037 0.8535]

Epoch 46, loss = 0.6257
Mean test/val loss: 0.6764
[25, 50, 75] percentiles test/val loss: [0.4189 0.5998 0.852 ]

Epoch 48, loss = 0.6224
Mean test/val loss: 0.6751
[25, 50, 75] percentiles test/val loss: [0.4166 0.6012 0.8523]

Epoch 50, loss = 0.6194
Mean test/val loss: 0.6746
[25, 50, 75] percentiles test/val loss: [0.4172 0.6009 0.8504]

Epoch 52, loss = 0.6167
Mean test/val loss: 0.6726
[25, 50, 75] percentiles test/val loss: [0.4137 0.5973 0.8477]

Epoch 54, loss = 0.6142
Mean test/val loss: 0.6720
[25, 50, 75] percentiles test/val loss: [0.4146 0.5974 0.8466]

Epoch 56, loss = 0.6117
Mean test/val loss: 0.6715
[25, 50, 75] percentiles test/val loss: [0.4146 0.5978 0.8451]

Epoch 58, loss = 0.6095
Mean test/val loss: 0.6708
[25, 50, 75] percentiles test/val loss: [0.4155 0.5958 0.8429]

Epoch 60, loss = 0.6073
Mean test/val loss: 0.6700
[25, 50, 75] percentiles test/val loss: [0.4147 0.5964 0.8431]

Epoch 62, loss = 0.6052
Mean test/val loss: 0.6704
[25, 50, 75] percentiles test/val loss: [0.4149 0.5968 0.8427]

Epoch 64, loss = 0.6032
Mean test/val loss: 0.6699
[25, 50, 75] percentiles test/val loss: [0.4149 0.5944 0.8412]

Epoch 66, loss = 0.6014
Mean test/val loss: 0.6691
[25, 50, 75] percentiles test/val loss: [0.414  0.5935 0.8372]

Epoch 68, loss = 0.5994
Mean test/val loss: 0.6687
[25, 50, 75] percentiles test/val loss: [0.4151 0.5947 0.8364]

Epoch 70, loss = 0.5977
Mean test/val loss: 0.6684
[25, 50, 75] percentiles test/val loss: [0.4139 0.5945 0.8346]


Total parameters: 26462000
Total training + validation time: 15.0 hours, 51.0 mins, and 18.80000000000291 secs
Final val loss: 0.668387273831293

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample1050: 1.8619745969772339
dataset_09_28_23 sample7802: 0.5343230366706848
dataset_09_28_23 sample156: 0.6943245530128479
dataset_09_28_23 sample2452: 0.28065869212150574
dataset_09_28_23 sample752: 0.011698374524712563
MSE Loss: 0.677 +- 0.636

Downsampling (200k) Results:
dataset_09_28_23 sample1050-downsampling: 71.74066162109375
dataset_09_28_23 sample156-downsampling: 94.70989227294922
dataset_09_28_23 sample2452-downsampling: 20.713306427001953
dataset_09_28_23 sample752-downsampling: 1.748523473739624
dataset_09_28_23 sample7802-downsampling: 24.34429931640625
Loss: 42.651 +- 34.773

Removing /scratch/midway3/erschultz/ContactGNNEnergy16downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1050-regular: 79.96556091308594
dataset_09_28_23 sample156-regular: 108.52165985107422
dataset_09_28_23 sample2452-regular: 26.717369079589844
dataset_09_28_23 sample752-regular: 0.6330132484436035
dataset_09_28_23 sample7802-regular: 23.728565216064453
Loss: 47.913 +- 39.926

Removing /scratch/midway3/erschultz/ContactGNNEnergy16regsample

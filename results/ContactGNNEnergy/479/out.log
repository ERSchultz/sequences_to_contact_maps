#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_11_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy12', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=479, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/479', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/479/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/479/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/479/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7efd84bbc310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 17.221 minutes
Number of samples: 5000
Average num edges per graph:  64277.104
Mean degree: [251.78 254.51 253.95 ... 241.36 253.6  251.96] +- [ 3.32  0.82  1.63 ... 14.71  2.38  4.32]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7efd3c14b370>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.9197
Mean test/val loss: 0.8698
[25, 50, 75] percentiles test/val loss: [0.2239 0.4856 1.2682]

Epoch 4, loss = 0.7649
Mean test/val loss: 0.7738
[25, 50, 75] percentiles test/val loss: [0.1761 0.4402 1.0711]

Epoch 6, loss = 0.6855
Mean test/val loss: 0.7409
[25, 50, 75] percentiles test/val loss: [0.2027 0.4529 1.0137]

Epoch 8, loss = 0.6434
Mean test/val loss: 0.7448
[25, 50, 75] percentiles test/val loss: [0.2381 0.465  1.0221]

Epoch 10, loss = 0.6108
Mean test/val loss: 0.6565
[25, 50, 75] percentiles test/val loss: [0.1459 0.3603 0.9209]

Epoch 12, loss = 0.5909
Mean test/val loss: 0.6197
[25, 50, 75] percentiles test/val loss: [0.1366 0.3448 0.8819]

Epoch 14, loss = 0.5745
Mean test/val loss: 0.6110
[25, 50, 75] percentiles test/val loss: [0.1578 0.3346 0.8555]

Epoch 16, loss = 0.5632
Mean test/val loss: 0.6393
[25, 50, 75] percentiles test/val loss: [0.1649 0.3538 0.8806]

Epoch 18, loss = 0.5534
Mean test/val loss: 1.3274
[25, 50, 75] percentiles test/val loss: [0.4428 0.7274 1.3949]

Epoch 20, loss = 0.5369
Mean test/val loss: 0.5789
[25, 50, 75] percentiles test/val loss: [0.1324 0.3294 0.8138]

Epoch 22, loss = 0.5255
Mean test/val loss: 0.5596
[25, 50, 75] percentiles test/val loss: [0.1254 0.306  0.8021]

Epoch 24, loss = 0.5124
Mean test/val loss: 0.5657
[25, 50, 75] percentiles test/val loss: [0.1302 0.3173 0.8101]

Epoch 26, loss = 0.5062
Mean test/val loss: 0.5391
[25, 50, 75] percentiles test/val loss: [0.1173 0.2964 0.7828]

Epoch 28, loss = 0.5018
Mean test/val loss: 0.5739
[25, 50, 75] percentiles test/val loss: [0.1581 0.3386 0.8003]

Epoch 30, loss = 0.4902
Mean test/val loss: 0.5602
[25, 50, 75] percentiles test/val loss: [0.1259 0.3097 0.8004]

Epoch 32, loss = 0.4839
Mean test/val loss: 0.5633
[25, 50, 75] percentiles test/val loss: [0.1403 0.3099 0.7941]

Epoch 34, loss = 0.4728
Mean test/val loss: 0.5304
[25, 50, 75] percentiles test/val loss: [0.12   0.3019 0.7559]

Epoch 36, loss = 0.4759
Mean test/val loss: 0.5334
[25, 50, 75] percentiles test/val loss: [0.1193 0.2962 0.7652]

Epoch 38, loss = 0.4729
Mean test/val loss: 0.5169
[25, 50, 75] percentiles test/val loss: [0.1071 0.2863 0.7467]

Epoch 40, loss = 0.4707
Mean test/val loss: 0.5264
[25, 50, 75] percentiles test/val loss: [0.1306 0.3042 0.7489]

New lr: 1e-05
Epoch 42, loss = 0.4302
Mean test/val loss: 0.4826
[25, 50, 75] percentiles test/val loss: [0.1005 0.2719 0.71  ]

Epoch 44, loss = 0.4252
Mean test/val loss: 0.4798
[25, 50, 75] percentiles test/val loss: [0.0992 0.2696 0.7067]

Epoch 46, loss = 0.4220
Mean test/val loss: 0.4774
[25, 50, 75] percentiles test/val loss: [0.0982 0.271  0.7052]

Epoch 48, loss = 0.4192
Mean test/val loss: 0.4756
[25, 50, 75] percentiles test/val loss: [0.0975 0.2668 0.7034]

Epoch 50, loss = 0.4169
Mean test/val loss: 0.4751
[25, 50, 75] percentiles test/val loss: [0.1002 0.2677 0.7032]

Epoch 52, loss = 0.4149
Mean test/val loss: 0.4775
[25, 50, 75] percentiles test/val loss: [0.1021 0.2717 0.7037]

Epoch 54, loss = 0.4130
Mean test/val loss: 0.4724
[25, 50, 75] percentiles test/val loss: [0.1027 0.2652 0.6972]

Epoch 56, loss = 0.4112
Mean test/val loss: 0.4709
[25, 50, 75] percentiles test/val loss: [0.0957 0.2643 0.6945]

Epoch 58, loss = 0.4097
Mean test/val loss: 0.4709
[25, 50, 75] percentiles test/val loss: [0.0998 0.2676 0.6964]

Epoch 60, loss = 0.4082
Mean test/val loss: 0.4686
[25, 50, 75] percentiles test/val loss: [0.0957 0.2649 0.6948]

Epoch 62, loss = 0.4067
Mean test/val loss: 0.4675
[25, 50, 75] percentiles test/val loss: [0.095  0.262  0.6979]

Epoch 64, loss = 0.4053
Mean test/val loss: 0.4676
[25, 50, 75] percentiles test/val loss: [0.0968 0.2623 0.6989]

Epoch 66, loss = 0.4042
Mean test/val loss: 0.4665
[25, 50, 75] percentiles test/val loss: [0.095  0.2618 0.6934]

Epoch 68, loss = 0.4029
Mean test/val loss: 0.4668
[25, 50, 75] percentiles test/val loss: [0.0957 0.2621 0.688 ]

Epoch 70, loss = 0.4019
Mean test/val loss: 0.4650
[25, 50, 75] percentiles test/val loss: [0.0947 0.2615 0.6921]

Epoch 72, loss = 0.4008
Mean test/val loss: 0.4658
[25, 50, 75] percentiles test/val loss: [0.0951 0.2622 0.6907]

Epoch 74, loss = 0.3997
Mean test/val loss: 0.4634
[25, 50, 75] percentiles test/val loss: [0.0968 0.2596 0.6891]

Epoch 76, loss = 0.3987
Mean test/val loss: 0.4637
[25, 50, 75] percentiles test/val loss: [0.096  0.2602 0.6924]

Epoch 78, loss = 0.3982
Mean test/val loss: 0.4638
[25, 50, 75] percentiles test/val loss: [0.0942 0.2597 0.6907]

Epoch 80, loss = 0.3970
Mean test/val loss: 0.4640
[25, 50, 75] percentiles test/val loss: [0.0967 0.2577 0.6877]


Total parameters: 26462000
Total training + validation time: 10.0 hours, 0.0 mins, and 1.1999999999970896 secs
Final val loss: 0.4640013084299862

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_09_11_23 sample981: 0.1726999431848526
dataset_09_11_23 sample324: 2.296560525894165
dataset_09_11_23 sample3464: 0.8005703687667847
dataset_09_11_23 sample2834: 0.4932311177253723
dataset_09_11_23 sample1936: 0.6370077133178711
MSE Loss: 0.88 +- 0.738

Downsampling (40%) Results:
dataset_09_11_23 sample1936-downsampling: 288.0174560546875
dataset_09_11_23 sample2834-downsampling: 792.22900390625
dataset_09_11_23 sample324-downsampling: 1566.639404296875
dataset_09_11_23 sample3464-downsampling: 931.7196044921875
dataset_09_11_23 sample981-downsampling: 2947.75048828125
Loss: 1305.271 +- 916.909

Removing /scratch/midway3/erschultz/ContactGNNEnergy12downsample
Original sampling (100%) Results:

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy0', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=548, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/548', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/548/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/548/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/548/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fc77b68e280>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 17.157 minutes
Number of samples: 5000
Average num edges per graph:  64202.6016
Mean degree: [249.86 254.38 247.02 ... 253.91 251.64 251.34] +- [6.31 0.99 8.25 ... 2.04 5.21 3.97]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fc73a4ee5e0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.7461
Mean test/val loss: 1.7620
[25, 50, 75] percentiles test/val loss: [1.1562 1.6521 2.28  ]

Epoch 4, loss = 1.5937
Mean test/val loss: 1.5265
[25, 50, 75] percentiles test/val loss: [1.0217 1.4613 1.9379]

Epoch 6, loss = 1.3993
Mean test/val loss: 1.3593
[25, 50, 75] percentiles test/val loss: [0.9268 1.29   1.6989]

Epoch 8, loss = 1.3076
Mean test/val loss: 1.3564
[25, 50, 75] percentiles test/val loss: [0.94   1.2975 1.679 ]

Epoch 10, loss = 1.1757
Mean test/val loss: 1.1542
[25, 50, 75] percentiles test/val loss: [0.7606 1.0849 1.4293]

Epoch 12, loss = 1.1178
Mean test/val loss: 1.1011
[25, 50, 75] percentiles test/val loss: [0.7204 1.0221 1.3576]

Epoch 14, loss = 1.0708
Mean test/val loss: 1.1018
[25, 50, 75] percentiles test/val loss: [0.715  1.014  1.3573]

Epoch 16, loss = 1.0362
Mean test/val loss: 1.0460
[25, 50, 75] percentiles test/val loss: [0.6879 0.9691 1.289 ]

Epoch 18, loss = 1.0162
Mean test/val loss: 1.0182
[25, 50, 75] percentiles test/val loss: [0.6504 0.9462 1.2559]

Epoch 20, loss = 0.9905
Mean test/val loss: 1.0024
[25, 50, 75] percentiles test/val loss: [0.6582 0.9174 1.2346]

Epoch 22, loss = 0.9691
Mean test/val loss: 0.9894
[25, 50, 75] percentiles test/val loss: [0.6377 0.903  1.2372]

Epoch 24, loss = 0.9549
Mean test/val loss: 1.0006
[25, 50, 75] percentiles test/val loss: [0.6526 0.9241 1.2079]

Epoch 26, loss = 0.9440
Mean test/val loss: 0.9741
[25, 50, 75] percentiles test/val loss: [0.6128 0.8946 1.2243]

Epoch 28, loss = 0.9244
Mean test/val loss: 0.9675
[25, 50, 75] percentiles test/val loss: [0.6148 0.8788 1.1984]

Epoch 30, loss = 0.9158
Mean test/val loss: 0.9424
[25, 50, 75] percentiles test/val loss: [0.6064 0.8572 1.1954]

Epoch 32, loss = 0.9000
Mean test/val loss: 0.9383
[25, 50, 75] percentiles test/val loss: [0.6063 0.8656 1.1681]

Epoch 34, loss = 0.8936
Mean test/val loss: 0.9217
[25, 50, 75] percentiles test/val loss: [0.5859 0.8353 1.1428]

Epoch 36, loss = 0.8786
Mean test/val loss: 0.9019
[25, 50, 75] percentiles test/val loss: [0.579  0.819  1.1189]

Epoch 38, loss = 0.8683
Mean test/val loss: 0.8962
[25, 50, 75] percentiles test/val loss: [0.5677 0.8187 1.1082]

Epoch 40, loss = 0.8580
Mean test/val loss: 0.8795
[25, 50, 75] percentiles test/val loss: [0.5565 0.8018 1.0875]

New lr: 1e-05
Epoch 42, loss = 0.7782
Mean test/val loss: 0.8424
[25, 50, 75] percentiles test/val loss: [0.529  0.7595 1.0385]

Epoch 44, loss = 0.7664
Mean test/val loss: 0.8377
[25, 50, 75] percentiles test/val loss: [0.531  0.7594 1.0342]

Epoch 46, loss = 0.7576
Mean test/val loss: 0.8356
[25, 50, 75] percentiles test/val loss: [0.5266 0.7536 1.0312]

Epoch 48, loss = 0.7500
Mean test/val loss: 0.8300
[25, 50, 75] percentiles test/val loss: [0.5151 0.7504 1.0266]

Epoch 50, loss = 0.7431
Mean test/val loss: 0.8294
[25, 50, 75] percentiles test/val loss: [0.5225 0.7467 1.0232]

Epoch 52, loss = 0.7366
Mean test/val loss: 0.8292
[25, 50, 75] percentiles test/val loss: [0.521  0.7485 1.016 ]

Epoch 54, loss = 0.7309
Mean test/val loss: 0.8253
[25, 50, 75] percentiles test/val loss: [0.5188 0.7371 1.0212]

Epoch 56, loss = 0.7251
Mean test/val loss: 0.8244
[25, 50, 75] percentiles test/val loss: [0.5217 0.7366 1.0165]

Epoch 58, loss = 0.7196
Mean test/val loss: 0.8243
[25, 50, 75] percentiles test/val loss: [0.5148 0.7394 1.0135]

Epoch 60, loss = 0.7144
Mean test/val loss: 0.8233
[25, 50, 75] percentiles test/val loss: [0.5119 0.7353 1.0179]

Epoch 62, loss = 0.7093
Mean test/val loss: 0.8209
[25, 50, 75] percentiles test/val loss: [0.5146 0.7304 1.015 ]

Epoch 64, loss = 0.7049
Mean test/val loss: 0.8200
[25, 50, 75] percentiles test/val loss: [0.5105 0.7301 1.0101]

Epoch 66, loss = 0.7001
Mean test/val loss: 0.8193
[25, 50, 75] percentiles test/val loss: [0.5193 0.7267 1.0177]

Epoch 68, loss = 0.6956
Mean test/val loss: 0.8178
[25, 50, 75] percentiles test/val loss: [0.5132 0.7218 1.0122]

Epoch 70, loss = 0.6908
Mean test/val loss: 0.8195
[25, 50, 75] percentiles test/val loss: [0.5053 0.731  1.0083]


Total parameters: 51479472
Total training + validation time: 11.0 hours, 13.0 mins, and 56.0 secs
Final val loss: 0.8195459945946932

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample981: 0.18774186074733734
dataset_09_28_23 sample324: 0.696000337600708
dataset_09_28_23 sample3464: 1.0450317859649658
dataset_09_28_23 sample2834: 2.3076205253601074
dataset_09_28_23 sample1936: 0.8904761672019958
MSE Loss: 1.025 +- 0.703

Downsampling (200k) Results:
dataset_09_28_23 sample1936-downsampling: 28.11505126953125
dataset_09_28_23 sample2834-downsampling: 149.15469360351562
dataset_09_28_23 sample324-downsampling: 96.40348052978516
dataset_09_28_23 sample3464-downsampling: 75.55281066894531
dataset_09_28_23 sample981-downsampling: 4.683797836303711
Loss: 70.782 +- 51.012

Removing /scratch/midway3/erschultz/ContactGNNEnergy0downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1936-regular: 23.42845916748047
dataset_09_28_23 sample2834-regular: 179.83935546875
dataset_09_28_23 sample324-regular: 86.51937866210938
dataset_09_28_23 sample3464-regular: 69.15665435791016
dataset_09_28_23 sample981-regular: 6.010455131530762
Loss: 72.991 +- 60.921

Removing /scratch/midway3/erschultz/ContactGNNEnergy0regsample

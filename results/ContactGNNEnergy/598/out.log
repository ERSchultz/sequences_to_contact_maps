#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): GATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): GATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): GATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): GATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_10_14_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy9', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=598, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/598', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/598/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/598/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/598/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7f64acf534c0>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 14.449 minutes
Number of samples: 5000
Average num edges per graph:  65200.434
Mean degree: [255.   254.73 254.98 ... 255.   255.   254.94] +- [0.   0.96 0.15 ... 0.   0.   0.3 ]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f6482d64e50>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 2.2792
Mean test/val loss: 2.2186
[25, 50, 75] percentiles test/val loss: [1.4882 1.9996 2.816 ]

Epoch 4, loss = 2.2717
Mean test/val loss: 2.2081
[25, 50, 75] percentiles test/val loss: [1.4644 1.9748 2.8886]

Epoch 6, loss = 2.2684
Mean test/val loss: 2.2089
[25, 50, 75] percentiles test/val loss: [1.4596 1.974  2.8933]

Epoch 8, loss = 2.2672
Mean test/val loss: 2.2110
[25, 50, 75] percentiles test/val loss: [1.4768 1.9903 2.8409]

Epoch 10, loss = 2.2666
Mean test/val loss: 2.2213
[25, 50, 75] percentiles test/val loss: [1.3998 1.9849 2.9701]

Epoch 12, loss = 2.2659
Mean test/val loss: 2.2082
[25, 50, 75] percentiles test/val loss: [1.46   1.9753 2.8959]

Epoch 14, loss = 2.2659
Mean test/val loss: 2.2080
[25, 50, 75] percentiles test/val loss: [1.4622 1.9755 2.8865]

Epoch 16, loss = 2.2661
Mean test/val loss: 2.2080
[25, 50, 75] percentiles test/val loss: [1.4635 1.9734 2.8892]

Epoch 18, loss = 2.2657
Mean test/val loss: 2.2101
[25, 50, 75] percentiles test/val loss: [1.4738 1.9824 2.85  ]

Epoch 20, loss = 2.2658
Mean test/val loss: 2.2084
[25, 50, 75] percentiles test/val loss: [1.4572 1.9786 2.8962]

Epoch 22, loss = 2.2658
Mean test/val loss: 2.2084
[25, 50, 75] percentiles test/val loss: [1.4664 1.9792 2.8786]

Epoch 24, loss = 2.2655
Mean test/val loss: 2.2121
[25, 50, 75] percentiles test/val loss: [1.4779 1.9906 2.8337]

Epoch 26, loss = 2.2660
Mean test/val loss: 2.2089
[25, 50, 75] percentiles test/val loss: [1.4702 1.9824 2.8606]

Epoch 28, loss = 2.2651
Mean test/val loss: 2.2104
[25, 50, 75] percentiles test/val loss: [1.4741 1.989  2.845 ]

Epoch 30, loss = 2.2659
Mean test/val loss: 2.2088
[25, 50, 75] percentiles test/val loss: [1.4709 1.9807 2.8649]

Epoch 32, loss = 2.2648
Mean test/val loss: 2.2086
[25, 50, 75] percentiles test/val loss: [1.4682 1.9797 2.8676]

Epoch 34, loss = 2.2647
Mean test/val loss: 2.2140
[25, 50, 75] percentiles test/val loss: [1.4843 1.9923 2.8217]

Epoch 36, loss = 2.2652
Mean test/val loss: 2.2103
[25, 50, 75] percentiles test/val loss: [1.4738 1.9869 2.8474]

Epoch 38, loss = 2.2646
Mean test/val loss: 2.2134
[25, 50, 75] percentiles test/val loss: [1.4817 1.9918 2.8272]

Epoch 40, loss = 2.2651
Mean test/val loss: 2.2098
[25, 50, 75] percentiles test/val loss: [1.473  1.9839 2.8525]

New lr: 1e-05
Epoch 42, loss = 2.2634
Mean test/val loss: 2.2082
[25, 50, 75] percentiles test/val loss: [1.4675 1.9805 2.8765]

Epoch 44, loss = 2.2634
Mean test/val loss: 2.2080
[25, 50, 75] percentiles test/val loss: [1.4643 1.9753 2.8845]

Epoch 46, loss = 2.2634
Mean test/val loss: 2.2081
[25, 50, 75] percentiles test/val loss: [1.4662 1.9792 2.8786]

Epoch 48, loss = 2.2633
Mean test/val loss: 2.2080
[25, 50, 75] percentiles test/val loss: [1.4634 1.9741 2.8889]

Epoch 50, loss = 2.2634
Mean test/val loss: 2.2080
[25, 50, 75] percentiles test/val loss: [1.4643 1.9732 2.8866]

Epoch 52, loss = 2.2634
Mean test/val loss: 2.2079
[25, 50, 75] percentiles test/val loss: [1.4625 1.9742 2.8891]

Epoch 54, loss = 2.2634
Mean test/val loss: 2.2080
[25, 50, 75] percentiles test/val loss: [1.4653 1.9778 2.8808]

Epoch 56, loss = 2.2634
Mean test/val loss: 2.2081
[25, 50, 75] percentiles test/val loss: [1.4658 1.9787 2.8793]

Epoch 58, loss = 2.2635
Mean test/val loss: 2.2081
[25, 50, 75] percentiles test/val loss: [1.4656 1.9781 2.8804]

Epoch 60, loss = 2.2636
Mean test/val loss: 2.2081
[25, 50, 75] percentiles test/val loss: [1.4656 1.9784 2.88  ]

Epoch 62, loss = 2.2634
Mean test/val loss: 2.2081
[25, 50, 75] percentiles test/val loss: [1.4656 1.9774 2.882 ]

Epoch 64, loss = 2.2635
Mean test/val loss: 2.2080
[25, 50, 75] percentiles test/val loss: [1.4646 1.9756 2.8841]

Epoch 66, loss = 2.2635
Mean test/val loss: 2.2081
[25, 50, 75] percentiles test/val loss: [1.466  1.9791 2.8787]

Epoch 68, loss = 2.2634
Mean test/val loss: 2.2087
[25, 50, 75] percentiles test/val loss: [1.4708 1.9792 2.8647]

Epoch 70, loss = 2.2633
Mean test/val loss: 2.2079
[25, 50, 75] percentiles test/val loss: [1.4637 1.9742 2.8861]


Total parameters: 51479472
Total training + validation time: 9.0 hours, 59.0 mins, and 18.30000000000291 secs
Final val loss: 2.2079404271245004

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_10_14_23 sample981: 1.550108790397644
dataset_10_14_23 sample324: 1.0799001455307007
dataset_10_14_23 sample3464: 4.173681259155273
dataset_10_14_23 sample2834: 3.279247760772705
dataset_10_14_23 sample1936: 2.066497802734375
MSE_log: 2.43 +- 1.139

Downsampling (200k) Results:

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_29_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy17', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=538, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/538', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/538/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/538/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/538/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fcc6473c310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 39.723 minutes
Number of samples: 10000
Average num edges per graph:  63526.4298
Mean degree: [254.38 253.47 253.66 ... 250.21 249.58 237.95] +- [ 1.27  3.02  1.88 ...  4.56  5.82 14.15]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [2729, 4175, 5211, 7125, 6072, 4886, 3437, 9395, 6505, 8312, 2775, 4982, 384, 7192, 4830, 4810, 5288, 8226, 5118, 1608, 8631, 1875, 6269, 1644, 8442, 3832, 8080, 8599, 7599, 7105, 6511, 5940, 2674, 8211, 1944, 99, 2741, 5296, 9991, 9100, 4900, 7094, 9422, 821, 2834, 203, 6164, 1053, 1623, 5339, 5618, 6419, 6648, 3837, 8951, 3740, 3648, 1317, 8142, 2131, 7446, 6617, 6883, 6997, 4168, 4707, 53, 9053, 5522, 3272, 9951, 8738, 7654, 9257, 5955, 668, 7114, 1249, 614, 4316, 3842, 3658, 5567, 4769, 1885, 988, 5620, 4659, 2576, 5258, 9231, 9147, 1408, 5103, 38, 5002, 5585, 520, 2008, 201, 195, 8305]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fcc1b7efee0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.8475
Mean test/val loss: 1.7549
[25, 50, 75] percentiles test/val loss: [1.2011 1.6762 2.1852]

Epoch 4, loss = 1.5352
Mean test/val loss: 1.4338
[25, 50, 75] percentiles test/val loss: [1.0018 1.3639 1.7632]

Epoch 6, loss = 1.3417
Mean test/val loss: 1.2652
[25, 50, 75] percentiles test/val loss: [0.8749 1.1828 1.54  ]

Epoch 8, loss = 1.2181
Mean test/val loss: 1.2014
[25, 50, 75] percentiles test/val loss: [0.8341 1.1134 1.4612]

Epoch 10, loss = 1.1539
Mean test/val loss: 1.1242
[25, 50, 75] percentiles test/val loss: [0.7721 1.0329 1.3608]

Epoch 12, loss = 1.1200
Mean test/val loss: 1.0998
[25, 50, 75] percentiles test/val loss: [0.7508 1.0146 1.3271]

Epoch 14, loss = 1.0865
Mean test/val loss: 1.0937
[25, 50, 75] percentiles test/val loss: [0.7368 1.0124 1.3295]

Epoch 16, loss = 1.0630
Mean test/val loss: 1.0455
[25, 50, 75] percentiles test/val loss: [0.7074 0.97   1.2781]

Epoch 18, loss = 1.0442
Mean test/val loss: 1.0309
[25, 50, 75] percentiles test/val loss: [0.6964 0.9467 1.2505]

Epoch 20, loss = 1.0238
Mean test/val loss: 1.0277
[25, 50, 75] percentiles test/val loss: [0.6939 0.9414 1.2635]

Epoch 22, loss = 1.0092
Mean test/val loss: 1.0076
[25, 50, 75] percentiles test/val loss: [0.6805 0.9307 1.2253]

Epoch 24, loss = 0.9956
Mean test/val loss: 1.0348
[25, 50, 75] percentiles test/val loss: [0.7084 0.953  1.2657]

Epoch 26, loss = 0.9773
Mean test/val loss: 0.9943
[25, 50, 75] percentiles test/val loss: [0.6764 0.918  1.2088]

Epoch 28, loss = 0.9654
Mean test/val loss: 0.9903
[25, 50, 75] percentiles test/val loss: [0.6612 0.9019 1.1963]

Epoch 30, loss = 0.9544
Mean test/val loss: 0.9833
[25, 50, 75] percentiles test/val loss: [0.6613 0.8934 1.193 ]

Epoch 32, loss = 0.9421
Mean test/val loss: 0.9659
[25, 50, 75] percentiles test/val loss: [0.6502 0.8813 1.1823]

Epoch 34, loss = 0.9298
Mean test/val loss: 0.9706
[25, 50, 75] percentiles test/val loss: [0.665  0.8921 1.1629]

Epoch 36, loss = 0.9173
Mean test/val loss: 0.9519
[25, 50, 75] percentiles test/val loss: [0.6414 0.8732 1.15  ]

Epoch 38, loss = 0.9082
Mean test/val loss: 0.9609
[25, 50, 75] percentiles test/val loss: [0.6551 0.884  1.1667]

Epoch 40, loss = 0.8976
Mean test/val loss: 0.9317
[25, 50, 75] percentiles test/val loss: [0.6229 0.8484 1.1267]

New lr: 1e-05
Epoch 42, loss = 0.8173
Mean test/val loss: 0.8862
[25, 50, 75] percentiles test/val loss: [0.5941 0.8013 1.0693]

Epoch 44, loss = 0.8048
Mean test/val loss: 0.8828
[25, 50, 75] percentiles test/val loss: [0.5876 0.7969 1.0668]

Epoch 46, loss = 0.7959
Mean test/val loss: 0.8791
[25, 50, 75] percentiles test/val loss: [0.5867 0.7906 1.0582]

Epoch 48, loss = 0.7881
Mean test/val loss: 0.8782
[25, 50, 75] percentiles test/val loss: [0.5852 0.7892 1.0612]

Epoch 50, loss = 0.7811
Mean test/val loss: 0.8760
[25, 50, 75] percentiles test/val loss: [0.5859 0.7834 1.0575]

Epoch 52, loss = 0.7747
Mean test/val loss: 0.8742
[25, 50, 75] percentiles test/val loss: [0.5836 0.7818 1.0526]

Epoch 54, loss = 0.7687
Mean test/val loss: 0.8750
[25, 50, 75] percentiles test/val loss: [0.5862 0.7814 1.0561]

Epoch 56, loss = 0.7628
Mean test/val loss: 0.8752
[25, 50, 75] percentiles test/val loss: [0.5859 0.782  1.0508]

Epoch 58, loss = 0.7573
Mean test/val loss: 0.8747
[25, 50, 75] percentiles test/val loss: [0.5822 0.7788 1.0508]

Epoch 60, loss = 0.7521
Mean test/val loss: 0.8714
[25, 50, 75] percentiles test/val loss: [0.5809 0.7761 1.0511]

Epoch 62, loss = 0.7470
Mean test/val loss: 0.8739
[25, 50, 75] percentiles test/val loss: [0.5855 0.7794 1.0496]

Epoch 64, loss = 0.7421
Mean test/val loss: 0.8716
[25, 50, 75] percentiles test/val loss: [0.5789 0.7783 1.045 ]

Epoch 66, loss = 0.7373
Mean test/val loss: 0.8729
[25, 50, 75] percentiles test/val loss: [0.5793 0.7804 1.0503]

Epoch 68, loss = 0.7328
Mean test/val loss: 0.8761
[25, 50, 75] percentiles test/val loss: [0.5825 0.7786 1.0542]

Epoch 70, loss = 0.7288
Mean test/val loss: 0.8749
[25, 50, 75] percentiles test/val loss: [0.5802 0.782  1.0517]


Total parameters: 51479216
Total training + validation time: 19.0 hours, 35.0 mins, and 48.60000000000582 secs
Final val loss: 0.8749126024991274

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_09_29_23 sample1050: 1.4675416946411133
dataset_09_29_23 sample7802: 0.9106737971305847
dataset_09_29_23 sample156: 0.8735639452934265
dataset_09_29_23 sample2452: 0.7316874861717224
dataset_09_29_23 sample752: 0.6344693899154663
MSE Loss: 0.924 +- 0.289

Downsampling (200k) Results:
dataset_09_29_23 sample1050-downsampling: 92.2658462524414
dataset_09_29_23 sample156-downsampling: 116.98685455322266
dataset_09_29_23 sample2452-downsampling: 70.66484832763672
dataset_09_29_23 sample752-downsampling: 30.886539459228516
dataset_09_29_23 sample7802-downsampling: 47.654083251953125
Loss: 71.692 +- 30.721

Removing /scratch/midway3/erschultz/ContactGNNEnergy17downsample
Original sampling (400k) Results:
dataset_09_29_23 sample1050-regular: 110.16212463378906
dataset_09_29_23 sample156-regular: 88.0472183227539
dataset_09_29_23 sample2452-regular: 63.219207763671875
dataset_09_29_23 sample752-regular: 36.19679260253906
dataset_09_29_23 sample7802-regular: 43.13442611694336
Loss: 68.152 +- 27.684

Removing /scratch/midway3/erschultz/ContactGNNEnergy17regsample

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_11_21_23_gm12878'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy10', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=617, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/617', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/617/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/617/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/617/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7fb85c61a670>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 15.284 minutes
Number of samples: 5000
Average num edges per graph:  64987.5352
Mean degree: [255.   254.75 254.99 ... 254.99 246.44 254.9 ] +- [ 0.    0.9   0.09 ...  0.09 16.62  0.38]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fb8324941f0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.6008
Mean test/val loss: 1.5936
[25, 50, 75] percentiles test/val loss: [1.0173 1.4558 2.0202]

Epoch 4, loss = 1.3680
Mean test/val loss: 1.2792
[25, 50, 75] percentiles test/val loss: [0.8935 1.2029 1.5663]

Epoch 6, loss = 1.1742
Mean test/val loss: 1.1141
[25, 50, 75] percentiles test/val loss: [0.7485 1.0122 1.3551]

Epoch 8, loss = 1.0817
Mean test/val loss: 1.0629
[25, 50, 75] percentiles test/val loss: [0.6948 0.978  1.3044]

Epoch 10, loss = 1.0311
Mean test/val loss: 1.0137
[25, 50, 75] percentiles test/val loss: [0.6799 0.9362 1.2054]

Epoch 12, loss = 1.0012
Mean test/val loss: 1.0033
[25, 50, 75] percentiles test/val loss: [0.6818 0.9091 1.1947]

Epoch 14, loss = 0.9706
Mean test/val loss: 0.9627
[25, 50, 75] percentiles test/val loss: [0.6334 0.8792 1.1517]

Epoch 16, loss = 0.9512
Mean test/val loss: 0.9511
[25, 50, 75] percentiles test/val loss: [0.6307 0.8604 1.1452]

Epoch 18, loss = 0.9357
Mean test/val loss: 0.9237
[25, 50, 75] percentiles test/val loss: [0.6097 0.838  1.1237]

Epoch 20, loss = 0.9152
Mean test/val loss: 0.9208
[25, 50, 75] percentiles test/val loss: [0.5946 0.8299 1.1109]

Epoch 22, loss = 0.8998
Mean test/val loss: 0.9246
[25, 50, 75] percentiles test/val loss: [0.6164 0.8373 1.1042]

Epoch 24, loss = 0.8871
Mean test/val loss: 0.8916
[25, 50, 75] percentiles test/val loss: [0.5836 0.8004 1.073 ]

Epoch 26, loss = 0.8725
Mean test/val loss: 0.8767
[25, 50, 75] percentiles test/val loss: [0.5737 0.7833 1.0512]

Epoch 28, loss = 0.8603
Mean test/val loss: 0.8823
[25, 50, 75] percentiles test/val loss: [0.5839 0.7929 1.0486]

Epoch 30, loss = 0.8468
Mean test/val loss: 0.8969
[25, 50, 75] percentiles test/val loss: [0.5873 0.7928 1.0756]

Epoch 32, loss = 0.8368
Mean test/val loss: 0.8568
[25, 50, 75] percentiles test/val loss: [0.5547 0.7803 1.0443]

Epoch 34, loss = 0.8251
Mean test/val loss: 0.8566
[25, 50, 75] percentiles test/val loss: [0.5586 0.7708 1.0208]

Epoch 36, loss = 0.8187
Mean test/val loss: 0.8492
[25, 50, 75] percentiles test/val loss: [0.5591 0.7556 1.0201]

Epoch 38, loss = 0.8070
Mean test/val loss: 0.8332
[25, 50, 75] percentiles test/val loss: [0.5414 0.7522 1.0038]

Epoch 40, loss = 0.7998
Mean test/val loss: 0.8393
[25, 50, 75] percentiles test/val loss: [0.5408 0.749  1.0078]

New lr: 1e-05
Epoch 42, loss = 0.7301
Mean test/val loss: 0.7900
[25, 50, 75] percentiles test/val loss: [0.5092 0.7024 0.9458]

Epoch 44, loss = 0.7187
Mean test/val loss: 0.7855
[25, 50, 75] percentiles test/val loss: [0.5104 0.6998 0.9362]

Epoch 46, loss = 0.7106
Mean test/val loss: 0.7835
[25, 50, 75] percentiles test/val loss: [0.5138 0.7022 0.9303]

Epoch 48, loss = 0.7034
Mean test/val loss: 0.7816
[25, 50, 75] percentiles test/val loss: [0.5112 0.6981 0.9314]

Epoch 50, loss = 0.6970
Mean test/val loss: 0.7803
[25, 50, 75] percentiles test/val loss: [0.5086 0.6983 0.9306]

Epoch 52, loss = 0.6911
Mean test/val loss: 0.7790
[25, 50, 75] percentiles test/val loss: [0.5067 0.6953 0.9282]

Epoch 54, loss = 0.6854
Mean test/val loss: 0.7786
[25, 50, 75] percentiles test/val loss: [0.5052 0.6907 0.9221]

Epoch 56, loss = 0.6800
Mean test/val loss: 0.7792
[25, 50, 75] percentiles test/val loss: [0.5029 0.6947 0.9222]

Epoch 58, loss = 0.6748
Mean test/val loss: 0.7775
[25, 50, 75] percentiles test/val loss: [0.5029 0.6959 0.9266]

Epoch 60, loss = 0.6699
Mean test/val loss: 0.7768
[25, 50, 75] percentiles test/val loss: [0.5031 0.6926 0.9239]


Total parameters: 51479472
Total training + validation time: 8.0 hours, 31.0 mins, and 42.400000000001455 secs
Final val loss: 0.7767762071341276

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_11_21_23_gm12878 sample981: 1.1606903076171875
dataset_11_21_23_gm12878 sample324: 1.7264208793640137
dataset_11_21_23_gm12878 sample3464: 0.9745558500289917
dataset_11_21_23_gm12878 sample2834: 0.7724360227584839
dataset_11_21_23_gm12878 sample1936: 0.3453402519226074
MSE_log: 0.996 +- 0.455

Downsampling (200k) Results:
dataset_11_21_23_gm12878 sample1936-downsampling: 2.802776336669922
dataset_11_21_23_gm12878 sample2834-downsampling: 7.410357475280762
dataset_11_21_23_gm12878 sample324-downsampling: 34.61668014526367
dataset_11_21_23_gm12878 sample3464-downsampling: 15.86047077178955
dataset_11_21_23_gm12878 sample981-downsampling: 19.3035945892334
Loss: 15.999 +- 11.004

Removing /scratch/midway3/erschultz/ContactGNNEnergy10downsample
Original sampling (400k) Results:

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project/depablo/erschultz/dataset_12_12_23_imr90'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy1', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=4, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, lambda3=1, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=658, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/658', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/658/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/658/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/658/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=2, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), eig=False, criterion=<function mse_log at 0x7f87652da430>, cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 9.991 minutes
Number of samples: 5000
Average num edges per graph:  62346.308
Mean degree: [254.87 255.   255.   ... 214.69 254.65 239.73] +- [ 0.48  0.    0.   ... 35.84  1.01 17.39]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [1640, 1651, 267, 3805, 3942, 566, 206, 2576, 275, 1309, 2834, 3663, 803, 4056, 4875, 2913, 2434, 727, 111, 952, 1798, 544, 1300, 4966, 367, 1184, 4059, 2825, 75, 3988, 4067, 2461, 3950, 2422, 3600, 3694, 3756, 4682, 4082, 127, 2451, 3332, 4171, 2986, 290, 3216, 1617, 2517, 2431, 741, 3727, 1520, 597, 3353, 916, 2119, 1569, 2567, 749, 2097, 642, 2382, 78, 2060, 1936, 4892, 3967, 1438, 2147, 1206, 694, 4638, 4179, 40, 4024, 3162, 1989, 4427, 4785, 194, 514, 1533, 3906, 4307, 4669, 2700, 3377, 970, 3296, 2156, 2107, 1218, 3947, 3076, 651, 4516, 1619, 2014, 3809, 3384, 3440, 3650]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f875c530a00>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.8866
Mean test/val loss: 0.8561
[25, 50, 75] percentiles test/val loss: [0.6969 0.8366 0.9867]

Epoch 4, loss = 0.7782
Mean test/val loss: 0.8349
[25, 50, 75] percentiles test/val loss: [0.6948 0.8143 0.9774]

Epoch 6, loss = 0.7159
Mean test/val loss: 0.7325
[25, 50, 75] percentiles test/val loss: [0.5798 0.7054 0.8688]

Epoch 8, loss = 0.6806
Mean test/val loss: 0.6929
[25, 50, 75] percentiles test/val loss: [0.5389 0.6751 0.7929]

Epoch 10, loss = 0.6504
Mean test/val loss: 0.6636
[25, 50, 75] percentiles test/val loss: [0.5238 0.6483 0.7776]

Epoch 12, loss = 0.6136
Mean test/val loss: 0.6409
[25, 50, 75] percentiles test/val loss: [0.5022 0.634  0.7445]

Epoch 14, loss = 0.5925
Mean test/val loss: 0.6180
[25, 50, 75] percentiles test/val loss: [0.4748 0.6051 0.7261]

Epoch 16, loss = 0.5717
Mean test/val loss: 0.6010
[25, 50, 75] percentiles test/val loss: [0.4715 0.5658 0.6892]

Epoch 18, loss = 0.5512
Mean test/val loss: 0.5805
[25, 50, 75] percentiles test/val loss: [0.4647 0.5619 0.6735]

Epoch 20, loss = 0.5345
Mean test/val loss: 0.5731
[25, 50, 75] percentiles test/val loss: [0.4532 0.5363 0.6694]

Epoch 22, loss = 0.5180
Mean test/val loss: 0.5447
[25, 50, 75] percentiles test/val loss: [0.4393 0.5241 0.6141]

Epoch 24, loss = 0.5073
Mean test/val loss: 0.5575
[25, 50, 75] percentiles test/val loss: [0.4446 0.5346 0.6581]

Epoch 26, loss = 0.4893
Mean test/val loss: 0.5359
[25, 50, 75] percentiles test/val loss: [0.4126 0.5085 0.6231]

Epoch 28, loss = 0.4796
Mean test/val loss: 0.5236
[25, 50, 75] percentiles test/val loss: [0.4269 0.5094 0.6037]

Epoch 30, loss = 0.4650
Mean test/val loss: 0.5067
[25, 50, 75] percentiles test/val loss: [0.3915 0.4941 0.6102]

Epoch 32, loss = 0.4565
Mean test/val loss: 0.5029
[25, 50, 75] percentiles test/val loss: [0.4068 0.4761 0.5627]

Epoch 34, loss = 0.4488
Mean test/val loss: 0.5075
[25, 50, 75] percentiles test/val loss: [0.3887 0.4882 0.5667]

Epoch 36, loss = 0.4416
Mean test/val loss: 0.4997
[25, 50, 75] percentiles test/val loss: [0.3984 0.4893 0.5778]

Epoch 38, loss = 0.4321
Mean test/val loss: 0.4951
[25, 50, 75] percentiles test/val loss: [0.4066 0.4578 0.555 ]

Epoch 40, loss = 0.4310
Mean test/val loss: 0.4936
[25, 50, 75] percentiles test/val loss: [0.388  0.4565 0.5716]

New lr: 1e-05
Epoch 42, loss = 0.3900
Mean test/val loss: 0.4527
[25, 50, 75] percentiles test/val loss: [0.3587 0.421  0.5292]

Epoch 44, loss = 0.3846
Mean test/val loss: 0.4522
[25, 50, 75] percentiles test/val loss: [0.3406 0.4423 0.5518]

Epoch 46, loss = 0.3804
Mean test/val loss: 0.4518
[25, 50, 75] percentiles test/val loss: [0.3401 0.4153 0.5533]

Epoch 48, loss = 0.3772
Mean test/val loss: 0.4510
[25, 50, 75] percentiles test/val loss: [0.3479 0.4369 0.53  ]

Epoch 50, loss = 0.3743
Mean test/val loss: 0.4490
[25, 50, 75] percentiles test/val loss: [0.3332 0.4318 0.5219]

Epoch 52, loss = 0.3717
Mean test/val loss: 0.4479
[25, 50, 75] percentiles test/val loss: [0.3483 0.4294 0.5328]

Epoch 54, loss = 0.3692
Mean test/val loss: 0.4469
[25, 50, 75] percentiles test/val loss: [0.3296 0.4225 0.5497]

Epoch 56, loss = 0.3669
Mean test/val loss: 0.4481
[25, 50, 75] percentiles test/val loss: [0.3436 0.4164 0.5332]

Epoch 58, loss = 0.3648
Mean test/val loss: 0.4457
[25, 50, 75] percentiles test/val loss: [0.3551 0.438  0.5222]

Epoch 60, loss = 0.3628
Mean test/val loss: 0.4463
[25, 50, 75] percentiles test/val loss: [0.3366 0.425  0.5437]


Total parameters: 51478960
Total training + validation time: 15.0 hours, 21.0 mins, and 37.900000000001455 secs
Final val loss: 0.44628343868255616

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_12_12_23_imr90 sample981: 0.1377691626548767
dataset_12_12_23_imr90 sample324: 0.5510530471801758
dataset_12_12_23_imr90 sample3464: 0.5298362374305725
dataset_12_12_23_imr90 sample2834: 0.2553670406341553
dataset_12_12_23_imr90 sample1936: 0.09364335238933563
MSE_log: 0.314 +- 0.193

Downsampling (200k) Results:
Original sampling (400k) Results:

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_11_15_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy10', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=605, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/605', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/605/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/605/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/605/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7f3b715a54c0>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 18.12 minutes
Number of samples: 5000
Average num edges per graph:  64708.0216
Mean degree: [254.98 255.   254.97 ... 255.   254.98 254.89] +- [0.12 0.   0.17 ... 0.   0.18 0.47]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f3b401b8070>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.9279
Mean test/val loss: 1.8507
[25, 50, 75] percentiles test/val loss: [1.0977 1.7146 2.439 ]

Epoch 4, loss = 1.7389
Mean test/val loss: 1.6486
[25, 50, 75] percentiles test/val loss: [1.035  1.5583 2.1386]

Epoch 6, loss = 1.5654
Mean test/val loss: 1.5441
[25, 50, 75] percentiles test/val loss: [0.9988 1.4551 1.9726]

Epoch 8, loss = 1.4705
Mean test/val loss: 1.3538
[25, 50, 75] percentiles test/val loss: [0.8572 1.2726 1.7566]

Epoch 10, loss = 1.3480
Mean test/val loss: 1.2931
[25, 50, 75] percentiles test/val loss: [0.7928 1.1881 1.6963]

Epoch 12, loss = 1.2772
Mean test/val loss: 1.2601
[25, 50, 75] percentiles test/val loss: [0.7996 1.1587 1.6378]

Epoch 14, loss = 1.2345
Mean test/val loss: 1.2102
[25, 50, 75] percentiles test/val loss: [0.7557 1.1179 1.5668]

Epoch 16, loss = 1.2000
Mean test/val loss: 1.1651
[25, 50, 75] percentiles test/val loss: [0.7227 1.0625 1.5093]

Epoch 18, loss = 1.1789
Mean test/val loss: 1.2295
[25, 50, 75] percentiles test/val loss: [0.7695 1.1323 1.5805]

Epoch 20, loss = 1.1628
Mean test/val loss: 1.1412
[25, 50, 75] percentiles test/val loss: [0.7034 1.043  1.486 ]

Epoch 22, loss = 1.1322
Mean test/val loss: 1.1469
[25, 50, 75] percentiles test/val loss: [0.7042 1.0218 1.4934]

Epoch 24, loss = 1.1158
Mean test/val loss: 1.1068
[25, 50, 75] percentiles test/val loss: [0.6754 1.0073 1.4358]

Epoch 26, loss = 1.0946
Mean test/val loss: 1.0957
[25, 50, 75] percentiles test/val loss: [0.6803 1.0027 1.4282]

Epoch 28, loss = 1.0794
Mean test/val loss: 1.1135
[25, 50, 75] percentiles test/val loss: [0.668  1.0197 1.4562]

Epoch 30, loss = 1.0647
Mean test/val loss: 1.1089
[25, 50, 75] percentiles test/val loss: [0.6878 1.0123 1.4472]

Epoch 32, loss = 1.0517
Mean test/val loss: 1.0808
[25, 50, 75] percentiles test/val loss: [0.6662 0.9908 1.4174]

Epoch 34, loss = 1.0419
Mean test/val loss: 1.0633
[25, 50, 75] percentiles test/val loss: [0.6657 0.9609 1.3916]

Epoch 36, loss = 1.0284
Mean test/val loss: 1.0624
[25, 50, 75] percentiles test/val loss: [0.6508 0.9531 1.3824]

Epoch 38, loss = 1.0185
Mean test/val loss: 1.0927
[25, 50, 75] percentiles test/val loss: [0.6556 0.9693 1.4104]

Epoch 40, loss = 1.0087
Mean test/val loss: 1.0571
[25, 50, 75] percentiles test/val loss: [0.6492 0.9388 1.4007]

New lr: 1e-05
Epoch 42, loss = 0.9338
Mean test/val loss: 1.0053
[25, 50, 75] percentiles test/val loss: [0.6074 0.8937 1.3094]

Epoch 44, loss = 0.9206
Mean test/val loss: 1.0004
[25, 50, 75] percentiles test/val loss: [0.6072 0.89   1.2912]

Epoch 46, loss = 0.9113
Mean test/val loss: 1.0007
[25, 50, 75] percentiles test/val loss: [0.6073 0.8833 1.2904]

Epoch 48, loss = 0.9036
Mean test/val loss: 1.0016
[25, 50, 75] percentiles test/val loss: [0.6062 0.8898 1.291 ]

Epoch 50, loss = 0.8968
Mean test/val loss: 0.9982
[25, 50, 75] percentiles test/val loss: [0.601  0.8866 1.2958]

Epoch 52, loss = 0.8903
Mean test/val loss: 0.9985
[25, 50, 75] percentiles test/val loss: [0.6069 0.8908 1.2954]

Epoch 54, loss = 0.8841
Mean test/val loss: 0.9991
[25, 50, 75] percentiles test/val loss: [0.6081 0.881  1.2986]

Epoch 56, loss = 0.8784
Mean test/val loss: 1.0010
[25, 50, 75] percentiles test/val loss: [0.6103 0.8858 1.2858]

Epoch 58, loss = 0.8731
Mean test/val loss: 0.9995
[25, 50, 75] percentiles test/val loss: [0.6004 0.877  1.2988]

Epoch 60, loss = 0.8679
Mean test/val loss: 1.0001
[25, 50, 75] percentiles test/val loss: [0.602  0.8805 1.3016]


Total parameters: 51479472
Total training + validation time: 7.0 hours, 33.0 mins, and 41.599999999998545 secs
Final val loss: 1.0000626351386308

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_11_15_23 sample981: 1.1907804012298584
dataset_11_15_23 sample324: 1.0527565479278564
dataset_11_15_23 sample3464: 0.8812302350997925
dataset_11_15_23 sample2834: 1.7529830932617188
dataset_11_15_23 sample1936: 1.0450327396392822
MSE_log: 1.185 +- 0.301

Downsampling (200k) Results:

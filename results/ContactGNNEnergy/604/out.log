#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=65536, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_11_08_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy2', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=1, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=604, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/604', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/604/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/604/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/604/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7eff98677550>, node_feature_size=0, input_m=512, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 22.021 minutes
Number of samples: 5000
Average num edges per graph:  255781.5108
Mean degree: [510.93 510.84 500.96 ... 510.68 509.66 510.61] +- [ 0.32  0.55 11.26 ...  1.14  2.52  1.07]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [2249, 4901, 542, 2678, 651, 1838, 308, 275, 3464, 3931, 682, 267, 3045, 3132, 4892, 2425, 4058, 833, 930, 2984, 3435, 471, 4772, 953, 118, 4682, 962, 2376, 1667, 4459, 2434, 3304, 4370, 4503, 2834, 3317, 1475, 3383, 1001, 3237, 4194, 3660, 978, 1002, 3277, 3137, 2798, 3288, 4189, 4059, 4024, 3491, 1681, 4082, 4595, 1533, 1659, 391, 4067, 2642, 313, 1798, 4383, 1735, 2237, 3674, 2695, 2466, 320, 4669, 1309, 40, 1589, 920, 4875, 194, 161, 2906, 856, 2820, 3616, 3230, 3003, 2506, 1569, 1822, 2996, 2628, 4217, 4454, 3912, 3756, 3455, 1506, 3312, 2767, 3727, 147, 810, 475, 3414, 2787]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7eff537142e0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.8755
Mean test/val loss: 1.7711
[25, 50, 75] percentiles test/val loss: [1.0666 1.6753 2.3526]

Epoch 4, loss = 1.7259
Mean test/val loss: 1.6136
[25, 50, 75] percentiles test/val loss: [0.9565 1.5515 2.0915]

Epoch 6, loss = 1.5076
Mean test/val loss: 1.4140
[25, 50, 75] percentiles test/val loss: [0.8873 1.3157 1.8604]

Epoch 8, loss = 1.4044
Mean test/val loss: 1.3476
[25, 50, 75] percentiles test/val loss: [0.8573 1.2844 1.7716]

Epoch 10, loss = 1.2532
Mean test/val loss: 1.2264
[25, 50, 75] percentiles test/val loss: [0.7591 1.1194 1.6005]

Epoch 12, loss = 1.1801
Mean test/val loss: 1.1446
[25, 50, 75] percentiles test/val loss: [0.6875 1.0792 1.4839]

Epoch 14, loss = 1.1257
Mean test/val loss: 1.2432
[25, 50, 75] percentiles test/val loss: [0.7617 1.1417 1.6553]

Epoch 16, loss = 1.0810
Mean test/val loss: 1.0770
[25, 50, 75] percentiles test/val loss: [0.6418 0.9749 1.4309]

Epoch 18, loss = 1.0529
Mean test/val loss: 1.0741
[25, 50, 75] percentiles test/val loss: [0.6646 0.9675 1.3884]

Epoch 20, loss = 1.0204
Mean test/val loss: 1.0127
[25, 50, 75] percentiles test/val loss: [0.587  0.9068 1.3225]

Epoch 22, loss = 1.0029
Mean test/val loss: 1.0948
[25, 50, 75] percentiles test/val loss: [0.6405 0.9827 1.4156]

Epoch 24, loss = 0.9837
Mean test/val loss: 0.9758
[25, 50, 75] percentiles test/val loss: [0.5564 0.8723 1.2803]

Epoch 26, loss = 0.9571
Mean test/val loss: 0.9730
[25, 50, 75] percentiles test/val loss: [0.5526 0.8827 1.2755]

Epoch 28, loss = 0.9455
Mean test/val loss: 0.9833
[25, 50, 75] percentiles test/val loss: [0.5608 0.8856 1.3062]

Epoch 30, loss = 0.9267
Mean test/val loss: 0.9415
[25, 50, 75] percentiles test/val loss: [0.5413 0.8441 1.245 ]

Epoch 32, loss = 0.9141
Mean test/val loss: 0.9431
[25, 50, 75] percentiles test/val loss: [0.5414 0.8271 1.2473]

Epoch 34, loss = 0.8988
Mean test/val loss: 0.9444
[25, 50, 75] percentiles test/val loss: [0.5415 0.8157 1.2398]

Epoch 36, loss = 0.8864
Mean test/val loss: 0.9328
[25, 50, 75] percentiles test/val loss: [0.5378 0.8502 1.2141]

Epoch 38, loss = 0.8761
Mean test/val loss: 0.9068
[25, 50, 75] percentiles test/val loss: [0.526  0.817  1.2006]

Epoch 40, loss = 0.8625
Mean test/val loss: 0.9149
[25, 50, 75] percentiles test/val loss: [0.5084 0.8143 1.1826]

New lr: 1e-05
Epoch 42, loss = 0.7818
Mean test/val loss: 0.8580
[25, 50, 75] percentiles test/val loss: [0.4753 0.7527 1.1268]

Epoch 44, loss = 0.7675
Mean test/val loss: 0.8519
[25, 50, 75] percentiles test/val loss: [0.4671 0.7486 1.1126]

Epoch 46, loss = 0.7572
Mean test/val loss: 0.8497
[25, 50, 75] percentiles test/val loss: [0.4672 0.7422 1.1119]

Epoch 48, loss = 0.7489
Mean test/val loss: 0.8486
[25, 50, 75] percentiles test/val loss: [0.4649 0.7484 1.1117]

Epoch 50, loss = 0.7413
Mean test/val loss: 0.8474
[25, 50, 75] percentiles test/val loss: [0.4705 0.7369 1.1075]

Epoch 52, loss = 0.7343
Mean test/val loss: 0.8438
[25, 50, 75] percentiles test/val loss: [0.4645 0.7447 1.0975]

Epoch 54, loss = 0.7277
Mean test/val loss: 0.8424
[25, 50, 75] percentiles test/val loss: [0.4612 0.7433 1.0941]

Epoch 56, loss = 0.7217
Mean test/val loss: 0.8411
[25, 50, 75] percentiles test/val loss: [0.4618 0.7388 1.0976]

Epoch 58, loss = 0.7160
Mean test/val loss: 0.8419
[25, 50, 75] percentiles test/val loss: [0.4589 0.7403 1.1015]

Epoch 60, loss = 0.7106
Mean test/val loss: 0.8399
[25, 50, 75] percentiles test/val loss: [0.4584 0.7366 1.0979]


Total parameters: 84247472
Total training + validation time: 15.0 hours, 30.0 mins, and 7.80000000000291 secs
Final val loss: 0.8399030800834298

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_11_08_23 sample981: 1.343207597732544
dataset_11_08_23 sample324: 0.3500915765762329
dataset_11_08_23 sample3464: 1.7060856819152832
dataset_11_08_23 sample2834: 1.3064565658569336
dataset_11_08_23 sample1936: 0.9949805736541748
MSE_log: 1.14 +- 0.455

Downsampling (200k) Results:

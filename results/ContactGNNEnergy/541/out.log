#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy11', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[4], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=541, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/541', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/541/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/541/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/541/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fb3cd3c1280>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 48.055 minutes
Number of samples: 10000
Average num edges per graph:  64165.263
Mean degree: [249.86 254.38 247.02 ... 251.39 254.04 250.59] +- [6.31 0.99 8.25 ... 3.73 1.71 8.17]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [2729, 4175, 5211, 7125, 6072, 4886, 3437, 9395, 6505, 8312, 2775, 4982, 384, 7192, 4830, 4810, 5288, 8226, 5118, 1608, 8631, 1875, 6269, 1644, 8442, 3832, 8080, 8599, 7599, 7105, 6511, 5940, 2674, 8211, 1944, 99, 2741, 5296, 9991, 9100, 4900, 7094, 9422, 821, 2834, 203, 6164, 1053, 1623, 5339, 5618, 6419, 6648, 3837, 8951, 3740, 3648, 1317, 8142, 2131, 7446, 6617, 6883, 6997, 4168, 4707, 53, 9053, 5522, 3272, 9951, 8738, 7654, 9257, 5955, 668, 7114, 1249, 614, 4316, 3842, 3658, 5567, 4769, 1885, 988, 5620, 4659, 2576, 5258, 9231, 9147, 1408, 5103, 38, 5002, 5585, 520, 2008, 201, 195, 8305]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fb38441b520>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.6391
Mean test/val loss: 1.4388
[25, 50, 75] percentiles test/val loss: [0.9691 1.3748 1.8485]

Epoch 4, loss = 1.2880
Mean test/val loss: 1.1650
[25, 50, 75] percentiles test/val loss: [0.7685 1.079  1.4562]

Epoch 6, loss = 1.1222
Mean test/val loss: 1.0854
[25, 50, 75] percentiles test/val loss: [0.7121 0.9931 1.3618]

Epoch 8, loss = 1.0489
Mean test/val loss: 1.0111
[25, 50, 75] percentiles test/val loss: [0.6607 0.9161 1.2705]

Epoch 10, loss = 1.0099
Mean test/val loss: 0.9915
[25, 50, 75] percentiles test/val loss: [0.6381 0.898  1.2357]

Epoch 12, loss = 0.9767
Mean test/val loss: 0.9640
[25, 50, 75] percentiles test/val loss: [0.6194 0.8718 1.2127]

Epoch 14, loss = 0.9521
Mean test/val loss: 0.9748
[25, 50, 75] percentiles test/val loss: [0.6293 0.8862 1.2231]

Epoch 16, loss = 0.9283
Mean test/val loss: 0.9212
[25, 50, 75] percentiles test/val loss: [0.5962 0.8173 1.1434]

Epoch 18, loss = 0.9134
Mean test/val loss: 0.9008
[25, 50, 75] percentiles test/val loss: [0.5832 0.7963 1.1107]

Epoch 20, loss = 0.8945
Mean test/val loss: 0.9097
[25, 50, 75] percentiles test/val loss: [0.5894 0.8159 1.1354]

Epoch 22, loss = 0.8804
Mean test/val loss: 0.8934
[25, 50, 75] percentiles test/val loss: [0.5761 0.7943 1.1049]

Epoch 24, loss = 0.8698
Mean test/val loss: 0.9021
[25, 50, 75] percentiles test/val loss: [0.5857 0.806  1.1332]

Epoch 26, loss = 0.8580
Mean test/val loss: 0.8725
[25, 50, 75] percentiles test/val loss: [0.5708 0.7783 1.0791]

Epoch 28, loss = 0.8398
Mean test/val loss: 0.8584
[25, 50, 75] percentiles test/val loss: [0.5533 0.772  1.0675]

Epoch 30, loss = 0.8283
Mean test/val loss: 0.8470
[25, 50, 75] percentiles test/val loss: [0.5543 0.7538 1.0474]

Epoch 32, loss = 0.8173
Mean test/val loss: 0.8424
[25, 50, 75] percentiles test/val loss: [0.5474 0.7499 1.0504]

Epoch 34, loss = 0.8085
Mean test/val loss: 0.8421
[25, 50, 75] percentiles test/val loss: [0.5445 0.7574 1.0427]

Epoch 36, loss = 0.7999
Mean test/val loss: 0.8290
[25, 50, 75] percentiles test/val loss: [0.5418 0.7447 1.0295]

Epoch 38, loss = 0.7861
Mean test/val loss: 0.8327
[25, 50, 75] percentiles test/val loss: [0.5473 0.7389 1.0304]

Epoch 40, loss = 0.7808
Mean test/val loss: 0.8076
[25, 50, 75] percentiles test/val loss: [0.5195 0.7169 1.0012]

New lr: 1e-05
Epoch 42, loss = 0.6997
Mean test/val loss: 0.7582
[25, 50, 75] percentiles test/val loss: [0.4862 0.6734 0.9373]

Epoch 44, loss = 0.6873
Mean test/val loss: 0.7522
[25, 50, 75] percentiles test/val loss: [0.4784 0.6633 0.9343]

Epoch 46, loss = 0.6787
Mean test/val loss: 0.7479
[25, 50, 75] percentiles test/val loss: [0.4799 0.6607 0.9269]

Epoch 48, loss = 0.6711
Mean test/val loss: 0.7453
[25, 50, 75] percentiles test/val loss: [0.4837 0.6581 0.9214]

Epoch 50, loss = 0.6643
Mean test/val loss: 0.7420
[25, 50, 75] percentiles test/val loss: [0.4778 0.6546 0.9174]

Epoch 52, loss = 0.6579
Mean test/val loss: 0.7396
[25, 50, 75] percentiles test/val loss: [0.478  0.6491 0.9159]

Epoch 54, loss = 0.6522
Mean test/val loss: 0.7388
[25, 50, 75] percentiles test/val loss: [0.4763 0.6527 0.9146]

Epoch 56, loss = 0.6467
Mean test/val loss: 0.7362
[25, 50, 75] percentiles test/val loss: [0.4687 0.6437 0.9089]

Epoch 58, loss = 0.6413
Mean test/val loss: 0.7349
[25, 50, 75] percentiles test/val loss: [0.4709 0.6463 0.9073]

Epoch 60, loss = 0.6364
Mean test/val loss: 0.7336
[25, 50, 75] percentiles test/val loss: [0.4697 0.6443 0.9056]

Epoch 62, loss = 0.6318
Mean test/val loss: 0.7316
[25, 50, 75] percentiles test/val loss: [0.4711 0.6404 0.8999]

Epoch 64, loss = 0.6271
Mean test/val loss: 0.7321
[25, 50, 75] percentiles test/val loss: [0.468  0.6449 0.9007]

Epoch 66, loss = 0.6228
Mean test/val loss: 0.7303
[25, 50, 75] percentiles test/val loss: [0.4664 0.6414 0.9024]

Epoch 68, loss = 0.6185
Mean test/val loss: 0.7296
[25, 50, 75] percentiles test/val loss: [0.4648 0.6355 0.8895]

Epoch 70, loss = 0.6144
Mean test/val loss: 0.7283
[25, 50, 75] percentiles test/val loss: [0.4702 0.6365 0.8884]


Total parameters: 51479216
Total training + validation time: 21.0 hours, 22.0 mins, and 12.19999999999709 secs
Final val loss: 0.7282918893145397

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample1050: 1.8483259677886963
dataset_09_28_23 sample7802: 0.6500123739242554
dataset_09_28_23 sample156: 0.7088495492935181
dataset_09_28_23 sample2452: 0.30389314889907837
dataset_09_28_23 sample752: 0.014030514284968376
MSE Loss: 0.705 +- 0.624

Downsampling (200k) Results:
dataset_09_28_23 sample1050-downsampling: 63.519535064697266
dataset_09_28_23 sample156-downsampling: 144.68240356445312
dataset_09_28_23 sample2452-downsampling: 19.317203521728516
dataset_09_28_23 sample752-downsampling: 0.5149456262588501
dataset_09_28_23 sample7802-downsampling: 27.183700561523438
Loss: 51.044 +- 51.094

Removing /scratch/midway3/erschultz/ContactGNNEnergy11downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1050-regular: 59.74787902832031
dataset_09_28_23 sample156-regular: 123.71630096435547
dataset_09_28_23 sample2452-regular: 20.095420837402344
dataset_09_28_23 sample752-regular: 1.1748154163360596
dataset_09_28_23 sample7802-regular: 20.375526428222656
Loss: 45.022 +- 43.729

Removing /scratch/midway3/erschultz/ContactGNNEnergy11regsample

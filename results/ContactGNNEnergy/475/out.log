#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16896, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy19', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=1e-05, min_lr=1e-06, weight_decay=0.01, gpus=1, scheduler='MultiStepLR', milestones=[30], gamma=0.1, patience=10, loss='mse_log', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=475, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=True, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/475', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/475/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/475/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/475/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7ff7c23705e0>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 12.492 minutes
Number of samples: 5000
Average num edges per graph:  61627.9772
Mean degree: [245.68 254.88 219.23 ... 251.09 215.5  255.  ] +- [ 9.13  0.37 26.94 ...  4.77 29.22  0.  ]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 1e-05
    weight_decay: 0.01
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7ff78fd72310>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.9398
Mean test/val loss: 0.9532
[25, 50, 75] percentiles test/val loss: [0.5126 0.8234 1.2009]

Epoch 4, loss = 0.9175
Mean test/val loss: 0.9133
[25, 50, 75] percentiles test/val loss: [0.4867 0.7643 1.1378]

Epoch 6, loss = 0.9071
Mean test/val loss: 0.9229
[25, 50, 75] percentiles test/val loss: [0.4906 0.7912 1.1558]

Epoch 8, loss = 0.9014
Mean test/val loss: 0.9044
[25, 50, 75] percentiles test/val loss: [0.4876 0.7355 1.1214]

Epoch 10, loss = 0.8988
Mean test/val loss: 0.9026
[25, 50, 75] percentiles test/val loss: [0.4846 0.7368 1.1249]

Epoch 12, loss = 0.8969
Mean test/val loss: 0.9059
[25, 50, 75] percentiles test/val loss: [0.486  0.7749 1.1347]

Epoch 14, loss = 0.8954
Mean test/val loss: 0.9033
[25, 50, 75] percentiles test/val loss: [0.4855 0.7392 1.1151]

Epoch 16, loss = 0.8951
Mean test/val loss: 0.9160
[25, 50, 75] percentiles test/val loss: [0.4818 0.7362 1.1469]

Epoch 18, loss = 0.8952
Mean test/val loss: 0.8991
[25, 50, 75] percentiles test/val loss: [0.4797 0.7402 1.1151]

Epoch 20, loss = 0.8944
Mean test/val loss: 0.8983
[25, 50, 75] percentiles test/val loss: [0.4804 0.7422 1.1099]

Epoch 22, loss = 0.8944
Mean test/val loss: 0.8995
[25, 50, 75] percentiles test/val loss: [0.4816 0.7324 1.1157]

Epoch 24, loss = 0.8941
Mean test/val loss: 0.8993
[25, 50, 75] percentiles test/val loss: [0.4839 0.7441 1.1068]

Epoch 26, loss = 0.8947
Mean test/val loss: 0.8997
[25, 50, 75] percentiles test/val loss: [0.4827 0.7347 1.1135]

Epoch 28, loss = 0.8937
Mean test/val loss: 0.9125
[25, 50, 75] percentiles test/val loss: [0.496  0.7867 1.1455]

Epoch 30, loss = 0.8941
Mean test/val loss: 0.8984
[25, 50, 75] percentiles test/val loss: [0.4804 0.7472 1.1131]

New lr: 1.0000000000000002e-06
Epoch 32, loss = 0.8897
Mean test/val loss: 0.8981
[25, 50, 75] percentiles test/val loss: [0.4802 0.7434 1.112 ]

Epoch 34, loss = 0.8896
Mean test/val loss: 0.8980
[25, 50, 75] percentiles test/val loss: [0.481  0.7402 1.1099]

Epoch 36, loss = 0.8894
Mean test/val loss: 0.8993
[25, 50, 75] percentiles test/val loss: [0.4795 0.7511 1.1201]

Epoch 38, loss = 0.8892
Mean test/val loss: 0.8980
[25, 50, 75] percentiles test/val loss: [0.4812 0.7378 1.109 ]

Epoch 40, loss = 0.8892
Mean test/val loss: 0.8981
[25, 50, 75] percentiles test/val loss: [0.4811 0.7375 1.1076]

Epoch 42, loss = 0.8891
Mean test/val loss: 0.8975
[25, 50, 75] percentiles test/val loss: [0.4813 0.7447 1.1102]

Epoch 44, loss = 0.8890
Mean test/val loss: 0.8977
[25, 50, 75] percentiles test/val loss: [0.4792 0.7387 1.1097]

Epoch 46, loss = 0.8889
Mean test/val loss: 0.8982
[25, 50, 75] percentiles test/val loss: [0.4798 0.7364 1.1124]

Epoch 48, loss = 0.8888
Mean test/val loss: 0.8986
[25, 50, 75] percentiles test/val loss: [0.4783 0.7516 1.1189]

Epoch 50, loss = 0.8888
Mean test/val loss: 0.8977
[25, 50, 75] percentiles test/val loss: [0.4774 0.7473 1.1158]

Epoch 52, loss = 0.8887
Mean test/val loss: 0.8973
[25, 50, 75] percentiles test/val loss: [0.4783 0.7458 1.1127]

Epoch 54, loss = 0.8887
Mean test/val loss: 0.8972
[25, 50, 75] percentiles test/val loss: [0.4811 0.7427 1.1092]

Epoch 56, loss = 0.8886
Mean test/val loss: 0.8988
[25, 50, 75] percentiles test/val loss: [0.4784 0.7531 1.1205]

Epoch 58, loss = 0.8885
Mean test/val loss: 0.8973
[25, 50, 75] percentiles test/val loss: [0.4772 0.7439 1.1127]

Epoch 60, loss = 0.8884
Mean test/val loss: 0.8971
[25, 50, 75] percentiles test/val loss: [0.4793 0.739  1.1089]


Total parameters: 26974000
Total training + validation time: 13.0 hours, 56.0 mins, and 15.80000000000291 secs
Final val loss: 0.8971260012686253

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_04_28_23 sample981: 1.605588674545288
dataset_04_28_23 sample324: 1.1890805959701538
dataset_04_28_23 sample3464: 0.9318687915802002
dataset_04_28_23 sample2834: 1.0735485553741455
dataset_04_28_23 sample1936: 0.9803203344345093
MSE_log: 1.156 +- 0.241

Downsampling (40%) Results:
dataset_04_28_23 sample1936-downsampling: 23.313819885253906
dataset_04_28_23 sample2834-downsampling: 11.4448881149292
dataset_04_28_23 sample324-downsampling: 19.91297721862793
dataset_04_28_23 sample3464-downsampling: 14.520187377929688
dataset_04_28_23 sample981-downsampling: 17.668460845947266
Loss: 17.372 +- 4.126

Removing /scratch/midway3/erschultz/ContactGNNEnergy19downsample
Original sampling (100%) Results:
dataset_04_28_23 sample1936-regular: 21.48139190673828
dataset_04_28_23 sample2834-regular: 11.660484313964844
dataset_04_28_23 sample324-regular: 17.993392944335938
dataset_04_28_23 sample3464-regular: 14.094329833984375
dataset_04_28_23 sample981-regular: 16.624858856201172
Loss: 16.371 +- 3.352

Removing /scratch/midway3/erschultz/ContactGNNEnergy19regsample

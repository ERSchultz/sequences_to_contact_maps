#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16906, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy17', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log_and_mse_center_log', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=469, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=True, input_L_to_D_mode='meandist_eigval', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/469', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/469/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/469/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/469/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log_and_mse_center_log at 0x7fed1005c670>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 15.177 minutes
Number of samples: 5000
Average num edges per graph:  61627.9772
Mean degree: [245.68 254.88 219.23 ... 251.09 215.5  255.  ] +- [ 9.13  0.37 26.94 ...  4.77 29.22  0.  ]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fecd6afd9d0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 2.9700
Mean test/val loss: 2.1807
[25, 50, 75] percentiles test/val loss: [1.4265 1.9023 2.5999]

Epoch 4, loss = 2.1926
Mean test/val loss: 1.9847
[25, 50, 75] percentiles test/val loss: [1.2918 1.7505 2.3886]

Epoch 6, loss = 10.9327
Mean test/val loss: 7.7382
[25, 50, 75] percentiles test/val loss: [ 4.0028  5.8585 10.5191]

Epoch 8, loss = 2.3569
Mean test/val loss: 1.9767
[25, 50, 75] percentiles test/val loss: [1.3185 1.7476 2.348 ]

Epoch 10, loss = 2.1799
Mean test/val loss: 1.9527
[25, 50, 75] percentiles test/val loss: [1.3356 1.7504 2.3015]

Epoch 12, loss = 10.1801
Mean test/val loss: 2.2659
[25, 50, 75] percentiles test/val loss: [1.3905 1.9378 2.702 ]

Epoch 14, loss = 2.2240
Mean test/val loss: 2.2948
[25, 50, 75] percentiles test/val loss: [1.4536 2.0556 2.8006]

Epoch 16, loss = 5.9554
Mean test/val loss: 3.0400
[25, 50, 75] percentiles test/val loss: [1.7125 2.6635 3.8878]

Epoch 18, loss = 13.3794
Mean test/val loss: 23.1350
[25, 50, 75] percentiles test/val loss: [11.4186 23.8821 33.4661]

Epoch 20, loss = 2.8905
Mean test/val loss: 2.0907
[25, 50, 75] percentiles test/val loss: [1.3023 1.78   2.565 ]

Epoch 22, loss = 8.2139
Mean test/val loss: 3.1707
[25, 50, 75] percentiles test/val loss: [2.1429 2.7373 3.6067]

Epoch 24, loss = 2.3963
Mean test/val loss: 2.1804
[25, 50, 75] percentiles test/val loss: [1.3946 1.9248 2.6315]

Epoch 26, loss = 2.1728
Mean test/val loss: 1.9533
[25, 50, 75] percentiles test/val loss: [1.3158 1.7554 2.3668]

Epoch 28, loss = 21.3416
Mean test/val loss: 2.2435
[25, 50, 75] percentiles test/val loss: [1.4826 1.9338 2.6746]

Epoch 30, loss = 2.1995
Mean test/val loss: 2.0897
[25, 50, 75] percentiles test/val loss: [1.3215 1.806  2.5163]

Epoch 32, loss = 19.5973
Mean test/val loss: 3.8879
[25, 50, 75] percentiles test/val loss: [2.8354 3.5399 4.5115]

Epoch 34, loss = 2.4443
Mean test/val loss: 2.0874
[25, 50, 75] percentiles test/val loss: [1.335  1.8335 2.5401]

Epoch 36, loss = 5.6893
Mean test/val loss: 2.1464
[25, 50, 75] percentiles test/val loss: [1.3345 1.8273 2.5759]

Epoch 38, loss = 3.6042
Mean test/val loss: 2.1090
[25, 50, 75] percentiles test/val loss: [1.3623 1.8644 2.5388]

Epoch 40, loss = 4.6917
Mean test/val loss: 1.8562
[25, 50, 75] percentiles test/val loss: [1.2709 1.6497 2.2151]

New lr: 1e-05
Epoch 42, loss = 1.8701
Mean test/val loss: 1.8148
[25, 50, 75] percentiles test/val loss: [1.2215 1.6279 2.1837]

Epoch 44, loss = 1.6163
Mean test/val loss: 1.6098
[25, 50, 75] percentiles test/val loss: [1.0842 1.4255 1.8335]

Epoch 46, loss = 1.5921
Mean test/val loss: 1.6011
[25, 50, 75] percentiles test/val loss: [1.0927 1.4128 1.8631]

Epoch 48, loss = 1.4507

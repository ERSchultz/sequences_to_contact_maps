#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_11_08_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy11', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=602, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/602', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/602/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/602/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/602/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f3ce16a6310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 22.025 minutes
Number of samples: 5000
Average num edges per graph:  64715.4148
Mean degree: [255.   255.   254.85 ... 255.   255.   255.  ] +- [0.  0.  0.5 ... 0.  0.  0. ]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f3c986ad550>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.9175
Mean test/val loss: 1.8012
[25, 50, 75] percentiles test/val loss: [0.9849 1.7399 2.4534]

Epoch 4, loss = 1.7862
Mean test/val loss: 1.6875
[25, 50, 75] percentiles test/val loss: [0.9606 1.6621 2.2661]

Epoch 6, loss = 1.6593
Mean test/val loss: 1.5356
[25, 50, 75] percentiles test/val loss: [0.9287 1.4499 2.0235]

Epoch 8, loss = 1.5131
Mean test/val loss: 1.4855
[25, 50, 75] percentiles test/val loss: [0.8674 1.3974 2.0175]

Epoch 10, loss = 1.4678
Mean test/val loss: 1.4155
[25, 50, 75] percentiles test/val loss: [0.8276 1.369  1.9008]

Epoch 12, loss = 1.3483
Mean test/val loss: 1.3052
[25, 50, 75] percentiles test/val loss: [0.7921 1.2288 1.736 ]

Epoch 14, loss = 1.4913
Mean test/val loss: 1.4074
[25, 50, 75] percentiles test/val loss: [0.8261 1.3651 1.8918]

Epoch 16, loss = 1.3089
Mean test/val loss: 1.2486
[25, 50, 75] percentiles test/val loss: [0.7268 1.1578 1.6593]

Epoch 18, loss = 1.2617
Mean test/val loss: 1.2297
[25, 50, 75] percentiles test/val loss: [0.7186 1.1592 1.6503]

Epoch 20, loss = 1.2107
Mean test/val loss: 1.2395
[25, 50, 75] percentiles test/val loss: [0.7218 1.1835 1.653 ]

Epoch 22, loss = 1.1683
Mean test/val loss: 1.1563
[25, 50, 75] percentiles test/val loss: [0.6764 1.0782 1.5048]

Epoch 24, loss = 1.1669
Mean test/val loss: 1.1401
[25, 50, 75] percentiles test/val loss: [0.6651 1.0684 1.4984]

Epoch 26, loss = 1.1432
Mean test/val loss: 1.1259
[25, 50, 75] percentiles test/val loss: [0.6653 1.0625 1.4624]

Epoch 28, loss = 1.1170
Mean test/val loss: 1.1351
[25, 50, 75] percentiles test/val loss: [0.6573 1.0633 1.4969]

Epoch 30, loss = 1.0993
Mean test/val loss: 1.1159
[25, 50, 75] percentiles test/val loss: [0.6771 1.0675 1.4708]

Epoch 32, loss = 1.0799
Mean test/val loss: 1.0986
[25, 50, 75] percentiles test/val loss: [0.6607 1.0333 1.4147]

Epoch 34, loss = 1.0656
Mean test/val loss: 1.0771
[25, 50, 75] percentiles test/val loss: [0.6463 1.0059 1.4321]

Epoch 36, loss = 1.0487
Mean test/val loss: 1.0972
[25, 50, 75] percentiles test/val loss: [0.6434 1.0126 1.4414]

Epoch 38, loss = 1.0346
Mean test/val loss: 1.0786
[25, 50, 75] percentiles test/val loss: [0.6368 0.9997 1.4094]

Epoch 40, loss = 1.0228
Mean test/val loss: 1.0570
[25, 50, 75] percentiles test/val loss: [0.6282 0.985  1.3695]

New lr: 1e-05
Epoch 42, loss = 0.9428
Mean test/val loss: 1.0015
[25, 50, 75] percentiles test/val loss: [0.5831 0.9313 1.3106]

Epoch 44, loss = 0.9294
Mean test/val loss: 0.9946
[25, 50, 75] percentiles test/val loss: [0.5774 0.9322 1.2931]

Epoch 46, loss = 0.9196
Mean test/val loss: 0.9922
[25, 50, 75] percentiles test/val loss: [0.5879 0.9297 1.3106]

Epoch 48, loss = 0.9116
Mean test/val loss: 0.9866
[25, 50, 75] percentiles test/val loss: [0.5775 0.915  1.2882]

Epoch 50, loss = 0.9042
Mean test/val loss: 0.9886
[25, 50, 75] percentiles test/val loss: [0.5819 0.92   1.2836]

Epoch 52, loss = 0.8976
Mean test/val loss: 0.9839
[25, 50, 75] percentiles test/val loss: [0.5726 0.9076 1.277 ]

Epoch 54, loss = 0.8913
Mean test/val loss: 0.9829
[25, 50, 75] percentiles test/val loss: [0.5778 0.9065 1.2699]

Epoch 56, loss = 0.8855
Mean test/val loss: 0.9820
[25, 50, 75] percentiles test/val loss: [0.5706 0.9072 1.2775]

Epoch 58, loss = 0.8800
Mean test/val loss: 0.9819
[25, 50, 75] percentiles test/val loss: [0.5786 0.9082 1.2745]

Epoch 60, loss = 0.8746
Mean test/val loss: 0.9809
[25, 50, 75] percentiles test/val loss: [0.5699 0.9056 1.2814]


Total parameters: 51479472
Total training + validation time: 9.0 hours, 9.0 mins, and 5.0 secs
Final val loss: 0.9808799266889692

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_11_08_23 sample981: 1.4388368129730225
dataset_11_08_23 sample324: 0.8066883683204651
dataset_11_08_23 sample3464: 2.093799591064453
dataset_11_08_23 sample2834: 1.440032720565796
dataset_11_08_23 sample1936: 1.4065821170806885
MSE Loss: 1.437 +- 0.407

Downsampling (200k) Results:

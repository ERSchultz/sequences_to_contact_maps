#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_10_14_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy10', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log_and_mse_kth_diagonal', loss_k=2, lambda1=1.0, lambda2=0.1, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=582, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/582', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/582/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/582/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/582/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<scripts.neural_nets.losses.MSE_log_and_MSE_kth_diagonal object at 0x7fd6d1d71760>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 18.234 minutes
Number of samples: 5000
Average num edges per graph:  65200.434
Mean degree: [255.   254.73 254.98 ... 255.   255.   254.94] +- [0.   0.96 0.15 ... 0.   0.   0.3 ]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fd6d1d0ef10>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 11.5083
Mean test/val loss: 11.4062
[25, 50, 75] percentiles test/val loss: [ 6.3144  9.5772 14.3454]

Epoch 4, loss = 10.5321
Mean test/val loss: 9.7469
[25, 50, 75] percentiles test/val loss: [ 4.6487  7.8944 13.0993]

Epoch 6, loss = 9.8900
Mean test/val loss: 8.7935
[25, 50, 75] percentiles test/val loss: [ 4.5227  6.9114 11.2918]

Epoch 8, loss = 9.2358
Mean test/val loss: 9.2868
[25, 50, 75] percentiles test/val loss: [ 4.6836  7.6548 12.0494]

Epoch 10, loss = 8.8685
Mean test/val loss: 8.2679
[25, 50, 75] percentiles test/val loss: [ 4.2684  6.4702 10.4251]

Epoch 12, loss = 8.4480
Mean test/val loss: 8.2434
[25, 50, 75] percentiles test/val loss: [ 4.1654  6.4624 10.1716]

Epoch 14, loss = 8.0449
Mean test/val loss: 8.2735
[25, 50, 75] percentiles test/val loss: [ 4.2032  6.4671 10.2522]

Epoch 16, loss = 7.7081
Mean test/val loss: 7.7998
[25, 50, 75] percentiles test/val loss: [4.22   6.227  9.4825]

Epoch 18, loss = 7.3368
Mean test/val loss: 7.0613
[25, 50, 75] percentiles test/val loss: [3.4114 5.4085 9.3966]

Epoch 20, loss = 6.8906
Mean test/val loss: 6.7833
[25, 50, 75] percentiles test/val loss: [3.3072 5.2919 8.4796]

Epoch 22, loss = 6.3364
Mean test/val loss: 6.2795
[25, 50, 75] percentiles test/val loss: [3.2133 4.979  7.7028]

Epoch 24, loss = 6.0449
Mean test/val loss: 5.9456
[25, 50, 75] percentiles test/val loss: [3.0489 4.5508 7.3069]

Epoch 26, loss = 5.7344
Mean test/val loss: 5.7888
[25, 50, 75] percentiles test/val loss: [2.854  4.2646 6.9897]

Epoch 28, loss = 5.4490
Mean test/val loss: 5.8075
[25, 50, 75] percentiles test/val loss: [2.9869 4.3649 6.7738]

Epoch 30, loss = 5.0934
Mean test/val loss: 5.6966
[25, 50, 75] percentiles test/val loss: [2.9305 4.3948 7.0019]

Epoch 32, loss = 4.9891
Mean test/val loss: 5.5182
[25, 50, 75] percentiles test/val loss: [2.7039 4.1334 6.8684]

Epoch 34, loss = 4.7646
Mean test/val loss: 5.3534
[25, 50, 75] percentiles test/val loss: [2.6826 4.1283 6.1454]

Epoch 36, loss = 4.5266
Mean test/val loss: 5.5731
[25, 50, 75] percentiles test/val loss: [2.9001 4.1403 6.8025]

Epoch 38, loss = 4.3119
Mean test/val loss: 5.2008
[25, 50, 75] percentiles test/val loss: [2.592  3.9778 6.2304]

Epoch 40, loss = 4.1559
Mean test/val loss: 4.9988
[25, 50, 75] percentiles test/val loss: [2.5301 3.7518 5.7085]

New lr: 1e-05
Epoch 42, loss = 3.2636
Mean test/val loss: 4.4669
[25, 50, 75] percentiles test/val loss: [2.2324 3.3122 5.2965]

Epoch 44, loss = 3.0885
Mean test/val loss: 4.4363
[25, 50, 75] percentiles test/val loss: [2.2197 3.3097 5.2162]

Epoch 46, loss = 2.9740
Mean test/val loss: 4.3860
[25, 50, 75] percentiles test/val loss: [2.192  3.34   5.0923]

Epoch 48, loss = 2.8825
Mean test/val loss: 4.3508
[25, 50, 75] percentiles test/val loss: [2.1573 3.2848 5.0797]

Epoch 50, loss = 2.8030
Mean test/val loss: 4.3084
[25, 50, 75] percentiles test/val loss: [2.1553 3.2452 5.0249]

Epoch 52, loss = 2.7316
Mean test/val loss: 4.2855
[25, 50, 75] percentiles test/val loss: [2.0897 3.2449 5.0974]

Epoch 54, loss = 2.6666
Mean test/val loss: 4.2711
[25, 50, 75] percentiles test/val loss: [2.1118 3.1958 5.0371]

Epoch 56, loss = 2.6083
Mean test/val loss: 4.2567
[25, 50, 75] percentiles test/val loss: [2.0899 3.1758 5.0723]

Epoch 58, loss = 2.5559
Mean test/val loss: 4.2409
[25, 50, 75] percentiles test/val loss: [2.08   3.1593 5.0064]

Epoch 60, loss = 2.5073
Mean test/val loss: 4.1875
[25, 50, 75] percentiles test/val loss: [2.0572 3.1215 4.8574]

Epoch 62, loss = 2.4647
Mean test/val loss: 4.2195
[25, 50, 75] percentiles test/val loss: [2.054  3.148  5.0429]

Epoch 64, loss = 2.4254
Mean test/val loss: 4.1624
[25, 50, 75] percentiles test/val loss: [2.0405 3.122  4.9084]

Epoch 66, loss = 2.3893
Mean test/val loss: 4.1525
[25, 50, 75] percentiles test/val loss: [2.0401 3.07   4.7772]

Epoch 68, loss = 2.3564
Mean test/val loss: 4.1879
[25, 50, 75] percentiles test/val loss: [2.0558 3.0496 4.9244]

Epoch 70, loss = 2.3265
Mean test/val loss: 4.1676
[25, 50, 75] percentiles test/val loss: [2.0481 3.1262 4.8734]


Total parameters: 51479472
Total training + validation time: 9.0 hours, 48.0 mins, and 5.099999999998545 secs
Final val loss: 4.167630692839622

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_10_14_23 sample981: 2.026814043521881
dataset_10_14_23 sample324: 8.215240597724915
dataset_10_14_23 sample3464: 8.395567417144775
dataset_10_14_23 sample2834: 6.946628093719482
dataset_10_14_23 sample1936: 1.4289848804473877
Loss1: 1.843, Loss2: 3.56
MSE_log+MSE_k_diag: 5.403 +- 3.048

Downsampling (200k) Results:

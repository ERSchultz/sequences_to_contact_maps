#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project/depablo/erschultz/dataset_02_14_24_imr90', '/project/depablo/erschultz/dataset_02_14_24_imr90'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy13', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=30, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[20], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, lambda3=1, grad_clip=None, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=679, pretrain_id=631, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', output_clip=None, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/679', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/679/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/679/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/679/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=2, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), eig=False, criterion=<function mse_log at 0x7f068e7b6160>, cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 19.131 minutes
Number of samples: 10000
Average num edges per graph:  62102.2108
Mean degree: [254.68 254.48 254.69 ... 221.59 251.38 228.71] +- [ 0.82  1.31  0.84 ... 27.88  5.25 28.1 ]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [3430, 293, 1403, 3806, 335, 2641, 4087, 3961, 744, 3076, 9, 4490, 4220, 3742, 3954, 4497, 2684, 3878, 2630, 3006, 3285, 1004, 1455, 4780, 1014, 1119, 807, 4753, 4480, 2761, 3302, 2639, 3374, 1950, 3738, 3503, 3727, 3348, 4229, 4972, 2859, 1126, 4893, 2378, 4424, 4554, 2693, 347, 2132, 3936, 1782, 2891, 1665, 2265, 4230, 3966, 2012, 2731, 1946, 520, 3105, 3202, 4939, 1801, 3723, 2755, 845, 4078, 3215, 2148, 903, 3189, 2751, 665, 4305, 1589, 2965, 3397, 3971, 3659, 1112, 1903, 3710, 3539, 4296, 1074, 3581, 1586, 2247, 2887, 356, 4019, 4706, 2558, 1779, 3402, 4448, 1203, 3808, 3837, 2397, 3649]
Pre-trained model is loaded.
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f068d85a9a0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.4212
Mean test/val loss: 0.4409
[25, 50, 75] percentiles test/val loss: [0.2655 0.3822 0.5656]

Epoch 4, loss = 0.3924
Mean test/val loss: 0.4090
[25, 50, 75] percentiles test/val loss: [0.2342 0.3528 0.5337]

Epoch 6, loss = 0.3748
Mean test/val loss: 0.3998
[25, 50, 75] percentiles test/val loss: [0.2354 0.3526 0.5287]

Epoch 8, loss = 0.3609
Mean test/val loss: 0.3821
[25, 50, 75] percentiles test/val loss: [0.2323 0.3388 0.5059]

Epoch 10, loss = 0.3503
Mean test/val loss: 0.3636
[25, 50, 75] percentiles test/val loss: [0.2126 0.321  0.4803]

Epoch 12, loss = 0.3421
Mean test/val loss: 0.3568
[25, 50, 75] percentiles test/val loss: [0.2079 0.3129 0.4772]

Epoch 14, loss = 0.3319
Mean test/val loss: 0.3519
[25, 50, 75] percentiles test/val loss: [0.2172 0.3148 0.4632]

Epoch 16, loss = 0.3246
Mean test/val loss: 0.3511
[25, 50, 75] percentiles test/val loss: [0.209  0.3173 0.4717]

Epoch 18, loss = 0.3181
Mean test/val loss: 0.3382
[25, 50, 75] percentiles test/val loss: [0.2019 0.3034 0.4526]

Epoch 20, loss = 0.3120
Mean test/val loss: 0.3426
[25, 50, 75] percentiles test/val loss: [0.2093 0.3062 0.4595]

New lr: 1e-05
Epoch 22, loss = 0.2683
Mean test/val loss: 0.2941
[25, 50, 75] percentiles test/val loss: [0.1744 0.2656 0.3937]

Epoch 24, loss = 0.2614
Mean test/val loss: 0.2890
[25, 50, 75] percentiles test/val loss: [0.1706 0.2608 0.3846]

Epoch 26, loss = 0.2566
Mean test/val loss: 0.2848
[25, 50, 75] percentiles test/val loss: [0.1703 0.2569 0.3796]

Epoch 28, loss = 0.2526
Mean test/val loss: 0.2810
[25, 50, 75] percentiles test/val loss: [0.169  0.2544 0.3751]

Epoch 30, loss = 0.2490
Mean test/val loss: 0.2783
[25, 50, 75] percentiles test/val loss: [0.1671 0.2512 0.3706]


Total parameters: 51478960
Total training + validation time: 24.0 hours, 18.0 mins, and 3.6999999999970896 secs
Final val loss: 0.2782582965418696

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_02_14_24_imr90 sample1051: 0.18526355922222137
dataset_02_14_24_imr90 sample3302: 0.33724483847618103
dataset_02_14_24_imr90 sample1560: 0.18866288661956787
dataset_02_14_24_imr90 sample2453: 0.08331764489412308
dataset_02_14_24_imr90 sample302: 0.2566235065460205
MSE_log: 0.21 +- 0.084

Downsampling (200k) Results:
Original sampling (400k) Results:

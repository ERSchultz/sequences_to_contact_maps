#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16896, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy13', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=1e-05, min_lr=1e-06, weight_decay=0.001, gpus=1, scheduler='MultiStepLR', milestones=[30], gamma=0.1, patience=10, loss='mse_log', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=474, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=True, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/474', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/474/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/474/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/474/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7fb511dad5e0>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 13.264 minutes
Number of samples: 5000
Average num edges per graph:  61627.9772
Mean degree: [245.68 254.88 219.23 ... 251.09 215.5  255.  ] +- [ 9.13  0.37 26.94 ...  4.77 29.22  0.  ]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 1e-05
    weight_decay: 0.001
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fb4dc348ac0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.7799
Mean test/val loss: 0.7878
[25, 50, 75] percentiles test/val loss: [0.3729 0.6535 1.0238]

Epoch 4, loss = 0.7411
Mean test/val loss: 0.7404
[25, 50, 75] percentiles test/val loss: [0.3441 0.5991 0.944 ]

Epoch 6, loss = 0.6806
Mean test/val loss: 0.6917
[25, 50, 75] percentiles test/val loss: [0.3232 0.5387 0.8578]

Epoch 8, loss = 0.6528
Mean test/val loss: 0.6621
[25, 50, 75] percentiles test/val loss: [0.3014 0.5094 0.8345]

Epoch 10, loss = 0.7884
Mean test/val loss: 0.7458
[25, 50, 75] percentiles test/val loss: [0.3676 0.599  0.953 ]

Epoch 12, loss = 0.7359
Mean test/val loss: 0.7303
[25, 50, 75] percentiles test/val loss: [0.3551 0.5725 0.9223]

Epoch 14, loss = 0.6993
Mean test/val loss: 0.7045
[25, 50, 75] percentiles test/val loss: [0.3252 0.5425 0.8984]

Epoch 16, loss = 0.7181
Mean test/val loss: 0.7319
[25, 50, 75] percentiles test/val loss: [0.35   0.5732 0.9155]

Epoch 18, loss = 0.6566
Mean test/val loss: 0.6688
[25, 50, 75] percentiles test/val loss: [0.3098 0.5177 0.8297]

Epoch 20, loss = 0.6308
Mean test/val loss: 0.6377
[25, 50, 75] percentiles test/val loss: [0.2868 0.4835 0.7996]

Epoch 22, loss = 0.6798
Mean test/val loss: 0.7030
[25, 50, 75] percentiles test/val loss: [0.3455 0.5547 0.8654]

Epoch 24, loss = 0.6791
Mean test/val loss: 0.6889
[25, 50, 75] percentiles test/val loss: [0.3125 0.5184 0.8699]

Epoch 26, loss = 0.6467
Mean test/val loss: 0.6474
[25, 50, 75] percentiles test/val loss: [0.2954 0.4814 0.8105]

Epoch 28, loss = 0.6282
Mean test/val loss: 0.6392
[25, 50, 75] percentiles test/val loss: [0.3089 0.4871 0.7891]

Epoch 30, loss = 0.5988
Mean test/val loss: 0.6209
[25, 50, 75] percentiles test/val loss: [0.2808 0.472  0.7844]

New lr: 1.0000000000000002e-06
Epoch 32, loss = 0.5806
Mean test/val loss: 0.6005
[25, 50, 75] percentiles test/val loss: [0.2706 0.4515 0.7442]

Epoch 34, loss = 0.5777
Mean test/val loss: 0.5990
[25, 50, 75] percentiles test/val loss: [0.2668 0.4485 0.7417]

Epoch 36, loss = 0.5757
Mean test/val loss: 0.5972
[25, 50, 75] percentiles test/val loss: [0.2671 0.4503 0.739 ]

Epoch 38, loss = 0.5738
Mean test/val loss: 0.5953
[25, 50, 75] percentiles test/val loss: [0.2678 0.4497 0.7373]

Epoch 40, loss = 0.5721
Mean test/val loss: 0.5973
[25, 50, 75] percentiles test/val loss: [0.2711 0.4499 0.7346]

Epoch 42, loss = 0.5711
Mean test/val loss: 0.5942
[25, 50, 75] percentiles test/val loss: [0.2684 0.447  0.7354]

Epoch 44, loss = 0.5696
Mean test/val loss: 0.5929
[25, 50, 75] percentiles test/val loss: [0.2646 0.4468 0.7297]

Epoch 46, loss = 0.5689
Mean test/val loss: 0.5908
[25, 50, 75] percentiles test/val loss: [0.262  0.4442 0.733 ]

Epoch 48, loss = 0.5674
Mean test/val loss: 0.5884
[25, 50, 75] percentiles test/val loss: [0.2611 0.4432 0.7212]

Epoch 50, loss = 0.5663
Mean test/val loss: 0.5904
[25, 50, 75] percentiles test/val loss: [0.2613 0.4452 0.7364]

Epoch 52, loss = 0.5653
Mean test/val loss: 0.5866
[25, 50, 75] percentiles test/val loss: [0.2612 0.4411 0.7237]

Epoch 54, loss = 0.5641
Mean test/val loss: 0.5871
[25, 50, 75] percentiles test/val loss: [0.2672 0.4434 0.722 ]

Epoch 56, loss = 0.5629
Mean test/val loss: 0.5844
[25, 50, 75] percentiles test/val loss: [0.2597 0.4364 0.718 ]

Epoch 58, loss = 0.5651
Mean test/val loss: 0.6254
[25, 50, 75] percentiles test/val loss: [0.2934 0.4652 0.7824]

Epoch 60, loss = 0.5914
Mean test/val loss: 0.6272
[25, 50, 75] percentiles test/val loss: [0.2674 0.4459 0.7543]


Total parameters: 26974000
Total training + validation time: 13.0 hours, 36.0 mins, and 29.69999999999709 secs
Final val loss: 0.6272318443246185

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_04_28_23 sample981: 1.2342779636383057
dataset_04_28_23 sample324: 0.9584189653396606
dataset_04_28_23 sample3464: 0.8895195722579956
dataset_04_28_23 sample2834: 0.7710490226745605
dataset_04_28_23 sample1936: 0.5731423497200012
MSE_log: 0.885 +- 0.218

Downsampling (40%) Results:
dataset_04_28_23 sample1936-downsampling: 16.82955551147461
dataset_04_28_23 sample2834-downsampling: 9.00631332397461
dataset_04_28_23 sample324-downsampling: 16.366455078125
dataset_04_28_23 sample3464-downsampling: 13.241703033447266
dataset_04_28_23 sample981-downsampling: 13.451957702636719
Loss: 13.779 +- 2.799

Removing /scratch/midway3/erschultz/ContactGNNEnergy13downsample
Original sampling (100%) Results:
dataset_04_28_23 sample1936-regular: 11.826738357543945
dataset_04_28_23 sample2834-regular: 8.296639442443848
dataset_04_28_23 sample324-regular: 14.116800308227539
dataset_04_28_23 sample3464-regular: 12.968850135803223
dataset_04_28_23 sample981-regular: 12.193405151367188
Loss: 11.88 +- 1.956

Removing /scratch/midway3/erschultz/ContactGNNEnergy13regsample

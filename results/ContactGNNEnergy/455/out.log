#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy11', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='center_log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=455, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/455', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/455/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/455/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/455/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f4de8bb33a0>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 18.491 minutes
Number of samples: 5000
Average num edges per graph:  61627.9772
Mean degree: [245.68 254.88 219.23 ... 251.09 215.5  255.  ] +- [ 9.13  0.37 26.94 ...  4.77 29.22  0.  ]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f4da3accd30>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.0099
Mean test/val loss: 0.9386
[25, 50, 75] percentiles test/val loss: [0.67   0.8539 1.1035]

Epoch 4, loss = 0.8349
Mean test/val loss: 0.8475
[25, 50, 75] percentiles test/val loss: [0.5903 0.7609 1.0214]

Epoch 6, loss = 0.7516
Mean test/val loss: 0.7547
[25, 50, 75] percentiles test/val loss: [0.5307 0.6797 0.8971]

Epoch 8, loss = 0.6879
Mean test/val loss: 0.7024
[25, 50, 75] percentiles test/val loss: [0.5064 0.6408 0.8134]

Epoch 10, loss = 0.6488
Mean test/val loss: 0.6671
[25, 50, 75] percentiles test/val loss: [0.4787 0.6144 0.7736]

Epoch 12, loss = 0.6210
Mean test/val loss: 0.6214
[25, 50, 75] percentiles test/val loss: [0.4437 0.5625 0.7247]

Epoch 14, loss = 0.5945
Mean test/val loss: 0.5917
[25, 50, 75] percentiles test/val loss: [0.4173 0.5372 0.6937]

Epoch 16, loss = 0.5755
Mean test/val loss: 0.5917
[25, 50, 75] percentiles test/val loss: [0.4152 0.5362 0.6915]

Epoch 18, loss = 0.5590
Mean test/val loss: 0.5750
[25, 50, 75] percentiles test/val loss: [0.4025 0.5264 0.6742]

Epoch 20, loss = 0.5420
Mean test/val loss: 0.5548
[25, 50, 75] percentiles test/val loss: [0.3858 0.5066 0.6472]

Epoch 22, loss = 0.5282
Mean test/val loss: 0.5481
[25, 50, 75] percentiles test/val loss: [0.3806 0.4979 0.6255]

Epoch 24, loss = 0.5147
Mean test/val loss: 0.5552
[25, 50, 75] percentiles test/val loss: [0.381  0.4983 0.6369]

Epoch 26, loss = 0.5041
Mean test/val loss: 0.5565
[25, 50, 75] percentiles test/val loss: [0.3962 0.5115 0.6404]

Epoch 28, loss = 0.4946
Mean test/val loss: 0.5253
[25, 50, 75] percentiles test/val loss: [0.3639 0.4733 0.6024]

Epoch 30, loss = 0.4847
Mean test/val loss: 0.5250
[25, 50, 75] percentiles test/val loss: [0.3634 0.4725 0.6024]

Epoch 32, loss = 0.4786
Mean test/val loss: 0.5155
[25, 50, 75] percentiles test/val loss: [0.3653 0.4607 0.5894]

Epoch 34, loss = 0.4692
Mean test/val loss: 0.5163
[25, 50, 75] percentiles test/val loss: [0.3612 0.4644 0.592 ]

Epoch 36, loss = 0.4618
Mean test/val loss: 0.5024
[25, 50, 75] percentiles test/val loss: [0.3512 0.4518 0.5782]

Epoch 38, loss = 0.4566
Mean test/val loss: 0.5024
[25, 50, 75] percentiles test/val loss: [0.3531 0.4543 0.5731]

Epoch 40, loss = 0.4499
Mean test/val loss: 0.5023
[25, 50, 75] percentiles test/val loss: [0.3464 0.447  0.5726]

New lr: 1e-05
Epoch 42, loss = 0.4087
Mean test/val loss: 0.4697
[25, 50, 75] percentiles test/val loss: [0.3261 0.4221 0.5316]

Epoch 44, loss = 0.4029
Mean test/val loss: 0.4665
[25, 50, 75] percentiles test/val loss: [0.3268 0.4189 0.5299]

Epoch 46, loss = 0.3991
Mean test/val loss: 0.4642
[25, 50, 75] percentiles test/val loss: [0.323  0.4152 0.5279]

Epoch 48, loss = 0.3961
Mean test/val loss: 0.4654
[25, 50, 75] percentiles test/val loss: [0.3237 0.4152 0.5254]

Epoch 50, loss = 0.3934
Mean test/val loss: 0.4645
[25, 50, 75] percentiles test/val loss: [0.3221 0.4134 0.5288]

Epoch 52, loss = 0.3911
Mean test/val loss: 0.4630
[25, 50, 75] percentiles test/val loss: [0.3216 0.4124 0.5289]

Epoch 54, loss = 0.3888
Mean test/val loss: 0.4625
[25, 50, 75] percentiles test/val loss: [0.3223 0.4143 0.5299]

Epoch 56, loss = 0.3868
Mean test/val loss: 0.4621
[25, 50, 75] percentiles test/val loss: [0.3229 0.4084 0.528 ]

Epoch 58, loss = 0.3850
Mean test/val loss: 0.4611
[25, 50, 75] percentiles test/val loss: [0.3215 0.4094 0.5253]

Epoch 60, loss = 0.3832
Mean test/val loss: 0.4604
[25, 50, 75] percentiles test/val loss: [0.3184 0.4084 0.5257]

Epoch 62, loss = 0.3816
Mean test/val loss: 0.4603
[25, 50, 75] percentiles test/val loss: [0.3197 0.4091 0.5262]

Epoch 64, loss = 0.3800
Mean test/val loss: 0.4605
[25, 50, 75] percentiles test/val loss: [0.3211 0.4085 0.5234]

Epoch 66, loss = 0.3785
Mean test/val loss: 0.4591
[25, 50, 75] percentiles test/val loss: [0.3167 0.4075 0.5266]

Epoch 68, loss = 0.3770
Mean test/val loss: 0.4596
[25, 50, 75] percentiles test/val loss: [0.3213 0.4068 0.5288]

Epoch 70, loss = 0.3756
Mean test/val loss: 0.4584
[25, 50, 75] percentiles test/val loss: [0.3165 0.406  0.5275]

Epoch 72, loss = 0.3741
Mean test/val loss: 0.4586
[25, 50, 75] percentiles test/val loss: [0.3153 0.408  0.5248]

Epoch 74, loss = 0.3729
Mean test/val loss: 0.4579
[25, 50, 75] percentiles test/val loss: [0.3152 0.4046 0.5254]

Epoch 76, loss = 0.3716
Mean test/val loss: 0.4576
[25, 50, 75] percentiles test/val loss: [0.3169 0.4045 0.5232]

Epoch 78, loss = 0.3703
Mean test/val loss: 0.4577
[25, 50, 75] percentiles test/val loss: [0.3162 0.4044 0.5235]

Epoch 80, loss = 0.3690
Mean test/val loss: 0.4571
[25, 50, 75] percentiles test/val loss: [0.3164 0.4029 0.5264]


Total parameters: 26462000
Total training + validation time: 8.0 hours, 19.0 mins, and 16.700000000000728 secs
Final val loss: 0.4570538005977869

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_04_28_23 sample981: 0.4650012254714966
dataset_04_28_23 sample324: 0.588434100151062
dataset_04_28_23 sample3464: 0.46861544251441956
dataset_04_28_23 sample2834: 0.44685351848602295
dataset_04_28_23 sample1936: 0.3757682144641876
Loss: 0.469 +- 0.069

Downsampling (40%) Results:
dataset_04_28_23 sample1936-downsampling: 0.37576818466186523
dataset_04_28_23 sample2834-downsampling: 0.434425413608551
dataset_04_28_23 sample324-downsampling: 0.6074502468109131
dataset_04_28_23 sample3464-downsampling: 0.8556574583053589
dataset_04_28_23 sample981-downsampling: 0.833317756652832
Loss: 0.621 +- 0.198

Removing /scratch/midway3/erschultz/ContactGNNEnergy11downsample
Original sampling (100%) Results:
dataset_04_28_23 sample1936-regular: 0.3242648243904114
dataset_04_28_23 sample2834-regular: 0.44362372159957886
dataset_04_28_23 sample324-regular: 0.56102055311203
dataset_04_28_23 sample3464-regular: 0.46861532330513
dataset_04_28_23 sample981-regular: 0.4475570023059845
Loss: 0.449 +- 0.076

Removing /scratch/midway3/erschultz/ContactGNNEnergy11regsample

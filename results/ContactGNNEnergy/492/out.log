#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_25_23', '/project2/depablo/erschultz/dataset_09_26_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy20', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=492, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/492', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/492/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/492/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/492/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fd4b3dcd3a0>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 90.255 minutes
Number of samples: 20000
Average num edges per graph:  62801.8978
Mean degree: [253.75 246.4  253.84 ... 251.91 252.98 224.51] +- [ 1.34 11.62  2.58 ...  4.55  3.3  39.61]

split sizes: train=18000, val=2000, test=0, N=20000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fd472c2a8e0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.8944
Mean test/val loss: 0.8140
[25, 50, 75] percentiles test/val loss: [0.4185 0.6811 1.0541]

Epoch 4, loss = 0.7658
Mean test/val loss: 0.7345
[25, 50, 75] percentiles test/val loss: [0.384  0.6162 0.9603]

Epoch 6, loss = 0.7047
Mean test/val loss: 0.7041
[25, 50, 75] percentiles test/val loss: [0.3606 0.5993 0.9134]

Epoch 8, loss = 0.6660
Mean test/val loss: 0.6551
[25, 50, 75] percentiles test/val loss: [0.3334 0.5594 0.8534]

Epoch 10, loss = 0.6392
Mean test/val loss: 0.6210
[25, 50, 75] percentiles test/val loss: [0.3167 0.5138 0.8078]

Epoch 12, loss = 0.6182
Mean test/val loss: 0.6193
[25, 50, 75] percentiles test/val loss: [0.335  0.5238 0.7973]

Epoch 14, loss = 0.5979
Mean test/val loss: 0.5998
[25, 50, 75] percentiles test/val loss: [0.3078 0.5007 0.7928]

Epoch 16, loss = 0.5802
Mean test/val loss: 0.5972
[25, 50, 75] percentiles test/val loss: [0.3136 0.5049 0.7772]

Epoch 18, loss = 0.5650
Mean test/val loss: 0.5671
[25, 50, 75] percentiles test/val loss: [0.2973 0.475  0.7346]

Epoch 20, loss = 0.5512
Mean test/val loss: 0.5810
[25, 50, 75] percentiles test/val loss: [0.2985 0.4896 0.76  ]

Epoch 22, loss = 0.5408
Mean test/val loss: 0.5598
[25, 50, 75] percentiles test/val loss: [0.2914 0.4739 0.7258]

Epoch 24, loss = 0.5364
Mean test/val loss: 0.5432
[25, 50, 75] percentiles test/val loss: [0.279  0.4607 0.7099]

Epoch 26, loss = 0.5235
Mean test/val loss: 0.5718
[25, 50, 75] percentiles test/val loss: [0.3145 0.4845 0.7333]

Epoch 28, loss = 0.5159
Mean test/val loss: 0.5336
[25, 50, 75] percentiles test/val loss: [0.2729 0.4476 0.7019]

Epoch 30, loss = 0.5093
Mean test/val loss: 0.5264
[25, 50, 75] percentiles test/val loss: [0.2653 0.4423 0.6855]

Epoch 32, loss = 0.5039
Mean test/val loss: 0.5194
[25, 50, 75] percentiles test/val loss: [0.2705 0.4396 0.6769]

Epoch 34, loss = 0.4969
Mean test/val loss: 0.5174
[25, 50, 75] percentiles test/val loss: [0.2625 0.4369 0.6754]

Epoch 36, loss = 0.4915
Mean test/val loss: 0.5840
[25, 50, 75] percentiles test/val loss: [0.3226 0.4977 0.7521]

Epoch 38, loss = 0.4884
Mean test/val loss: 0.5132
[25, 50, 75] percentiles test/val loss: [0.2655 0.4341 0.6765]

Epoch 40, loss = 0.4825
Mean test/val loss: 0.5178
[25, 50, 75] percentiles test/val loss: [0.2739 0.4428 0.674 ]

New lr: 1e-05
Epoch 42, loss = 0.4394
Mean test/val loss: 0.4749
[25, 50, 75] percentiles test/val loss: [0.244  0.3986 0.6275]

Epoch 44, loss = 0.4338
Mean test/val loss: 0.4723
[25, 50, 75] percentiles test/val loss: [0.24   0.397  0.6228]

Epoch 46, loss = 0.4301
Mean test/val loss: 0.4708
[25, 50, 75] percentiles test/val loss: [0.2404 0.3952 0.6197]

Epoch 48, loss = 0.4270
Mean test/val loss: 0.4695
[25, 50, 75] percentiles test/val loss: [0.2402 0.3943 0.6169]

Epoch 50, loss = 0.4244
Mean test/val loss: 0.4690
[25, 50, 75] percentiles test/val loss: [0.2391 0.3937 0.6151]

Epoch 52, loss = 0.4220
#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_25_23', '/project2/depablo/erschultz/dataset_09_26_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy20', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=492, pretrain_id=None, resume_training=True, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/492', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/492/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/492/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/492/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f25abb77310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 0.188 minutes
Number of samples: 20000
Average num edges per graph:  nan
Num edges per graph:  []
split sizes: train=18000, val=2000, test=0, N=20000
Partially-trained model is loaded.
Starting at epoch 51
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f256a9605e0>
#### TRAINING/VALIDATION ####
New lr: 1e-05
Epoch 52, loss = 0.4220
Mean test/val loss: 0.4678
[25, 50, 75] percentiles test/val loss: [0.2386 0.392  0.6169]

Epoch 54, loss = 0.4198
Mean test/val loss: 0.4675
[25, 50, 75] percentiles test/val loss: [0.2374 0.3912 0.6131]

Epoch 56, loss = 0.4178
Mean test/val loss: 0.4669
[25, 50, 75] percentiles test/val loss: [0.2378 0.3904 0.614 ]

Epoch 58, loss = 0.4159
Mean test/val loss: 0.4662
[25, 50, 75] percentiles test/val loss: [0.2372 0.391  0.6138]

Epoch 60, loss = 0.4142
Mean test/val loss: 0.4656
[25, 50, 75] percentiles test/val loss: [0.2359 0.3887 0.6127]

Epoch 62, loss = 0.4126
Mean test/val loss: 0.4658
[25, 50, 75] percentiles test/val loss: [0.2369 0.3879 0.6115]

Epoch 64, loss = 0.4110
Mean test/val loss: 0.4645
[25, 50, 75] percentiles test/val loss: [0.2356 0.3888 0.613 ]

Epoch 66, loss = 0.4096
Mean test/val loss: 0.4659
[25, 50, 75] percentiles test/val loss: [0.2369 0.3903 0.6155]

Epoch 68, loss = 0.4082
Mean test/val loss: 0.4638
[25, 50, 75] percentiles test/val loss: [0.2362 0.3868 0.6102]

Epoch 70, loss = 0.4068
Mean test/val loss: 0.4636
[25, 50, 75] percentiles test/val loss: [0.2348 0.3883 0.6103]

Epoch 72, loss = 0.4055
Mean test/val loss: 0.4638
[25, 50, 75] percentiles test/val loss: [0.2349 0.3863 0.61  ]

Epoch 74, loss = 0.4043
Mean test/val loss: 0.4628
[25, 50, 75] percentiles test/val loss: [0.2334 0.3858 0.6104]

Epoch 76, loss = 0.4031
Mean test/val loss: 0.4628
[25, 50, 75] percentiles test/val loss: [0.2344 0.3848 0.6112]

Epoch 78, loss = 0.4019
Mean test/val loss: 0.4628
[25, 50, 75] percentiles test/val loss: [0.2361 0.3865 0.6107]

Epoch 80, loss = 0.4008
Mean test/val loss: 0.4621
[25, 50, 75] percentiles test/val loss: [0.2349 0.3862 0.6102]


Total parameters: 26462000
Total training + validation time: 14.0 hours, 18.0 mins, and 43.900000000001455 secs
Final val loss: 0.4621357254943578

split sizes: train=18000, val=2000, test=0, N=20000
#### Plotting Script ####
Prediction Results:
dataset_09_25_23 sample3029: 0.23052124679088593
dataset_09_25_23 sample6555: 0.31030184030532837
dataset_09_25_23 sample9227: 0.6087741255760193
dataset_09_25_23 sample8097: 0.2463057041168213
dataset_09_26_23 sample9394: 0.7788770198822021
MSE Loss: 0.435 +- 0.22

Downsampling (40%) Results:
dataset_09_25_23 sample3029-downsampling: 9.985332489013672
dataset_09_25_23 sample6555-downsampling: 99.7298812866211
dataset_09_25_23 sample8097-downsampling: 19.517627716064453
dataset_09_25_23 sample9227-downsampling: 177.15780639648438
dataset_09_25_23 sample9394-downsampling: 52.87451934814453
Loss: 70.665 +- 52.695

Removing /scratch/midway3/erschultz/ContactGNNEnergy20downsample
Original sampling (100%) Results:

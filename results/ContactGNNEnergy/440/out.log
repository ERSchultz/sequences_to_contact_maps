#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy0', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym', model_type='ContactGNNEnergy', id=440, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/440', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/440/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/440/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/440/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f88dd0ad310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 16.458 minutes
Number of samples: 5000
Average num edges per graph:  61627.9772
Mean degree: [245.68 254.88 219.23 ... 251.09 215.5  255.  ] +- [ 9.13  0.37 26.94 ...  4.77 29.22  0.  ]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f88a2f7f100>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.0147
Mean test/val loss: 0.9141
[25, 50, 75] percentiles test/val loss: [0.5994 0.821  1.1241]

Epoch 4, loss = 0.7677
Mean test/val loss: 0.9632
[25, 50, 75] percentiles test/val loss: [0.689  0.8957 1.171 ]

Epoch 6, loss = 0.6973
Mean test/val loss: 0.6728
[25, 50, 75] percentiles test/val loss: [0.4227 0.6014 0.8334]

Epoch 8, loss = 0.6247
Mean test/val loss: 0.6914
[25, 50, 75] percentiles test/val loss: [0.4599 0.6303 0.8477]

Epoch 10, loss = 13.2151
Mean test/val loss: 0.7194
[25, 50, 75] percentiles test/val loss: [0.4653 0.6558 0.8547]

Epoch 12, loss = 0.5642
Mean test/val loss: 0.5812
[25, 50, 75] percentiles test/val loss: [0.3649 0.513  0.7233]

Epoch 14, loss = 0.5529
Mean test/val loss: 0.5797
[25, 50, 75] percentiles test/val loss: [0.3495 0.517  0.7262]

Epoch 16, loss = 0.5406
Mean test/val loss: 0.5643
[25, 50, 75] percentiles test/val loss: [0.344  0.5083 0.7106]

Epoch 18, loss = 0.5162
Mean test/val loss: 0.5407
[25, 50, 75] percentiles test/val loss: [0.3378 0.4831 0.6606]

Epoch 20, loss = 0.5000
Mean test/val loss: 0.5336
[25, 50, 75] percentiles test/val loss: [0.3361 0.4739 0.6473]

Epoch 22, loss = 0.4809
Mean test/val loss: 0.5206
[25, 50, 75] percentiles test/val loss: [0.3286 0.4652 0.6186]

Epoch 24, loss = 0.4638
Mean test/val loss: 0.4957
[25, 50, 75] percentiles test/val loss: [0.3129 0.4457 0.5868]

Epoch 26, loss = 0.4509
Mean test/val loss: 0.5042
[25, 50, 75] percentiles test/val loss: [0.3247 0.4477 0.5989]

Epoch 28, loss = 0.4382
Mean test/val loss: 0.4715
[25, 50, 75] percentiles test/val loss: [0.2929 0.4209 0.5722]

Epoch 30, loss = 0.4263
Mean test/val loss: 0.4676
[25, 50, 75] percentiles test/val loss: [0.3023 0.4225 0.5519]

Epoch 32, loss = 0.4175
Mean test/val loss: 0.4613
[25, 50, 75] percentiles test/val loss: [0.2852 0.4191 0.5468]

Epoch 34, loss = 0.4078
Mean test/val loss: 0.4660
[25, 50, 75] percentiles test/val loss: [0.2891 0.4202 0.5655]

Epoch 36, loss = 0.4008
Mean test/val loss: 0.4405
[25, 50, 75] percentiles test/val loss: [0.2682 0.3842 0.5182]

Epoch 38, loss = 0.3922
Mean test/val loss: 0.4325
[25, 50, 75] percentiles test/val loss: [0.2644 0.3855 0.5152]

Epoch 40, loss = 0.3856
Mean test/val loss: 0.4328
[25, 50, 75] percentiles test/val loss: [0.2661 0.3833 0.5134]

New lr: 1e-05
Epoch 42, loss = 0.3440
Mean test/val loss: 0.4039
[25, 50, 75] percentiles test/val loss: [0.2441 0.3559 0.4748]

Epoch 44, loss = 0.3385
Mean test/val loss: 0.4019
[25, 50, 75] percentiles test/val loss: [0.2417 0.3521 0.4778]

Epoch 46, loss = 0.3347
Mean test/val loss: 0.3999
[25, 50, 75] percentiles test/val loss: [0.2404 0.3538 0.4746]

Epoch 48, loss = 0.3314
Mean test/val loss: 0.4003
[25, 50, 75] percentiles test/val loss: [0.2384 0.3519 0.4735]

Epoch 50, loss = 0.3286
Mean test/val loss: 0.3980
[25, 50, 75] percentiles test/val loss: [0.2375 0.3478 0.4715]

Epoch 52, loss = 0.3260
Mean test/val loss: 0.3965
[25, 50, 75] percentiles test/val loss: [0.2339 0.3471 0.469 ]

Epoch 54, loss = 0.3236
Mean test/val loss: 0.3963
[25, 50, 75] percentiles test/val loss: [0.2349 0.3471 0.4666]

Epoch 56, loss = 0.3215
Mean test/val loss: 0.3963
[25, 50, 75] percentiles test/val loss: [0.2338 0.3466 0.4637]

Epoch 58, loss = 0.3193
Mean test/val loss: 0.3957
[25, 50, 75] percentiles test/val loss: [0.2365 0.346  0.4621]

Epoch 60, loss = 0.3174
Mean test/val loss: 0.3954
[25, 50, 75] percentiles test/val loss: [0.234  0.3444 0.4675]

Epoch 62, loss = 0.3155
Mean test/val loss: 0.3936
[25, 50, 75] percentiles test/val loss: [0.2322 0.3431 0.4642]

Epoch 64, loss = 0.3137
Mean test/val loss: 0.3939
[25, 50, 75] percentiles test/val loss: [0.2331 0.3406 0.4638]

Epoch 66, loss = 0.3120
Mean test/val loss: 0.3936
[25, 50, 75] percentiles test/val loss: [0.2342 0.3403 0.4622]

Epoch 68, loss = 0.3103
Mean test/val loss: 0.3936
[25, 50, 75] percentiles test/val loss: [0.2315 0.3398 0.4649]

Epoch 70, loss = 0.3087
Mean test/val loss: 0.3923
[25, 50, 75] percentiles test/val loss: [0.2342 0.3381 0.4642]

Epoch 72, loss = 0.3072
Mean test/val loss: 0.3923
[25, 50, 75] percentiles test/val loss: [0.2328 0.3393 0.4582]

Epoch 74, loss = 0.3056
Mean test/val loss: 0.3930
[25, 50, 75] percentiles test/val loss: [0.232  0.3385 0.4616]

Epoch 76, loss = 0.3043
Mean test/val loss: 0.3918
[25, 50, 75] percentiles test/val loss: [0.231  0.3374 0.4611]

Epoch 78, loss = 0.3029
Mean test/val loss: 0.3910
[25, 50, 75] percentiles test/val loss: [0.23   0.338  0.4588]

Epoch 80, loss = 0.3014
Mean test/val loss: 0.3910
[25, 50, 75] percentiles test/val loss: [0.2308 0.3387 0.4569]


Total parameters: 26462000
Total training + validation time: 8.0 hours, 23.0 mins, and 44.900000000001455 secs
Final val loss: 0.3910204419195652

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_04_28_23 sample981: 0.2219817340373993
dataset_04_28_23 sample324: 0.41373687982559204
dataset_04_28_23 sample3464: 0.4405050575733185
dataset_04_28_23 sample2834: 0.24897535145282745
dataset_04_28_23 sample1936: 0.33414942026138306
Loss: 0.332 +- 0.087

Downsampling (40%) Results:
dataset_04_28_23 sample1936-downsampling: 3.795116424560547
dataset_04_28_23 sample2834-downsampling: 4.209589004516602
dataset_04_28_23 sample324-downsampling: 7.955609321594238
dataset_04_28_23 sample3464-downsampling: 5.282979965209961
dataset_04_28_23 sample981-downsampling: 7.960362434387207
Loss: 5.841 +- 1.796

Removing /scratch/midway3/erschultz/ContactGNNEnergy0downsample
Original sampling (100%) Results:
dataset_04_28_23 sample1936-regular: 3.4641261100769043
dataset_04_28_23 sample2834-regular: 4.706954002380371
dataset_04_28_23 sample324-regular: 5.967319488525391
dataset_04_28_23 sample3464-regular: 4.691468238830566
dataset_04_28_23 sample981-regular: 7.574786186218262
Loss: 5.281 +- 1.394

Removing /scratch/midway3/erschultz/ContactGNNEnergy0regsample

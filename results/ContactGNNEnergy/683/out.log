#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_02_28_24_imr90'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy13', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, lambda3=1, grad_clip=None, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', save_early_stop=False, model_type='ContactGNNEnergy', id=683, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', output_clip=None, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/683', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/683/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/683/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/683/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=2, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), eig=False, criterion=<function mse_log at 0x7f57a52a64c0>, cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 20.902 minutes
Number of samples: 5000
Average num edges per graph:  62162.922
Mean degree: [214.57 254.41 243.81 ... 254.65 254.12 249.45] +- [28.42  1.46 15.54 ...  0.92  1.56  7.56]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [1640, 1672, 3464, 831, 1651, 2678, 861, 3660, 267, 810, 2325, 2890, 3805, 4444, 2956, 1308, 3942, 2151, 3235, 1362, 566, 1440, 3319, 161, 206, 459, 3674, 4352, 2576, 4555, 753, 2322, 275, 745, 2876, 2221, 1309, 2628, 2363, 1906, 2834, 3684, 166, 3987, 3663, 1549, 981, 3237, 803, 1932, 3661, 4977, 4056, 255, 2787, 3760, 4875, 4932, 1511, 3912, 2913, 2064, 3, 64, 2434, 930, 795, 1006, 727, 672, 2695, 338, 111, 787, 1626, 1407, 952, 833, 4570, 1725, 1798, 1787, 2072, 3457, 544, 3195, 3861, 3343, 1300, 3110, 3283, 4990, 4966, 4092, 1475, 1589, 367, 1972, 4641, 1487, 1184, 4058]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f579c5de460>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.9203
Mean test/val loss: 0.8908
[25, 50, 75] percentiles test/val loss: [0.609  0.8033 1.0758]

Epoch 4, loss = 0.7992
Mean test/val loss: 0.7516
[25, 50, 75] percentiles test/val loss: [0.4566 0.6793 0.9794]

Epoch 6, loss = 0.7313
Mean test/val loss: 0.7291
[25, 50, 75] percentiles test/val loss: [0.4397 0.6392 0.9282]

Epoch 8, loss = 0.6807
Mean test/val loss: 0.7470
[25, 50, 75] percentiles test/val loss: [0.4192 0.6597 0.98  ]

Epoch 10, loss = 0.6396
Mean test/val loss: 0.6394
[25, 50, 75] percentiles test/val loss: [0.3879 0.5712 0.8137]

Epoch 12, loss = 0.6042
Mean test/val loss: 0.5882
[25, 50, 75] percentiles test/val loss: [0.3534 0.5197 0.763 ]

Epoch 14, loss = 0.5735
Mean test/val loss: 0.5532
[25, 50, 75] percentiles test/val loss: [0.3213 0.4867 0.7144]

Epoch 16, loss = 0.5492
Mean test/val loss: 0.5418
[25, 50, 75] percentiles test/val loss: [0.315  0.4837 0.7115]

Epoch 18, loss = 0.5313
Mean test/val loss: 0.5255
[25, 50, 75] percentiles test/val loss: [0.2986 0.4582 0.6726]

Epoch 20, loss = 0.5104
Mean test/val loss: 0.5057
[25, 50, 75] percentiles test/val loss: [0.2865 0.4442 0.6619]

Epoch 22, loss = 0.4919
Mean test/val loss: 0.4994
[25, 50, 75] percentiles test/val loss: [0.2886 0.4411 0.6624]

Epoch 24, loss = 0.4765
Mean test/val loss: 0.4940
[25, 50, 75] percentiles test/val loss: [0.2864 0.4348 0.6363]

Epoch 26, loss = 0.4665
Mean test/val loss: 0.4776
[25, 50, 75] percentiles test/val loss: [0.2802 0.4158 0.6185]

Epoch 28, loss = 0.4538
Mean test/val loss: 0.4706
[25, 50, 75] percentiles test/val loss: [0.272  0.4026 0.5989]

Epoch 30, loss = 0.4431
Mean test/val loss: 0.4721
[25, 50, 75] percentiles test/val loss: [0.2686 0.4095 0.6129]

Epoch 32, loss = 0.4345
Mean test/val loss: 0.4633
[25, 50, 75] percentiles test/val loss: [0.2609 0.3885 0.5977]

Epoch 34, loss = 0.4236
Mean test/val loss: 0.4493
[25, 50, 75] percentiles test/val loss: [0.2531 0.3892 0.5829]

Epoch 36, loss = 0.4168
Mean test/val loss: 0.4452
[25, 50, 75] percentiles test/val loss: [0.2539 0.3847 0.5746]

Epoch 38, loss = 0.4080
Mean test/val loss: 0.4502
[25, 50, 75] percentiles test/val loss: [0.2534 0.3985 0.585 ]

Epoch 40, loss = 0.4022
Mean test/val loss: 0.4530
[25, 50, 75] percentiles test/val loss: [0.2542 0.3869 0.5996]

New lr: 1e-05
Epoch 42, loss = 0.3528
Mean test/val loss: 0.4064
[25, 50, 75] percentiles test/val loss: [0.2254 0.3485 0.5217]

Epoch 44, loss = 0.3450
Mean test/val loss: 0.4052
[25, 50, 75] percentiles test/val loss: [0.2248 0.3479 0.5197]

Epoch 46, loss = 0.3398
Mean test/val loss: 0.4039
[25, 50, 75] percentiles test/val loss: [0.2211 0.3451 0.5198]

Epoch 48, loss = 0.3353
Mean test/val loss: 0.4021
[25, 50, 75] percentiles test/val loss: [0.2198 0.344  0.5149]

Epoch 50, loss = 0.3314
Mean test/val loss: 0.4020
[25, 50, 75] percentiles test/val loss: [0.2209 0.3433 0.5175]

Epoch 52, loss = 0.3278
Mean test/val loss: 0.4009
[25, 50, 75] percentiles test/val loss: [0.2215 0.3428 0.5135]

Epoch 54, loss = 0.3243
Mean test/val loss: 0.4009
[25, 50, 75] percentiles test/val loss: [0.2202 0.3397 0.5202]

Epoch 56, loss = 0.3211
Mean test/val loss: 0.4008
[25, 50, 75] percentiles test/val loss: [0.2184 0.3395 0.5177]

Epoch 58, loss = 0.3181
Mean test/val loss: 0.4000
[25, 50, 75] percentiles test/val loss: [0.2184 0.3383 0.5217]

Epoch 60, loss = 0.3153
Mean test/val loss: 0.4000
[25, 50, 75] percentiles test/val loss: [0.2203 0.3393 0.5188]


Total parameters: 51478960
Total training + validation time: 24.0 hours, 17.0 mins, and 29.0 secs
Final val loss: 0.40004914201050995

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_02_28_24_imr90 sample981: 1.1545162200927734
dataset_02_28_24_imr90 sample324: 0.6894197463989258
dataset_02_28_24_imr90 sample3464: 0.2851707935333252
dataset_02_28_24_imr90 sample2834: 0.4965754747390747
dataset_02_28_24_imr90 sample1936: 0.28679487109184265
MSE_log: 0.582 +- 0.323

Downsampling (200k) Results:
Original sampling (400k) Results:

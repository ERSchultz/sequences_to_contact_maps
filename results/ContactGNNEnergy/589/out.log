#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_10_14_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy15', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log_scc', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=589, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/589', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/589/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/589/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/589/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<scripts.neural_nets.losses.MSE_log_scc object at 0x7fd26014d4c0>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 13.218 minutes
Number of samples: 5000
Average num edges per graph:  65200.434
Mean degree: [255.   254.73 254.98 ... 255.   255.   254.94] +- [0.   0.96 0.15 ... 0.   0.   0.3 ]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fd25c061280>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 69088.1998
Mean test/val loss: 66230.8833
[25, 50, 75] percentiles test/val loss: [37140.3252 61860.9414 89698.8359]

Epoch 4, loss = 66453.0736
Mean test/val loss: 63783.6545
[25, 50, 75] percentiles test/val loss: [37584.7324 58872.5156 86973.4609]

Epoch 6, loss = 64370.9735
Mean test/val loss: 59225.5879
[25, 50, 75] percentiles test/val loss: [35728.9941 57251.7793 78824.4141]

Epoch 8, loss = 56563.9821
Mean test/val loss: 53424.8363
[25, 50, 75] percentiles test/val loss: [31537.459  50629.5742 69698.4961]

Epoch 10, loss = 52141.8354
Mean test/val loss: 49261.6857
[25, 50, 75] percentiles test/val loss: [28328.7935 45929.127  64213.1348]

Epoch 12, loss = 48483.9593
Mean test/val loss: 46391.4384
[25, 50, 75] percentiles test/val loss: [26841.3599 42493.6641 60130.1738]

Epoch 14, loss = 46234.7731
Mean test/val loss: 43948.2036
[25, 50, 75] percentiles test/val loss: [25823.1396 39771.084  56444.5352]

Epoch 16, loss = 44520.1098
Mean test/val loss: 42757.6635
[25, 50, 75] percentiles test/val loss: [24064.396  39681.4629 55188.6123]

Epoch 18, loss = 43279.6608
Mean test/val loss: 41508.9789
[25, 50, 75] percentiles test/val loss: [23281.9121 37362.4648 53228.3047]

Epoch 20, loss = 42230.3860
Mean test/val loss: 40847.0689
[25, 50, 75] percentiles test/val loss: [23545.2979 37110.5039 51790.8672]

Epoch 22, loss = 41337.0169
Mean test/val loss: 40062.7173
[25, 50, 75] percentiles test/val loss: [23280.9658 36168.7031 51419.1797]

Epoch 24, loss = 40514.0665
Mean test/val loss: 39319.8006
[25, 50, 75] percentiles test/val loss: [22067.6074 35404.5508 49822.292 ]

Epoch 26, loss = 40071.7849
Mean test/val loss: 39196.9999
[25, 50, 75] percentiles test/val loss: [22309.1685 35155.0977 50073.252 ]

Epoch 28, loss = 39203.5295
Mean test/val loss: 38738.6854
[25, 50, 75] percentiles test/val loss: [22183.4497 35278.2617 49034.9824]

Epoch 30, loss = 38595.2908
Mean test/val loss: 38063.7935
[25, 50, 75] percentiles test/val loss: [21504.1953 34249.6016 48885.8125]

Epoch 32, loss = 38116.7115
Mean test/val loss: 37789.2974
[25, 50, 75] percentiles test/val loss: [22010.3154 33861.5488 49178.1992]

Epoch 34, loss = 37436.8212
Mean test/val loss: 38032.7080
[25, 50, 75] percentiles test/val loss: [21394.6582 34249.7891 48221.3096]

Epoch 36, loss = 37243.6573
Mean test/val loss: 36995.8513
[25, 50, 75] percentiles test/val loss: [21065.9189 33836.3379 47444.7812]

Epoch 38, loss = 36642.0150
Mean test/val loss: 37076.9938
[25, 50, 75] percentiles test/val loss: [21625.6362 33175.8574 47695.1113]

Epoch 40, loss = 36216.7635
Mean test/val loss: 36329.6521
[25, 50, 75] percentiles test/val loss: [21152.8193 32672.3848 46367.6982]

New lr: 1e-05
Epoch 42, loss = 32918.9186
Mean test/val loss: 34380.1485
[25, 50, 75] percentiles test/val loss: [19119.2412 30667.2246 44518.5244]

Epoch 44, loss = 32335.0036
Mean test/val loss: 34159.8188
[25, 50, 75] percentiles test/val loss: [19092.3789 30616.8291 44228.085 ]

Epoch 46, loss = 31892.4355
Mean test/val loss: 34041.1084
[25, 50, 75] percentiles test/val loss: [19140.9019 30515.5225 44128.6729]

Epoch 48, loss = 31523.7305
Mean test/val loss: 33942.4266
[25, 50, 75] percentiles test/val loss: [18811.5474 30477.5664 43412.6611]

Epoch 50, loss = 31179.3847
Mean test/val loss: 33848.4563
[25, 50, 75] percentiles test/val loss: [18996.0854 30201.168  43444.0957]

Epoch 52, loss = 30864.2522
Mean test/val loss: 33870.0708
[25, 50, 75] percentiles test/val loss: [18845.3223 30145.1426 43753.7529]

Epoch 54, loss = 30557.6629
Mean test/val loss: 33765.4612
[25, 50, 75] percentiles test/val loss: [19063.3037 29949.0645 43335.4004]

Epoch 56, loss = 30285.8458
Mean test/val loss: 33864.0490
[25, 50, 75] percentiles test/val loss: [18883.8555 30130.959  43446.168 ]

Epoch 58, loss = 30016.0254
Mean test/val loss: 33800.1099
[25, 50, 75] percentiles test/val loss: [18970.1411 30260.8291 43649.7656]

Epoch 60, loss = 29755.0877
Mean test/val loss: 33786.7208
[25, 50, 75] percentiles test/val loss: [19076.9619 29877.6719 43974.6348]

Epoch 62, loss = 29526.6919
Mean test/val loss: 33707.7421
[25, 50, 75] percentiles test/val loss: [18669.6694 29575.9375 43315.7793]

Epoch 64, loss = 29282.5750
Mean test/val loss: 33621.9073
[25, 50, 75] percentiles test/val loss: [19015.0605 29867.7686 43163.8955]

Epoch 66, loss = 29076.1279
Mean test/val loss: 33613.2372
[25, 50, 75] percentiles test/val loss: [18791.8936 29500.4238 43550.1406]

Epoch 68, loss = 28855.3767
Mean test/val loss: 33733.5898
[25, 50, 75] percentiles test/val loss: [19129.7295 29902.9834 43657.9209]

Epoch 70, loss = 28656.0354
Mean test/val loss: 33649.5172
[25, 50, 75] percentiles test/val loss: [19199.5859 29828.9355 44111.0879]


Total parameters: 51479472
Total training + validation time: 9.0 hours, 48.0 mins, and 47.400000000001455 secs
Final val loss: 33649.51723046875

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_10_14_23 sample981: 19333.59375
dataset_10_14_23 sample324: 8865.8798828125
dataset_10_14_23 sample3464: 98972.390625
dataset_10_14_23 sample2834: 27412.8046875
dataset_10_14_23 sample1936: 25687.55078125
mse_log_scc loss: 36054.444 +- 32123.584

Downsampling (200k) Results:

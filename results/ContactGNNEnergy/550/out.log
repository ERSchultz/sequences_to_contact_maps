#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy2', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=550, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/550', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/550/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/550/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/550/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7f855fe574c0>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 10.283 minutes
Number of samples: 5000
Average num edges per graph:  64202.6016
Mean degree: [249.86 254.38 247.02 ... 253.91 251.64 251.34] +- [6.31 0.99 8.25 ... 2.04 5.21 3.97]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f8539c318b0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.7105
Mean test/val loss: 1.7300
[25, 50, 75] percentiles test/val loss: [1.1176 1.6348 2.2335]

Epoch 4, loss = 1.5399
Mean test/val loss: 1.5021
[25, 50, 75] percentiles test/val loss: [1.0052 1.4489 1.8822]

Epoch 6, loss = 1.3832
Mean test/val loss: 1.3819
[25, 50, 75] percentiles test/val loss: [0.9481 1.3063 1.7015]

Epoch 8, loss = 1.2504
Mean test/val loss: 1.2289
[25, 50, 75] percentiles test/val loss: [0.8292 1.1645 1.5388]

Epoch 10, loss = 1.1573
Mean test/val loss: 1.1918
[25, 50, 75] percentiles test/val loss: [0.7865 1.1261 1.4691]

Epoch 12, loss = 1.0952
Mean test/val loss: 1.1117
[25, 50, 75] percentiles test/val loss: [0.7239 1.0263 1.3779]

Epoch 14, loss = 1.0565
Mean test/val loss: 1.0621
[25, 50, 75] percentiles test/val loss: [0.692  0.9805 1.3049]

Epoch 16, loss = 1.0243
Mean test/val loss: 1.0324
[25, 50, 75] percentiles test/val loss: [0.6821 0.9564 1.2657]

Epoch 18, loss = 1.0015
Mean test/val loss: 1.0026
[25, 50, 75] percentiles test/val loss: [0.6484 0.9161 1.2251]

Epoch 20, loss = 0.9825
Mean test/val loss: 1.0103
[25, 50, 75] percentiles test/val loss: [0.6498 0.9183 1.2419]

Epoch 22, loss = 0.9586
Mean test/val loss: 0.9652
[25, 50, 75] percentiles test/val loss: [0.6172 0.8866 1.1994]

Epoch 24, loss = 0.9423
Mean test/val loss: 0.9981
[25, 50, 75] percentiles test/val loss: [0.6621 0.921  1.2053]

Epoch 26, loss = 0.9288
Mean test/val loss: 0.9847
[25, 50, 75] percentiles test/val loss: [0.6185 0.9045 1.237 ]

Epoch 28, loss = 0.9139
Mean test/val loss: 0.9448
[25, 50, 75] percentiles test/val loss: [0.6108 0.866  1.1785]

Epoch 30, loss = 0.9021
Mean test/val loss: 0.9915
[25, 50, 75] percentiles test/val loss: [0.6601 0.9076 1.2351]

Epoch 32, loss = 0.8865
Mean test/val loss: 0.9328
[25, 50, 75] percentiles test/val loss: [0.5791 0.8552 1.1626]

Epoch 34, loss = 0.8789
Mean test/val loss: 0.9068
[25, 50, 75] percentiles test/val loss: [0.5638 0.8236 1.1189]

Epoch 36, loss = 0.8625
Mean test/val loss: 0.9114
[25, 50, 75] percentiles test/val loss: [0.5778 0.8326 1.1253]

Epoch 38, loss = 0.8530
Mean test/val loss: 0.8916
[25, 50, 75] percentiles test/val loss: [0.5631 0.8099 1.1245]

Epoch 40, loss = 0.8491
Mean test/val loss: 0.8860
[25, 50, 75] percentiles test/val loss: [0.5599 0.803  1.0986]

New lr: 1e-05
Epoch 42, loss = 0.7691
Mean test/val loss: 0.8342
[25, 50, 75] percentiles test/val loss: [0.5217 0.7415 1.0575]

Epoch 44, loss = 0.7578
Mean test/val loss: 0.8313
[25, 50, 75] percentiles test/val loss: [0.5213 0.738  1.0521]

Epoch 46, loss = 0.7494
Mean test/val loss: 0.8305
[25, 50, 75] percentiles test/val loss: [0.5225 0.7406 1.0562]

Epoch 48, loss = 0.7423
Mean test/val loss: 0.8249
[25, 50, 75] percentiles test/val loss: [0.5118 0.7354 1.0406]

Epoch 50, loss = 0.7357
Mean test/val loss: 0.8236
[25, 50, 75] percentiles test/val loss: [0.513  0.7324 1.04  ]

Epoch 52, loss = 0.7296
Mean test/val loss: 0.8235
[25, 50, 75] percentiles test/val loss: [0.5126 0.7277 1.0374]

Epoch 54, loss = 0.7240
Mean test/val loss: 0.8204
[25, 50, 75] percentiles test/val loss: [0.5099 0.7301 1.0288]

Epoch 56, loss = 0.7185
Mean test/val loss: 0.8224
[25, 50, 75] percentiles test/val loss: [0.5121 0.7286 1.0244]

Epoch 58, loss = 0.7132
Mean test/val loss: 0.8190
[25, 50, 75] percentiles test/val loss: [0.5041 0.7257 1.0228]

Epoch 60, loss = 0.7080
Mean test/val loss: 0.8185
[25, 50, 75] percentiles test/val loss: [0.5091 0.7318 1.0292]

Epoch 62, loss = 0.7036
Mean test/val loss: 0.8171
[25, 50, 75] percentiles test/val loss: [0.5072 0.7275 1.0187]

Epoch 64, loss = 0.6988
Mean test/val loss: 0.8168
[25, 50, 75] percentiles test/val loss: [0.5011 0.7244 1.0297]

Epoch 66, loss = 0.6943
Mean test/val loss: 0.8163
[25, 50, 75] percentiles test/val loss: [0.5067 0.7213 1.0068]

Epoch 68, loss = 0.6901
Mean test/val loss: 0.8149
[25, 50, 75] percentiles test/val loss: [0.5068 0.7221 1.0124]

Epoch 70, loss = 0.6861
Mean test/val loss: 0.8151
[25, 50, 75] percentiles test/val loss: [0.5057 0.7261 1.0192]


Total parameters: 51479472
Total training + validation time: 10.0 hours, 5.0 mins, and 7.099999999998545 secs
Final val loss: 0.8150637576580048

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample981: 0.18302074074745178
dataset_09_28_23 sample324: 0.7248231172561646
dataset_09_28_23 sample3464: 1.065627932548523
dataset_09_28_23 sample2834: 2.2111456394195557
dataset_09_28_23 sample1936: 0.9150744080543518
MSE_log: 1.02 +- 0.666

Downsampling (200k) Results:
dataset_09_28_23 sample1936-downsampling: 13.603404998779297
dataset_09_28_23 sample2834-downsampling: 53.111995697021484
dataset_09_28_23 sample324-downsampling: 70.31268310546875
dataset_09_28_23 sample3464-downsampling: 27.241077423095703
dataset_09_28_23 sample981-downsampling: 4.4626688957214355
Loss: 33.746 +- 24.567

Removing /scratch/midway3/erschultz/ContactGNNEnergy2downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1936-regular: 13.722583770751953
dataset_09_28_23 sample2834-regular: 51.765377044677734
dataset_09_28_23 sample324-regular: 52.447265625
dataset_09_28_23 sample3464-regular: 26.349092483520508
dataset_09_28_23 sample981-regular: 3.6938681602478027
Loss: 29.596 +- 19.734

Removing /scratch/midway3/erschultz/ContactGNNEnergy2regsample

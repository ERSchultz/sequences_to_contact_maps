#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_10_12_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy7', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=567, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=True, input_L_to_D_mode='subtract', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/567', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/567/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/567/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/567/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7face0dde4c0>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 16.626 minutes
Number of samples: 5000
Average num edges per graph:  65231.178
Mean degree: [255. 255. 255. ... 255. 255. 255.] +- [0. 0. 0. ... 0. 0. 0.]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7faca7b9ee20>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.2776
Mean test/val loss: 1.1781
[25, 50, 75] percentiles test/val loss: [0.7568 1.0788 1.4593]

Epoch 4, loss = 1.1289
Mean test/val loss: 1.0236
[25, 50, 75] percentiles test/val loss: [0.672  0.9502 1.2718]

Epoch 6, loss = 0.9928
Mean test/val loss: 0.9104
[25, 50, 75] percentiles test/val loss: [0.5726 0.8492 1.1304]

Epoch 8, loss = 0.8580
Mean test/val loss: 0.7840
[25, 50, 75] percentiles test/val loss: [0.4694 0.6949 0.9871]

Epoch 10, loss = 0.7816
Mean test/val loss: 0.7233
[25, 50, 75] percentiles test/val loss: [0.4318 0.6444 0.8973]

Epoch 12, loss = 0.7478
Mean test/val loss: 0.7579
[25, 50, 75] percentiles test/val loss: [0.4634 0.6923 0.9478]

Epoch 14, loss = 0.7207
Mean test/val loss: 0.6657
[25, 50, 75] percentiles test/val loss: [0.4007 0.589  0.8217]

Epoch 16, loss = 0.6931
Mean test/val loss: 0.6801
[25, 50, 75] percentiles test/val loss: [0.4195 0.5983 0.8214]

Epoch 18, loss = 0.6880
Mean test/val loss: 0.6602
[25, 50, 75] percentiles test/val loss: [0.3916 0.5986 0.823 ]

Epoch 20, loss = 0.6611
Mean test/val loss: 0.6241
[25, 50, 75] percentiles test/val loss: [0.3822 0.557  0.7873]

Epoch 22, loss = 0.6459
Mean test/val loss: 0.6251
[25, 50, 75] percentiles test/val loss: [0.379  0.5558 0.7794]

Epoch 24, loss = 0.6546
Mean test/val loss: 0.6950
[25, 50, 75] percentiles test/val loss: [0.4188 0.6397 0.8957]

Epoch 26, loss = 0.6189
Mean test/val loss: 0.6101
[25, 50, 75] percentiles test/val loss: [0.3736 0.5392 0.7613]

Epoch 28, loss = 0.6070
Mean test/val loss: 0.5837
[25, 50, 75] percentiles test/val loss: [0.3613 0.5247 0.7292]

Epoch 30, loss = 0.5929
Mean test/val loss: 0.5635
[25, 50, 75] percentiles test/val loss: [0.3433 0.5013 0.7118]

Epoch 32, loss = 0.5825
Mean test/val loss: 0.5672
[25, 50, 75] percentiles test/val loss: [0.3412 0.4996 0.7014]

Epoch 34, loss = 0.5699
Mean test/val loss: 0.5591
[25, 50, 75] percentiles test/val loss: [0.3358 0.4905 0.6911]

Epoch 36, loss = 0.5710
Mean test/val loss: 0.5560
[25, 50, 75] percentiles test/val loss: [0.3428 0.4849 0.6963]

Epoch 38, loss = 0.5567
Mean test/val loss: 0.5306
[25, 50, 75] percentiles test/val loss: [0.3276 0.4635 0.6601]

Epoch 40, loss = 0.5466
Mean test/val loss: 0.5344
[25, 50, 75] percentiles test/val loss: [0.3229 0.4663 0.6671]

New lr: 1e-05
Epoch 42, loss = 0.4778
Mean test/val loss: 0.4891
[25, 50, 75] percentiles test/val loss: [0.2975 0.4243 0.6126]

Epoch 44, loss = 0.4658
Mean test/val loss: 0.4832
[25, 50, 75] percentiles test/val loss: [0.2942 0.4197 0.6066]

Epoch 46, loss = 0.4569
Mean test/val loss: 0.4791
[25, 50, 75] percentiles test/val loss: [0.2911 0.4148 0.5978]

Epoch 48, loss = 0.4492
Mean test/val loss: 0.4765
[25, 50, 75] percentiles test/val loss: [0.287  0.4185 0.5928]

Epoch 50, loss = 0.4421
Mean test/val loss: 0.4724
[25, 50, 75] percentiles test/val loss: [0.2841 0.412  0.5865]

Epoch 52, loss = 0.4358
Mean test/val loss: 0.4709
[25, 50, 75] percentiles test/val loss: [0.2847 0.4096 0.5781]

Epoch 54, loss = 0.4295
Mean test/val loss: 0.4686
[25, 50, 75] percentiles test/val loss: [0.2818 0.405  0.5724]

Epoch 56, loss = 0.4238
Mean test/val loss: 0.4678
[25, 50, 75] percentiles test/val loss: [0.2787 0.4043 0.5752]

Epoch 58, loss = 0.4184
Mean test/val loss: 0.4657
[25, 50, 75] percentiles test/val loss: [0.2794 0.4    0.5697]

Epoch 60, loss = 0.4131
Mean test/val loss: 0.4633
[25, 50, 75] percentiles test/val loss: [0.2767 0.3979 0.5661]

Epoch 62, loss = 0.4082
Mean test/val loss: 0.4634
[25, 50, 75] percentiles test/val loss: [0.2756 0.396  0.5653]

Epoch 64, loss = 0.4037
Mean test/val loss: 0.4607
[25, 50, 75] percentiles test/val loss: [0.2747 0.3897 0.5611]

Epoch 66, loss = 0.3991
Mean test/val loss: 0.4607
[25, 50, 75] percentiles test/val loss: [0.275  0.393  0.5585]

Epoch 68, loss = 0.3953
Mean test/val loss: 0.4572
[25, 50, 75] percentiles test/val loss: [0.271  0.3934 0.5572]

Epoch 70, loss = 0.3910
Mean test/val loss: 0.4572
[25, 50, 75] percentiles test/val loss: [0.2716 0.3932 0.5581]


Total parameters: 51479472
Total training + validation time: 20.0 hours, 50.0 mins, and 33.19999999999709 secs
Final val loss: 0.45717915887758137

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_10_12_23 sample981: 0.572914183139801
dataset_10_12_23 sample324: 0.1540907323360443
dataset_10_12_23 sample3464: 0.3688766062259674
dataset_10_12_23 sample2834: 0.6244921684265137
dataset_10_12_23 sample1936: 0.41175082325935364
MSE_log: 0.426 +- 0.166

Downsampling (200k) Results:

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy17', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log_and_mse_center_log', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=477, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/477', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/477/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/477/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/477/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log_and_mse_center_log at 0x7f6d8e9db700>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 16.925 minutes
Number of samples: 5000
Average num edges per graph:  61627.9772
Mean degree: [245.68 254.88 219.23 ... 251.09 215.5  255.  ] +- [ 9.13  0.37 26.94 ...  4.77 29.22  0.  ]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f6d6c6fd280>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.4202
Mean test/val loss: 1.4110
[25, 50, 75] percentiles test/val loss: [0.9263 1.2227 1.6779]

Epoch 4, loss = 1.2317
Mean test/val loss: 1.2590
[25, 50, 75] percentiles test/val loss: [0.8096 1.0691 1.5093]

Epoch 6, loss = 1.1145
Mean test/val loss: 1.1184
[25, 50, 75] percentiles test/val loss: [0.7496 0.9756 1.3266]

Epoch 8, loss = 1.0275
Mean test/val loss: 1.0572
[25, 50, 75] percentiles test/val loss: [0.6934 0.9085 1.2329]

Epoch 10, loss = 0.9723
Mean test/val loss: 0.9875
[25, 50, 75] percentiles test/val loss: [0.6425 0.8416 1.1723]

Epoch 12, loss = 0.9328
Mean test/val loss: 0.9650
[25, 50, 75] percentiles test/val loss: [0.6098 0.8197 1.1456]

Epoch 14, loss = 0.8972
Mean test/val loss: 0.9163
[25, 50, 75] percentiles test/val loss: [0.5896 0.7821 1.0872]

Epoch 16, loss = 0.8674
Mean test/val loss: 0.8908
[25, 50, 75] percentiles test/val loss: [0.576  0.7497 1.0576]

Epoch 18, loss = 0.8405
Mean test/val loss: 0.9131
[25, 50, 75] percentiles test/val loss: [0.5856 0.7855 1.0784]

Epoch 20, loss = 0.8190
Mean test/val loss: 0.8912
[25, 50, 75] percentiles test/val loss: [0.5782 0.7611 1.041 ]

Epoch 22, loss = 0.8010
Mean test/val loss: 0.8504
[25, 50, 75] percentiles test/val loss: [0.5438 0.7296 1.0077]

Epoch 24, loss = 0.7830
Mean test/val loss: 0.8743
[25, 50, 75] percentiles test/val loss: [0.5509 0.7358 1.0226]

Epoch 26, loss = 0.7682
Mean test/val loss: 0.8368
[25, 50, 75] percentiles test/val loss: [0.544  0.7012 0.9819]

Epoch 28, loss = 0.7553
Mean test/val loss: 0.8059
[25, 50, 75] percentiles test/val loss: [0.5226 0.6912 0.9563]

Epoch 30, loss = 0.7388
Mean test/val loss: 0.8262
[25, 50, 75] percentiles test/val loss: [0.5338 0.6949 0.9592]

Epoch 32, loss = 0.7270
Mean test/val loss: 0.8143
[25, 50, 75] percentiles test/val loss: [0.5137 0.6824 0.9474]

Epoch 34, loss = 0.7167
Mean test/val loss: 0.7998
[25, 50, 75] percentiles test/val loss: [0.501  0.6722 0.9236]

Epoch 36, loss = 0.7038
Mean test/val loss: 0.7962
[25, 50, 75] percentiles test/val loss: [0.5105 0.6607 0.9178]

Epoch 38, loss = 0.6942
Mean test/val loss: 0.7804
[25, 50, 75] percentiles test/val loss: [0.4911 0.6635 0.8967]

Epoch 40, loss = 0.6831
Mean test/val loss: 0.7737
[25, 50, 75] percentiles test/val loss: [0.4873 0.6575 0.9161]

New lr: 1e-05
Epoch 42, loss = 0.6200
Mean test/val loss: 0.7357
[25, 50, 75] percentiles test/val loss: [0.4641 0.6139 0.8472]

Epoch 44, loss = 0.6115
Mean test/val loss: 0.7329
[25, 50, 75] percentiles test/val loss: [0.4602 0.6154 0.8444]

Epoch 46, loss = 0.6056
Mean test/val loss: 0.7309
[25, 50, 75] percentiles test/val loss: [0.4608 0.6085 0.836 ]

Epoch 48, loss = 0.6008
Mean test/val loss: 0.7319
[25, 50, 75] percentiles test/val loss: [0.4598 0.6043 0.836 ]

Epoch 50, loss = 0.5965
Mean test/val loss: 0.7293
[25, 50, 75] percentiles test/val loss: [0.4565 0.6071 0.8378]

Epoch 52, loss = 0.5925
Mean test/val loss: 0.7292
[25, 50, 75] percentiles test/val loss: [0.4571 0.609  0.8365]

Epoch 54, loss = 0.5890
Mean test/val loss: 0.7281
[25, 50, 75] percentiles test/val loss: [0.4554 0.6064 0.8343]

Epoch 56, loss = 0.5856
Mean test/val loss: 0.7270
[25, 50, 75] percentiles test/val loss: [0.4534 0.606  0.8327]

Epoch 58, loss = 0.5826
Mean test/val loss: 0.7266
[25, 50, 75] percentiles test/val loss: [0.451  0.6018 0.8332]

Epoch 60, loss = 0.5797
Mean test/val loss: 0.7274
[25, 50, 75] percentiles test/val loss: [0.455  0.6056 0.839 ]

Epoch 62, loss = 0.5770
Mean test/val loss: 0.7260
[25, 50, 75] percentiles test/val loss: [0.4543 0.6061 0.8351]

Epoch 64, loss = 0.5744
Mean test/val loss: 0.7279
[25, 50, 75] percentiles test/val loss: [0.4542 0.6005 0.8372]

Epoch 66, loss = 0.5720
Mean test/val loss: 0.7248
[25, 50, 75] percentiles test/val loss: [0.4511 0.6035 0.83  ]

Epoch 68, loss = 0.5695
Mean test/val loss: 0.7244
[25, 50, 75] percentiles test/val loss: [0.4495 0.6004 0.8361]

Epoch 70, loss = 0.5673
Mean test/val loss: 0.7255
[25, 50, 75] percentiles test/val loss: [0.4534 0.6025 0.8338]

Epoch 72, loss = 0.5651
Mean test/val loss: 0.7259
[25, 50, 75] percentiles test/val loss: [0.4472 0.6023 0.8306]

Epoch 74, loss = 0.5630
Mean test/val loss: 0.7239
[25, 50, 75] percentiles test/val loss: [0.4484 0.6056 0.8258]

Epoch 76, loss = 0.5610
Mean test/val loss: 0.7237
[25, 50, 75] percentiles test/val loss: [0.4495 0.6008 0.8349]

Epoch 78, loss = 0.5590
Mean test/val loss: 0.7245
[25, 50, 75] percentiles test/val loss: [0.451  0.6007 0.8329]

Epoch 80, loss = 0.5570
Mean test/val loss: 0.7236
[25, 50, 75] percentiles test/val loss: [0.4487 0.6012 0.8346]


Total parameters: 26462000
Total training + validation time: 7.0 hours, 28.0 mins, and 27.200000000000728 secs
Final val loss: 0.7236187697649002

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_04_28_23 sample981: 1.0317578315734863
dataset_04_28_23 sample324: 1.3163982629776
dataset_04_28_23 sample3464: 0.6493661999702454
dataset_04_28_23 sample2834: 0.9295574426651001
dataset_04_28_23 sample1936: 0.5700336545705795
Loss1: 0.398, Loss2: 0.501
MSE_log+MSE_center_log: 0.899 +- 0.27

Downsampling (40%) Results:
dataset_04_28_23 sample1936-downsampling: 3.5152010917663574
dataset_04_28_23 sample2834-downsampling: 4.008824825286865
dataset_04_28_23 sample324-downsampling: 9.211685180664062
dataset_04_28_23 sample3464-downsampling: 4.75676965713501
dataset_04_28_23 sample981-downsampling: 5.6383466720581055
Loss: 5.426 +- 2.024

Removing /scratch/midway3/erschultz/ContactGNNEnergy17downsample
Original sampling (100%) Results:
dataset_04_28_23 sample1936-regular: 2.903006076812744
dataset_04_28_23 sample2834-regular: 4.012592315673828
dataset_04_28_23 sample324-regular: 6.8917460441589355
dataset_04_28_23 sample3464-regular: 3.167663812637329
dataset_04_28_23 sample981-regular: 5.4843549728393555
Loss: 4.492 +- 1.5

Removing /scratch/midway3/erschultz/ContactGNNEnergy17regsample

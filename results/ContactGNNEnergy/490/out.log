#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_25_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy19', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=1e-05, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=490, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/490', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/490/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/490/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/490/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f31d02dc310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 42.266 minutes
Number of samples: 10000
Average num edges per graph:  62850.0788
Mean degree: [253.75 246.4  253.84 ... 252.48 253.8  246.3 ] +- [ 1.34 11.62  2.58 ...  4.13  2.75  6.14]

split sizes: train=9000, val=1000, test=0, N=10000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 1e-05
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f318b220df0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.0307
Mean test/val loss: 0.9359
[25, 50, 75] percentiles test/val loss: [0.4711 0.8161 1.2593]

Epoch 4, loss = 0.7872
Mean test/val loss: 0.7382
[25, 50, 75] percentiles test/val loss: [0.4149 0.6792 0.9772]

Epoch 6, loss = 0.7273
Mean test/val loss: 0.7041
[25, 50, 75] percentiles test/val loss: [0.4019 0.6458 0.913 ]

Epoch 8, loss = 0.6900
Mean test/val loss: 0.6598
[25, 50, 75] percentiles test/val loss: [0.3701 0.6094 0.8684]

Epoch 10, loss = 0.6615
Mean test/val loss: 0.6356
[25, 50, 75] percentiles test/val loss: [0.3568 0.584  0.8352]

Epoch 12, loss = 0.6352
Mean test/val loss: 0.6435
[25, 50, 75] percentiles test/val loss: [0.3664 0.6027 0.8409]

Epoch 14, loss = 0.6151
Mean test/val loss: 0.5970
[25, 50, 75] percentiles test/val loss: [0.3469 0.5429 0.7697]

Epoch 16, loss = 0.5931
Mean test/val loss: 0.5727
[25, 50, 75] percentiles test/val loss: [0.3193 0.5201 0.7375]

Epoch 18, loss = 0.5723
Mean test/val loss: 0.5562
[25, 50, 75] percentiles test/val loss: [0.3026 0.5063 0.7227]

Epoch 20, loss = 0.5542
Mean test/val loss: 0.5396
[25, 50, 75] percentiles test/val loss: [0.2944 0.4884 0.69  ]

Epoch 22, loss = 0.5401
Mean test/val loss: 0.5241
[25, 50, 75] percentiles test/val loss: [0.282  0.4763 0.6696]

Epoch 24, loss = 0.5278
Mean test/val loss: 0.5146
[25, 50, 75] percentiles test/val loss: [0.2781 0.4679 0.6529]

Epoch 26, loss = 0.5177
Mean test/val loss: 0.5119
[25, 50, 75] percentiles test/val loss: [0.2833 0.4584 0.6449]

Epoch 28, loss = 0.5082
Mean test/val loss: 0.4942
[25, 50, 75] percentiles test/val loss: [0.266 0.446 0.629]

Epoch 30, loss = 0.4996
Mean test/val loss: 0.4908
[25, 50, 75] percentiles test/val loss: [0.2582 0.4404 0.6331]

Epoch 32, loss = 0.4920
Mean test/val loss: 0.4816
[25, 50, 75] percentiles test/val loss: [0.2532 0.429  0.6176]

Epoch 34, loss = 0.4828
Mean test/val loss: 0.4739
[25, 50, 75] percentiles test/val loss: [0.2498 0.4223 0.605 ]

Epoch 36, loss = 0.4756
Mean test/val loss: 0.4758
[25, 50, 75] percentiles test/val loss: [0.253  0.4221 0.6033]

Epoch 38, loss = 0.4682
Mean test/val loss: 0.4675
[25, 50, 75] percentiles test/val loss: [0.2492 0.4142 0.6008]

Epoch 40, loss = 0.4631
Mean test/val loss: 0.4636
[25, 50, 75] percentiles test/val loss: [0.2545 0.4068 0.5884]

New lr: 1.0000000000000002e-06
Epoch 42, loss = 0.4436
Mean test/val loss: 0.4474
[25, 50, 75] percentiles test/val loss: [0.2365 0.4017 0.5709]

Epoch 44, loss = 0.4417
Mean test/val loss: 0.4460
[25, 50, 75] percentiles test/val loss: [0.2372 0.3987 0.5705]

Epoch 46, loss = 0.4403
Mean test/val loss: 0.4460
[25, 50, 75] percentiles test/val loss: [0.2353 0.3986 0.568 ]

Epoch 48, loss = 0.4391
Mean test/val loss: 0.4449
[25, 50, 75] percentiles test/val loss: [0.2369 0.3967 0.5704]

Epoch 50, loss = 0.4380
Mean test/val loss: 0.4438
[25, 50, 75] percentiles test/val loss: [0.2366 0.3979 0.5684]

Epoch 52, loss = 0.4369
Mean test/val loss: 0.4426
[25, 50, 75] percentiles test/val loss: [0.2339 0.3922 0.5642]

Epoch 54, loss = 0.4360
Mean test/val loss: 0.4418
[25, 50, 75] percentiles test/val loss: [0.2348 0.3924 0.5639]

Epoch 56, loss = 0.4350
Mean test/val loss: 0.4410
[25, 50, 75] percentiles test/val loss: [0.2343 0.3912 0.5621]

Epoch 58, loss = 0.4341
Mean test/val loss: 0.4406
[25, 50, 75] percentiles test/val loss: [0.2345 0.3914 0.5622]

Epoch 60, loss = 0.4332
Mean test/val loss: 0.4398
[25, 50, 75] percentiles test/val loss: [0.2318 0.3954 0.5633]

Epoch 62, loss = 0.4323
Mean test/val loss: 0.4390
[25, 50, 75] percentiles test/val loss: [0.2322 0.3904 0.5596]

Epoch 64, loss = 0.4315
Mean test/val loss: 0.4392
[25, 50, 75] percentiles test/val loss: [0.233  0.3917 0.5613]

Epoch 66, loss = 0.4307
Mean test/val loss: 0.4372
[25, 50, 75] percentiles test/val loss: [0.2305 0.3876 0.5583]

Epoch 68, loss = 0.4298
Mean test/val loss: 0.4374
[25, 50, 75] percentiles test/val loss: [0.2316 0.3906 0.5575]

Epoch 70, loss = 0.4290
Mean test/val loss: 0.4365
[25, 50, 75] percentiles test/val loss: [0.2307 0.3881 0.5562]

Epoch 72, loss = 0.4283
Mean test/val loss: 0.4373
[25, 50, 75] percentiles test/val loss: [0.2311 0.3906 0.5586]

Epoch 74, loss = 0.4275
Mean test/val loss: 0.4349
[25, 50, 75] percentiles test/val loss: [0.2296 0.3849 0.5555]

Epoch 76, loss = 0.4268
Mean test/val loss: 0.4356
[25, 50, 75] percentiles test/val loss: [0.2298 0.3887 0.5549]

Epoch 78, loss = 0.4261
Mean test/val loss: 0.4342
[25, 50, 75] percentiles test/val loss: [0.2303 0.3871 0.5528]

Epoch 80, loss = 0.4253
Mean test/val loss: 0.4344
[25, 50, 75] percentiles test/val loss: [0.2303 0.3865 0.554 ]


Total parameters: 26462000
Total training + validation time: 14.0 hours, 15.0 mins, and 6.19999999999709 secs
Final val loss: 0.43438016740093005

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_09_25_23 sample1050: 0.7642819881439209
dataset_09_25_23 sample7802: 0.6755723357200623
dataset_09_25_23 sample156: 0.7168383598327637
dataset_09_25_23 sample2452: 0.10375522077083588
dataset_09_25_23 sample752: 0.02289326675236225
MSE Loss: 0.457 +- 0.323

Downsampling (40%) Results:
dataset_09_25_23 sample1050-downsampling: 43.64512252807617
dataset_09_25_23 sample156-downsampling: 26.045154571533203
dataset_09_25_23 sample2452-downsampling: 20.438623428344727
dataset_09_25_23 sample752-downsampling: 1.4110878705978394
dataset_09_25_23 sample7802-downsampling: 49.95041275024414
Loss: 28.298 +- 17.286

Removing /scratch/midway3/erschultz/ContactGNNEnergy19downsample
Original sampling (100%) Results:

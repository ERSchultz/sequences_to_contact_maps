#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_11_27_23_hmec'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy11', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=623, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/623', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/623/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/623/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/623/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7fcf729315e0>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 15.938 minutes
Number of samples: 5000
Average num edges per graph:  65182.5736
Mean degree: [254.95 255.   255.   ... 255.   254.34 247.64] +- [ 0.26  0.    0.   ...  0.    1.53 14.73]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fcf445a9f10>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.1015
Mean test/val loss: 0.9911
[25, 50, 75] percentiles test/val loss: [0.5518 0.8706 1.2909]

Epoch 4, loss = 0.9560
Mean test/val loss: 0.9286
[25, 50, 75] percentiles test/val loss: [0.5254 0.7922 1.1987]

Epoch 6, loss = 0.9189
Mean test/val loss: 0.8866
[25, 50, 75] percentiles test/val loss: [0.4773 0.7501 1.1449]

Epoch 8, loss = 0.8753
Mean test/val loss: 0.8589
[25, 50, 75] percentiles test/val loss: [0.4588 0.7373 1.1235]

Epoch 10, loss = 0.8257
Mean test/val loss: 0.8210
[25, 50, 75] percentiles test/val loss: [0.4453 0.7184 1.0679]

Epoch 12, loss = 0.7965
Mean test/val loss: 0.8133
[25, 50, 75] percentiles test/val loss: [0.4399 0.7047 1.035 ]

Epoch 14, loss = 0.7734
Mean test/val loss: 0.7774
[25, 50, 75] percentiles test/val loss: [0.4204 0.6782 1.029 ]

Epoch 16, loss = 0.7513
Mean test/val loss: 0.7668
[25, 50, 75] percentiles test/val loss: [0.4109 0.6767 1.0188]

Epoch 18, loss = 0.7333
Mean test/val loss: 0.7471
[25, 50, 75] percentiles test/val loss: [0.3938 0.6374 0.996 ]

Epoch 20, loss = 0.7166
Mean test/val loss: 0.7117
[25, 50, 75] percentiles test/val loss: [0.3842 0.6198 0.936 ]

Epoch 22, loss = 0.7013
Mean test/val loss: 0.7018
[25, 50, 75] percentiles test/val loss: [0.3767 0.6199 0.9219]

Epoch 24, loss = 0.6907
Mean test/val loss: 0.6916
[25, 50, 75] percentiles test/val loss: [0.376  0.6132 0.9087]

Epoch 26, loss = 0.6784
Mean test/val loss: 0.6743
[25, 50, 75] percentiles test/val loss: [0.3617 0.5965 0.9007]

Epoch 28, loss = 0.6691
Mean test/val loss: 0.6720
[25, 50, 75] percentiles test/val loss: [0.3619 0.5886 0.8875]

Epoch 30, loss = 0.6604
Mean test/val loss: 0.6756
[25, 50, 75] percentiles test/val loss: [0.3767 0.6014 0.8868]

Epoch 32, loss = 0.6521
Mean test/val loss: 0.6476
[25, 50, 75] percentiles test/val loss: [0.3511 0.571  0.859 ]

Epoch 34, loss = 0.6409
Mean test/val loss: 0.6494
[25, 50, 75] percentiles test/val loss: [0.3555 0.5744 0.8662]

Epoch 36, loss = 0.6332
Mean test/val loss: 0.6660
[25, 50, 75] percentiles test/val loss: [0.3668 0.5917 0.8948]

Epoch 38, loss = 0.6284
Mean test/val loss: 0.6419
[25, 50, 75] percentiles test/val loss: [0.3495 0.5685 0.8523]

Epoch 40, loss = 0.6243
Mean test/val loss: 0.6373
[25, 50, 75] percentiles test/val loss: [0.3499 0.5627 0.8502]

New lr: 1e-05
Epoch 42, loss = 0.5717
Mean test/val loss: 0.6001
[25, 50, 75] percentiles test/val loss: [0.3225 0.5271 0.8065]

Epoch 44, loss = 0.5633
Mean test/val loss: 0.5957
[25, 50, 75] percentiles test/val loss: [0.3236 0.5244 0.7955]

Epoch 46, loss = 0.5575
Mean test/val loss: 0.5921
[25, 50, 75] percentiles test/val loss: [0.3264 0.5228 0.7912]

Epoch 48, loss = 0.5527
Mean test/val loss: 0.5905
[25, 50, 75] percentiles test/val loss: [0.3205 0.5209 0.7875]

Epoch 50, loss = 0.5484
Mean test/val loss: 0.5887
[25, 50, 75] percentiles test/val loss: [0.3217 0.5192 0.7893]

Epoch 52, loss = 0.5447
Mean test/val loss: 0.5862
[25, 50, 75] percentiles test/val loss: [0.3208 0.5203 0.7876]

Epoch 54, loss = 0.5412
Mean test/val loss: 0.5854
[25, 50, 75] percentiles test/val loss: [0.3224 0.5191 0.7767]

Epoch 56, loss = 0.5378
Mean test/val loss: 0.5849
[25, 50, 75] percentiles test/val loss: [0.3211 0.5174 0.7798]

Epoch 58, loss = 0.5349
Mean test/val loss: 0.5840
[25, 50, 75] percentiles test/val loss: [0.3208 0.5161 0.7768]

Epoch 60, loss = 0.5322
Mean test/val loss: 0.5825
[25, 50, 75] percentiles test/val loss: [0.3174 0.513  0.7726]


Total parameters: 51479472
Total training + validation time: 8.0 hours, 50.0 mins, and 58.900000000001455 secs
Final val loss: 0.5824517486877739

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_11_27_23_hmec sample981: 0.8825321197509766
dataset_11_27_23_hmec sample324: 0.1889979988336563
dataset_11_27_23_hmec sample3464: 0.3937388062477112
dataset_11_27_23_hmec sample2834: 0.9562941789627075
dataset_11_27_23_hmec sample1936: 0.4574500620365143
MSE_log: 0.576 +- 0.295

Downsampling (200k) Results:
Original sampling (400k) Results:

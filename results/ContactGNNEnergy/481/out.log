#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_08_25_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy12', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=481, pretrain_id=479, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/481', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/481/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/481/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/481/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f36f56b8310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 13.562 minutes
Number of samples: 5000
Average num edges per graph:  64713.4272
Mean degree: [252.9  254.92 254.73 ... 254.88 254.63 254.43] +- [3.31 0.33 0.66 ... 0.35 0.82 1.18]

split sizes: train=4500, val=500, test=0, N=5000
Pre-trained model is loaded.
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f36b05cddc0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.6527
Mean test/val loss: 0.6599
[25, 50, 75] percentiles test/val loss: [0.1612 0.4048 1.0185]

Epoch 4, loss = 0.6422
Mean test/val loss: 0.7286
[25, 50, 75] percentiles test/val loss: [0.189  0.4658 1.1262]

Epoch 6, loss = 0.6313
Mean test/val loss: 0.6846
[25, 50, 75] percentiles test/val loss: [0.1828 0.4208 1.0492]

Epoch 8, loss = 0.6270
Mean test/val loss: 0.6474
[25, 50, 75] percentiles test/val loss: [0.1588 0.4045 1.0007]

Epoch 10, loss = 0.6171
Mean test/val loss: 0.6647
[25, 50, 75] percentiles test/val loss: [0.1596 0.4069 1.0281]

Epoch 12, loss = 0.6120
Mean test/val loss: 0.6506
[25, 50, 75] percentiles test/val loss: [0.1598 0.4027 1.0171]

Epoch 14, loss = 0.6079
Mean test/val loss: 0.6351
[25, 50, 75] percentiles test/val loss: [0.1492 0.3878 0.9828]

Epoch 16, loss = 0.6031
Mean test/val loss: 0.6375
[25, 50, 75] percentiles test/val loss: [0.1513 0.3896 0.9759]

Epoch 18, loss = 0.5982
Mean test/val loss: 0.6354
[25, 50, 75] percentiles test/val loss: [0.1636 0.3914 0.9705]

Epoch 20, loss = 0.5961
Mean test/val loss: 0.6211
[25, 50, 75] percentiles test/val loss: [0.1444 0.3813 0.9533]

Epoch 22, loss = 0.5927
Mean test/val loss: 0.6242
[25, 50, 75] percentiles test/val loss: [0.1496 0.3842 0.9687]

Epoch 24, loss = 0.5886
Mean test/val loss: 0.6183
[25, 50, 75] percentiles test/val loss: [0.1448 0.3758 0.9561]

Epoch 26, loss = 0.5868
Mean test/val loss: 0.6246
[25, 50, 75] percentiles test/val loss: [0.148  0.3811 0.9584]

Epoch 28, loss = 0.5858
Mean test/val loss: 0.6253
[25, 50, 75] percentiles test/val loss: [0.1555 0.3913 0.9528]

Epoch 30, loss = 0.5793
Mean test/val loss: 0.6099
[25, 50, 75] percentiles test/val loss: [0.1412 0.3721 0.9334]

Epoch 32, loss = 0.5769
Mean test/val loss: 0.6113
[25, 50, 75] percentiles test/val loss: [0.1543 0.3764 0.9368]

Epoch 34, loss = 0.5755
Mean test/val loss: 0.6122
[25, 50, 75] percentiles test/val loss: [0.1455 0.3773 0.9477]

Epoch 36, loss = 0.5741
Mean test/val loss: 0.6118
[25, 50, 75] percentiles test/val loss: [0.1471 0.3689 0.9455]

Epoch 38, loss = 0.5715
Mean test/val loss: 0.6059
[25, 50, 75] percentiles test/val loss: [0.1423 0.3667 0.9324]

Epoch 40, loss = 0.5680
Mean test/val loss: 0.6123
[25, 50, 75] percentiles test/val loss: [0.154  0.3837 0.9346]

New lr: 1e-05
Epoch 42, loss = 0.5375
Mean test/val loss: 0.5875
[25, 50, 75] percentiles test/val loss: [0.1342 0.359  0.9089]

Epoch 44, loss = 0.5341
Mean test/val loss: 0.5861
[25, 50, 75] percentiles test/val loss: [0.1339 0.3584 0.9081]

Epoch 46, loss = 0.5320
Mean test/val loss: 0.5850
[25, 50, 75] percentiles test/val loss: [0.1347 0.3573 0.9071]

Epoch 48, loss = 0.5302
Mean test/val loss: 0.5852
[25, 50, 75] percentiles test/val loss: [0.1334 0.3586 0.9059]

Epoch 50, loss = 0.5287
Mean test/val loss: 0.5843
[25, 50, 75] percentiles test/val loss: [0.1344 0.3558 0.9041]

Epoch 52, loss = 0.5274
Mean test/val loss: 0.5833
[25, 50, 75] percentiles test/val loss: [0.1341 0.3573 0.9055]

Epoch 54, loss = 0.5261
Mean test/val loss: 0.5833
[25, 50, 75] percentiles test/val loss: [0.1343 0.3552 0.9025]

Epoch 56, loss = 0.5250
Mean test/val loss: 0.5838
[25, 50, 75] percentiles test/val loss: [0.1339 0.3553 0.9057]

Epoch 58, loss = 0.5240
Mean test/val loss: 0.5835
[25, 50, 75] percentiles test/val loss: [0.1334 0.3559 0.9043]

Epoch 60, loss = 0.5229
Mean test/val loss: 0.5831
[25, 50, 75] percentiles test/val loss: [0.1346 0.3561 0.9045]

Epoch 62, loss = 0.5219
Mean test/val loss: 0.5827
[25, 50, 75] percentiles test/val loss: [0.1328 0.3564 0.9023]

Epoch 64, loss = 0.5211
Mean test/val loss: 0.5821
[25, 50, 75] percentiles test/val loss: [0.1343 0.3549 0.9044]

Epoch 66, loss = 0.5201
Mean test/val loss: 0.5827
[25, 50, 75] percentiles test/val loss: [0.1334 0.356  0.9046]

Epoch 68, loss = 0.5194
Mean test/val loss: 0.5822
[25, 50, 75] percentiles test/val loss: [0.1345 0.3533 0.903 ]

Epoch 70, loss = 0.5185
Mean test/val loss: 0.5817
[25, 50, 75] percentiles test/val loss: [0.1332 0.3535 0.8987]

Epoch 72, loss = 0.5176
Mean test/val loss: 0.5817
[25, 50, 75] percentiles test/val loss: [0.1335 0.3536 0.9004]

Epoch 74, loss = 0.5169
Mean test/val loss: 0.5815
[25, 50, 75] percentiles test/val loss: [0.1344 0.3545 0.8982]

Epoch 76, loss = 0.5161
Mean test/val loss: 0.5806
[25, 50, 75] percentiles test/val loss: [0.1322 0.3549 0.8962]

Epoch 78, loss = 0.5154
Mean test/val loss: 0.5811
[25, 50, 75] percentiles test/val loss: [0.1337 0.3525 0.8989]

Epoch 80, loss = 0.5146
Mean test/val loss: 0.5813
[25, 50, 75] percentiles test/val loss: [0.1333 0.3532 0.8998]


Total parameters: 26462000
Total training + validation time: 6.0 hours, 25.0 mins, and 16.900000000001455 secs
Final val loss: 0.5812894064299762

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_08_25_23 sample981: 1.5695749521255493
dataset_08_25_23 sample324: 0.1821826696395874
dataset_08_25_23 sample3464: 0.16051429510116577
dataset_08_25_23 sample2834: 0.08057039976119995
dataset_08_25_23 sample1936: 0.2264554500579834
MSE Loss: 0.444 +- 0.565

Downsampling (40%) Results:
dataset_08_25_23 sample1936-downsampling: 501.6875
dataset_08_25_23 sample2834-downsampling: 1135.005126953125
dataset_08_25_23 sample324-downsampling: 490.9841003417969
dataset_08_25_23 sample3464-downsampling: 943.147216796875
dataset_08_25_23 sample981-downsampling: 7661.25390625
Loss: 2146.416 +- 2768.748

Removing /scratch/midway3/erschultz/ContactGNNEnergy12downsample
Original sampling (100%) Results:
dataset_08_25_23 sample1936-regular: 503.36346435546875
dataset_08_25_23 sample2834-regular: 875.7154541015625
dataset_08_25_23 sample324-regular: 584.8768920898438
dataset_08_25_23 sample3464-regular: 1394.6318359375
dataset_08_25_23 sample981-regular: 7854.8427734375
Loss: 2242.686 +- 2823.391

Removing /scratch/midway3/erschultz/ContactGNNEnergy12regsample

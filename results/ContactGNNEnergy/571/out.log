#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_10_14_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy11', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=571, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/571', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/571/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/571/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/571/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7ff5f0bc7550>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 16.423 minutes
Number of samples: 5000
Average num edges per graph:  65200.434
Mean degree: [255.   254.73 254.98 ... 255.   255.   254.94] +- [0.   0.96 0.15 ... 0.   0.   0.3 ]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7ff5b69f5f10>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.8548
Mean test/val loss: 1.7777
[25, 50, 75] percentiles test/val loss: [1.2597 1.6738 2.2895]

Epoch 4, loss = 1.6634
Mean test/val loss: 1.4981
[25, 50, 75] percentiles test/val loss: [1.0671 1.4655 1.8528]

Epoch 6, loss = 1.4520
Mean test/val loss: 1.3365
[25, 50, 75] percentiles test/val loss: [0.9003 1.256  1.6661]

Epoch 8, loss = 1.2933
Mean test/val loss: 1.2093
[25, 50, 75] percentiles test/val loss: [0.8328 1.1232 1.4865]

Epoch 10, loss = 1.2275
Mean test/val loss: 1.1644
[25, 50, 75] percentiles test/val loss: [0.788  1.0887 1.4389]

Epoch 12, loss = 1.1800
Mean test/val loss: 1.1171
[25, 50, 75] percentiles test/val loss: [0.7603 1.0183 1.4054]

Epoch 14, loss = 1.1475
Mean test/val loss: 1.1341
[25, 50, 75] percentiles test/val loss: [0.7682 1.0377 1.4199]

Epoch 16, loss = 1.1198
Mean test/val loss: 1.0689
[25, 50, 75] percentiles test/val loss: [0.694  0.9937 1.3304]

Epoch 18, loss = 1.0980
Mean test/val loss: 1.0648
[25, 50, 75] percentiles test/val loss: [0.6887 0.9734 1.3365]

Epoch 20, loss = 1.0791
Mean test/val loss: 1.0548
[25, 50, 75] percentiles test/val loss: [0.669  0.9598 1.3058]

Epoch 22, loss = 1.0622
Mean test/val loss: 1.0125
[25, 50, 75] percentiles test/val loss: [0.6473 0.919  1.2665]

Epoch 24, loss = 1.0435
Mean test/val loss: 1.0122
[25, 50, 75] percentiles test/val loss: [0.6377 0.9206 1.255 ]

Epoch 26, loss = 1.0341
Mean test/val loss: 1.0355
[25, 50, 75] percentiles test/val loss: [0.6816 0.937  1.2846]

Epoch 28, loss = 1.0212
Mean test/val loss: 0.9845
[25, 50, 75] percentiles test/val loss: [0.6256 0.9012 1.2144]

Epoch 30, loss = 1.0058
Mean test/val loss: 0.9779
[25, 50, 75] percentiles test/val loss: [0.6293 0.8959 1.1998]

Epoch 32, loss = 0.9924
Mean test/val loss: 0.9768
[25, 50, 75] percentiles test/val loss: [0.6332 0.8976 1.2113]

Epoch 34, loss = 0.9834
Mean test/val loss: 0.9784
[25, 50, 75] percentiles test/val loss: [0.6305 0.8908 1.2101]

Epoch 36, loss = 0.9713
Mean test/val loss: 0.9733
[25, 50, 75] percentiles test/val loss: [0.6262 0.8818 1.2212]

Epoch 38, loss = 0.9582
Mean test/val loss: 0.9612
[25, 50, 75] percentiles test/val loss: [0.604  0.8714 1.1923]

Epoch 40, loss = 0.9467
Mean test/val loss: 0.9354
[25, 50, 75] percentiles test/val loss: [0.6006 0.858  1.1534]

New lr: 1e-05
Epoch 42, loss = 0.8714
Mean test/val loss: 0.8984
[25, 50, 75] percentiles test/val loss: [0.5704 0.8162 1.1342]

Epoch 44, loss = 0.8593
Mean test/val loss: 0.8969
[25, 50, 75] percentiles test/val loss: [0.5718 0.8095 1.1157]

Epoch 46, loss = 0.8508
Mean test/val loss: 0.8954
[25, 50, 75] percentiles test/val loss: [0.5657 0.8072 1.1268]

Epoch 48, loss = 0.8432
Mean test/val loss: 0.8931
[25, 50, 75] percentiles test/val loss: [0.5677 0.8    1.1172]

Epoch 50, loss = 0.8366
Mean test/val loss: 0.8928
[25, 50, 75] percentiles test/val loss: [0.5696 0.8035 1.1141]

Epoch 52, loss = 0.8301
Mean test/val loss: 0.8914
[25, 50, 75] percentiles test/val loss: [0.5689 0.799  1.1179]

Epoch 54, loss = 0.8242
Mean test/val loss: 0.8907
[25, 50, 75] percentiles test/val loss: [0.5654 0.8027 1.1233]

Epoch 56, loss = 0.8186
Mean test/val loss: 0.8911
[25, 50, 75] percentiles test/val loss: [0.5665 0.7978 1.1105]

Epoch 58, loss = 0.8131
Mean test/val loss: 0.8918
[25, 50, 75] percentiles test/val loss: [0.5622 0.7992 1.1155]

Epoch 60, loss = 0.8079
Mean test/val loss: 0.8903
[25, 50, 75] percentiles test/val loss: [0.5649 0.7985 1.1091]

Epoch 62, loss = 0.8028
Mean test/val loss: 0.8875
[25, 50, 75] percentiles test/val loss: [0.5673 0.7952 1.1064]

Epoch 64, loss = 0.7980
Mean test/val loss: 0.8879
[25, 50, 75] percentiles test/val loss: [0.5617 0.7988 1.1002]

Epoch 66, loss = 0.7932
Mean test/val loss: 0.8882
[25, 50, 75] percentiles test/val loss: [0.5706 0.7991 1.0969]

Epoch 68, loss = 0.7885
Mean test/val loss: 0.8921
[25, 50, 75] percentiles test/val loss: [0.5657 0.8022 1.105 ]

Epoch 70, loss = 0.7842
Mean test/val loss: 0.8885
[25, 50, 75] percentiles test/val loss: [0.5607 0.7986 1.0937]


Total parameters: 51479472
Total training + validation time: 11.0 hours, 18.0 mins, and 44.5 secs
Final val loss: 0.8885256473869085

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_10_14_23 sample981: 0.7614659667015076
dataset_10_14_23 sample324: 0.3181672692298889
dataset_10_14_23 sample3464: 2.2749643325805664
dataset_10_14_23 sample2834: 0.7257133722305298
dataset_10_14_23 sample1936: 0.6041266918182373
MSE_log: 0.937 +- 0.687

Downsampling (200k) Results:

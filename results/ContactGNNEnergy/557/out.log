#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=33280, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy0', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=557, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=True, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/557', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/557/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/557/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/557/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fef282a3280>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 14.382 minutes
Number of samples: 5000
Average num edges per graph:  64202.6016
Mean degree: [249.86 254.38 247.02 ... 253.91 251.64 251.34] +- [6.31 0.99 8.25 ... 2.04 5.21 3.97]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [3254, 4639, 4056, 4711, 4996, 219, 833, 1354, 2869, 2668, 745, 2996, 367, 2376, 4552, 147, 4977, 1569, 4781, 1925, 2567, 1936, 197, 3818, 4723, 4092, 1806, 161, 1544, 280, 4920, 3343, 4570, 2906, 962, 3296, 3661, 3, 4680, 3414, 2798, 4580, 4783, 2956, 2363, 1512, 308, 4932, 238, 2072, 1006, 546, 952, 2787, 338, 4515, 3267, 2661, 3132, 4589, 4217, 2156, 4269, 3025, 953, 78, 287, 4669, 2517, 3931, 1898, 1582, 1735, 2439, 4427, 4444, 3736, 1766, 1498, 920, 622, 2143, 810, 1798, 887, 4595, 2286, 3987, 2434, 2324, 3228, 1549, 3226, 3698, 3564, 2461, 2610, 1626, 1002, 2700, 2695, 3671]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7feedf0d9df0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.9150
Mean test/val loss: 1.8901
[25, 50, 75] percentiles test/val loss: [1.1748 1.7267 2.4878]

Epoch 4, loss = 2.6555
Mean test/val loss: 1.8425
[25, 50, 75] percentiles test/val loss: [1.2027 1.7421 2.392 ]

Epoch 6, loss = 158.2391
Mean test/val loss: 2.0480
[25, 50, 75] percentiles test/val loss: [1.2844 1.866  2.7437]

Epoch 8, loss = 1.8118
Mean test/val loss: 1.8195
[25, 50, 75] percentiles test/val loss: [1.1599 1.6819 2.3938]

Epoch 10, loss = 1.8079
Mean test/val loss: 1.7737
[25, 50, 75] percentiles test/val loss: [1.1412 1.6495 2.318 ]

Epoch 12, loss = 1.8100
Mean test/val loss: 1.9751
[25, 50, 75] percentiles test/val loss: [1.1831 1.7858 2.6606]

Epoch 14, loss = 1.7147
Mean test/val loss: 1.7688
[25, 50, 75] percentiles test/val loss: [1.1486 1.6448 2.3127]

Epoch 16, loss = 1.7810
Mean test/val loss: 1.8864
[25, 50, 75] percentiles test/val loss: [1.1271 1.6398 2.282 ]

Epoch 18, loss = 1.7478
Mean test/val loss: 1.8483
[25, 50, 75] percentiles test/val loss: [1.1832 1.6972 2.41  ]

Epoch 20, loss = 1.7416
Mean test/val loss: 1.7434
[25, 50, 75] percentiles test/val loss: [1.1127 1.6115 2.2499]

Epoch 22, loss = 1.7940
Mean test/val loss: 1.8085
[25, 50, 75] percentiles test/val loss: [1.143  1.6733 2.3843]

Epoch 24, loss = 1.7770
Mean test/val loss: 1.7585
[25, 50, 75] percentiles test/val loss: [1.1229 1.6299 2.3063]

Epoch 26, loss = 1.8224
Mean test/val loss: 1.7864
[25, 50, 75] percentiles test/val loss: [1.17   1.6638 2.3239]

Epoch 28, loss = 3.8823
Mean test/val loss: 1.8579
[25, 50, 75] percentiles test/val loss: [1.1629 1.71   2.4532]

Epoch 30, loss = 27.7484
Mean test/val loss: 1.9654
[25, 50, 75] percentiles test/val loss: [1.1972 1.7934 2.6482]

Epoch 32, loss = 1.8245
Mean test/val loss: 1.7969
[25, 50, 75] percentiles test/val loss: [1.1295 1.6456 2.3703]

Epoch 34, loss = 1.7413
Mean test/val loss: 1.7262
[25, 50, 75] percentiles test/val loss: [1.1025 1.6008 2.2648]

Epoch 36, loss = 4.5301
Mean test/val loss: 1.8718
[25, 50, 75] percentiles test/val loss: [1.1733 1.7179 2.4601]

Epoch 38, loss = 8.5753
Mean test/val loss: 1.8783
[25, 50, 75] percentiles test/val loss: [1.1623 1.7132 2.4813]

Epoch 40, loss = 207.2260
Mean test/val loss: 2.4238
[25, 50, 75] percentiles test/val loss: [1.4169 2.1146 3.139 ]

New lr: 1e-05
Epoch 42, loss = 1.9452
Mean test/val loss: 1.8915
[25, 50, 75] percentiles test/val loss: [1.1972 1.7513 2.4751]

Epoch 44, loss = 1.8136
Mean test/val loss: 1.8882
[25, 50, 75] percentiles test/val loss: [1.1937 1.7723 2.4912]

Epoch 46, loss = 1.7817
Mean test/val loss: 1.7949
[25, 50, 75] percentiles test/val loss: [1.1398 1.6636 2.3645]

Epoch 48, loss = 1.6700
Mean test/val loss: 1.8502
[25, 50, 75] percentiles test/val loss: [1.0963 1.5823 2.2303]

Epoch 50, loss = 2.4523
Mean test/val loss: 1.9448
[25, 50, 75] percentiles test/val loss: [1.3303 1.785  2.4504]

Epoch 52, loss = 1.7477
Mean test/val loss: 1.8193
[25, 50, 75] percentiles test/val loss: [1.208  1.6876 2.3785]

Epoch 54, loss = 1.6780
Mean test/val loss: 1.6843
[25, 50, 75] percentiles test/val loss: [1.0748 1.5898 2.1952]

Epoch 56, loss = 2.4839
Mean test/val loss: 1.9464
[25, 50, 75] percentiles test/val loss: [1.2319 1.7743 2.5606]

Epoch 58, loss = 1.7050
Mean test/val loss: 1.6835
[25, 50, 75] percentiles test/val loss: [1.0923 1.5851 2.1785]

Epoch 60, loss = 1.6702
Mean test/val loss: 1.5890
[25, 50, 75] percentiles test/val loss: [1.0627 1.5103 2.0161]

Epoch 62, loss = 1.5591
Mean test/val loss: 1.6649
[25, 50, 75] percentiles test/val loss: [1.0891 1.5758 2.1471]

Epoch 64, loss = 1.5308
Mean test/val loss: 1.5357
[25, 50, 75] percentiles test/val loss: [1.0354 1.4677 1.9693]

Epoch 66, loss = 1.4867
Mean test/val loss: 1.5000
[25, 50, 75] percentiles test/val loss: [1.0193 1.4292 1.9026]

Epoch 68, loss = 1.5632
Mean test/val loss: 1.7409
[25, 50, 75] percentiles test/val loss: [1.1666 1.6292 2.1695]

Epoch 70, loss = 2.1338
Mean test/val loss: 1.8202
[25, 50, 75] percentiles test/val loss: [1.1865 1.7221 2.3087]


Total parameters: 51991472
Total training + validation time: 20.0 hours, 33.0 mins, and 58.80000000000291 secs
Final val loss: 1.8202117105424405

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample981: 0.6668234467506409
dataset_09_28_23 sample324: 2.3204667568206787
dataset_09_28_23 sample3464: 2.3566834926605225
dataset_09_28_23 sample2834: 3.306130886077881
dataset_09_28_23 sample1936: 1.5606157779693604
MSE Loss: 2.042 +- 0.883

Downsampling (200k) Results:
dataset_09_28_23 sample1936-downsampling: 23.371618270874023
dataset_09_28_23 sample2834-downsampling: 75.38540649414062
dataset_09_28_23 sample324-downsampling: 189.1600341796875
dataset_09_28_23 sample3464-downsampling: 55.65735626220703
dataset_09_28_23 sample981-downsampling: 38.86163330078125
Loss: 76.487 +- 58.936

Removing /scratch/midway3/erschultz/ContactGNNEnergy0downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1936-regular: 23.755821228027344
dataset_09_28_23 sample2834-regular: 76.55857849121094
dataset_09_28_23 sample324-regular: 177.21365356445312
dataset_09_28_23 sample3464-regular: 55.00320053100586
dataset_09_28_23 sample981-regular: 36.47460174560547
Loss: 73.801 +- 54.686

Removing /scratch/midway3/erschultz/ContactGNNEnergy0regsample

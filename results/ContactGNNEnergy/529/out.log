#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy13', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=529, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/529', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/529/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/529/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/529/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f04c0c10280>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 36.38 minutes
Number of samples: 10000
Average num edges per graph:  63539.8822
Mean degree: [246.36 254.75 249.55 ... 251.39 254.63 242.59] +- [ 9.11  0.58  6.48 ...  3.73  0.95 19.1 ]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [203, 6265, 4528, 7937, 5385, 9207, 3610, 2030, 5359, 392, 7358, 3013, 5242, 7635, 1408, 9365, 8107, 8340, 6135, 1838, 4982, 343, 7192, 3297, 5306, 3066, 3556, 3247, 4686, 3311, 3969, 3807, 3832, 9312, 2851, 3526, 4002, 4612, 9253, 2311, 4422, 3094, 5195, 4308, 4886, 5444, 3284, 763, 5579, 8633, 9143, 2434, 9894, 156, 1846, 2466, 7810, 6278, 2469, 1087, 9389, 2535, 4781, 6346, 7734, 134, 6333, 8199, 2279, 1313, 3970, 9496, 3181, 5339, 1478, 3397, 6655, 3953, 109, 4531, 5784, 2148, 8522, 7465, 9606, 495, 7439, 6040, 3945, 7492, 9380, 7100, 7771, 4584, 3860, 7640, 6343, 2099, 9991, 5771, 8727, 752]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f047806cd00>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.5515
Mean test/val loss: 1.3898
[25, 50, 75] percentiles test/val loss: [0.9295 1.3124 1.7796]

Epoch 4, loss = 1.2857
Mean test/val loss: 1.2191
[25, 50, 75] percentiles test/val loss: [0.8191 1.1291 1.515 ]

Epoch 6, loss = 1.1489
Mean test/val loss: 1.1052
[25, 50, 75] percentiles test/val loss: [0.7214 1.0127 1.3983]

Epoch 8, loss = 1.0759
Mean test/val loss: 1.0945
[25, 50, 75] percentiles test/val loss: [0.7463 1.0048 1.3384]

Epoch 10, loss = 1.0317
Mean test/val loss: 1.0145
[25, 50, 75] percentiles test/val loss: [0.6641 0.9264 1.2561]

Epoch 12, loss = 1.0011
Mean test/val loss: 0.9916
[25, 50, 75] percentiles test/val loss: [0.6496 0.9027 1.2236]

Epoch 14, loss = 0.9743
Mean test/val loss: 0.9624
[25, 50, 75] percentiles test/val loss: [0.6268 0.8674 1.1903]

Epoch 16, loss = 0.9558
Mean test/val loss: 0.9518
[25, 50, 75] percentiles test/val loss: [0.6266 0.8664 1.1866]

Epoch 18, loss = 0.9369
Mean test/val loss: 0.9519
[25, 50, 75] percentiles test/val loss: [0.6201 0.8576 1.1937]

Epoch 20, loss = 0.9203
Mean test/val loss: 0.9346
[25, 50, 75] percentiles test/val loss: [0.6093 0.8404 1.1556]

Epoch 22, loss = 0.9084
Mean test/val loss: 0.9413
[25, 50, 75] percentiles test/val loss: [0.6108 0.85   1.1615]

Epoch 24, loss = 0.8938
Mean test/val loss: 0.8983
[25, 50, 75] percentiles test/val loss: [0.5791 0.8068 1.1148]

Epoch 26, loss = 0.8825
Mean test/val loss: 0.8914
[25, 50, 75] percentiles test/val loss: [0.5812 0.8037 1.1017]

Epoch 28, loss = 0.8730
Mean test/val loss: 0.8908
[25, 50, 75] percentiles test/val loss: [0.5767 0.8071 1.1037]

Epoch 30, loss = 0.8652
Mean test/val loss: 0.8831
[25, 50, 75] percentiles test/val loss: [0.5655 0.7895 1.0892]

Epoch 32, loss = 0.8538
Mean test/val loss: 0.8687
[25, 50, 75] percentiles test/val loss: [0.563  0.7759 1.0756]

Epoch 34, loss = 0.8458
Mean test/val loss: 0.8725
[25, 50, 75] percentiles test/val loss: [0.5674 0.7863 1.0761]

Epoch 36, loss = 0.8387
Mean test/val loss: 0.8724
[25, 50, 75] percentiles test/val loss: [0.5701 0.7826 1.0834]

Epoch 38, loss = 0.8332
Mean test/val loss: 0.8621
[25, 50, 75] percentiles test/val loss: [0.5558 0.7789 1.0633]

Epoch 40, loss = 0.8242
Mean test/val loss: 0.8537
[25, 50, 75] percentiles test/val loss: [0.5469 0.7736 1.0551]

New lr: 1e-05
Epoch 42, loss = 0.7659
Mean test/val loss: 0.8152
[25, 50, 75] percentiles test/val loss: [0.5239 0.7274 1.002 ]

Epoch 44, loss = 0.7582
Mean test/val loss: 0.8118
[25, 50, 75] percentiles test/val loss: [0.5218 0.723  0.9984]

Epoch 46, loss = 0.7529
Mean test/val loss: 0.8109
[25, 50, 75] percentiles test/val loss: [0.5209 0.7215 0.9928]

Epoch 48, loss = 0.7484
Mean test/val loss: 0.8097
[25, 50, 75] percentiles test/val loss: [0.5213 0.7237 0.9965]

Epoch 50, loss = 0.7444
Mean test/val loss: 0.8076
[25, 50, 75] percentiles test/val loss: [0.52   0.7189 0.9933]

Epoch 52, loss = 0.7409
Mean test/val loss: 0.8065
[25, 50, 75] percentiles test/val loss: [0.5207 0.7169 0.9869]

Epoch 54, loss = 0.7377
Mean test/val loss: 0.8066
[25, 50, 75] percentiles test/val loss: [0.5182 0.7148 0.9851]

Epoch 56, loss = 0.7345
Mean test/val loss: 0.8041
[25, 50, 75] percentiles test/val loss: [0.518  0.7147 0.9833]

Epoch 58, loss = 0.7315
Mean test/val loss: 0.8041
[25, 50, 75] percentiles test/val loss: [0.518  0.7152 0.9878]

Epoch 60, loss = 0.7288
Mean test/val loss: 0.8026
[25, 50, 75] percentiles test/val loss: [0.5157 0.7103 0.9815]

Epoch 62, loss = 0.7262
Mean test/val loss: 0.8033
[25, 50, 75] percentiles test/val loss: [0.5162 0.7117 0.9818]

Epoch 64, loss = 0.7236
Mean test/val loss: 0.8022
[25, 50, 75] percentiles test/val loss: [0.5161 0.7114 0.9818]

Epoch 66, loss = 0.7210
Mean test/val loss: 0.8011
[25, 50, 75] percentiles test/val loss: [0.5162 0.7117 0.9785]

Epoch 68, loss = 0.7188
Mean test/val loss: 0.7993
[25, 50, 75] percentiles test/val loss: [0.5168 0.7078 0.9779]

Epoch 70, loss = 0.7166
Mean test/val loss: 0.8000
[25, 50, 75] percentiles test/val loss: [0.5142 0.7098 0.9788]


Total parameters: 26462000
Total training + validation time: 16.0 hours, 1.0 mins, and 28.30000000000291 secs
Final val loss: 0.8000449904669076

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample1050: 2.0280849933624268
dataset_09_28_23 sample7802: 0.70108962059021
dataset_09_28_23 sample156: 0.7560195922851562
dataset_09_28_23 sample2452: 0.37974685430526733
dataset_09_28_23 sample752: 0.0096474289894104
MSE Loss: 0.775 +- 0.681

Downsampling (200k) Results:
dataset_09_28_23 sample1050-downsampling: 61.778846740722656
dataset_09_28_23 sample156-downsampling: 134.33242797851562
dataset_09_28_23 sample2452-downsampling: 23.78261375427246
dataset_09_28_23 sample752-downsampling: 0.614604115486145
dataset_09_28_23 sample7802-downsampling: 17.797794342041016
Loss: 47.661 +- 47.721

Removing /scratch/midway3/erschultz/ContactGNNEnergy13downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1050-regular: 62.46663284301758
dataset_09_28_23 sample156-regular: 118.7267837524414
dataset_09_28_23 sample2452-regular: 22.914260864257812
dataset_09_28_23 sample752-regular: 1.0371181964874268
dataset_09_28_23 sample7802-regular: 16.940553665161133
Loss: 44.417 +- 42.301

Removing /scratch/midway3/erschultz/ContactGNNEnergy13regsample

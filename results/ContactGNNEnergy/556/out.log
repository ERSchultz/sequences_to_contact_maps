#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy8', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log_and_mse_kth_diagonal', loss_k=2, lambda1=1.0, lambda2=0.01, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=556, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/556', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/556/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/556/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/556/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<scripts.neural_nets.losses.MSE_log_and_MSE_kth_diagonal object at 0x7f3c834f7820>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 11.691 minutes
Number of samples: 5000
Average num edges per graph:  64202.6016
Mean degree: [249.86 254.38 247.02 ... 253.91 251.64 251.34] +- [6.31 0.99 8.25 ... 2.04 5.21 3.97]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f3c7b694820>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 2.5817
Mean test/val loss: 2.5442
[25, 50, 75] percentiles test/val loss: [1.5829 2.3386 3.1489]

Epoch 4, loss = 2.4261
Mean test/val loss: 2.4489
[25, 50, 75] percentiles test/val loss: [1.5631 2.2262 3.0268]

Epoch 6, loss = 2.1751
Mean test/val loss: 2.1174
[25, 50, 75] percentiles test/val loss: [1.3741 1.9317 2.5565]

Epoch 8, loss = 2.0074
Mean test/val loss: 1.9887
[25, 50, 75] percentiles test/val loss: [1.2989 1.8148 2.365 ]

Epoch 10, loss = 1.9425
Mean test/val loss: 1.9922
[25, 50, 75] percentiles test/val loss: [1.344  1.8253 2.3324]

Epoch 12, loss = 1.8213
Mean test/val loss: 1.7898
[25, 50, 75] percentiles test/val loss: [1.125  1.5807 2.0928]

Epoch 14, loss = 1.7175
Mean test/val loss: 1.8484
[25, 50, 75] percentiles test/val loss: [1.1315 1.6383 2.2089]

Epoch 16, loss = 1.6393
Mean test/val loss: 1.6403
[25, 50, 75] percentiles test/val loss: [1.0162 1.4351 1.9507]

Epoch 18, loss = 1.5888
Mean test/val loss: 1.6507
[25, 50, 75] percentiles test/val loss: [1.0439 1.4288 1.9265]

Epoch 20, loss = 1.5296
Mean test/val loss: 1.5573
[25, 50, 75] percentiles test/val loss: [0.963  1.3497 1.8329]

Epoch 22, loss = 1.4784
Mean test/val loss: 1.4893
[25, 50, 75] percentiles test/val loss: [0.9209 1.2958 1.7746]

Epoch 24, loss = 1.4368
Mean test/val loss: 1.6675
[25, 50, 75] percentiles test/val loss: [1.0385 1.4316 1.9858]

Epoch 26, loss = 1.3978
Mean test/val loss: 1.5524
[25, 50, 75] percentiles test/val loss: [0.9483 1.3496 1.8338]

Epoch 28, loss = 1.3397
Mean test/val loss: 1.5005
[25, 50, 75] percentiles test/val loss: [0.9134 1.3098 1.7919]

Epoch 30, loss = 1.3606
Mean test/val loss: 1.4302
[25, 50, 75] percentiles test/val loss: [0.8758 1.2166 1.69  ]

Epoch 32, loss = 1.3467
Mean test/val loss: 1.3969
[25, 50, 75] percentiles test/val loss: [0.8611 1.1886 1.6712]

Epoch 34, loss = 1.3132
Mean test/val loss: 1.3841
[25, 50, 75] percentiles test/val loss: [0.8228 1.2005 1.6589]

Epoch 36, loss = 1.2850
Mean test/val loss: 1.4373
[25, 50, 75] percentiles test/val loss: [0.9184 1.2523 1.687 ]

Epoch 38, loss = 1.2582
Mean test/val loss: 1.3331
[25, 50, 75] percentiles test/val loss: [0.8146 1.1312 1.5952]

Epoch 40, loss = 1.2584
Mean test/val loss: 1.3116
[25, 50, 75] percentiles test/val loss: [0.7953 1.1221 1.5692]

New lr: 1e-05
Epoch 42, loss = 1.1084
Mean test/val loss: 1.2263
[25, 50, 75] percentiles test/val loss: [0.751  1.0409 1.4834]

Epoch 44, loss = 1.0839
Mean test/val loss: 1.2180
[25, 50, 75] percentiles test/val loss: [0.7416 1.023  1.4724]

Epoch 46, loss = 1.0669
Mean test/val loss: 1.2086
[25, 50, 75] percentiles test/val loss: [0.7268 1.0245 1.4536]

Epoch 48, loss = 1.0525
Mean test/val loss: 1.1977
[25, 50, 75] percentiles test/val loss: [0.7227 1.001  1.4357]

Epoch 50, loss = 1.0395
Mean test/val loss: 1.1964
[25, 50, 75] percentiles test/val loss: [0.7208 1.0038 1.439 ]

Epoch 52, loss = 1.0277
Mean test/val loss: 1.2053
[25, 50, 75] percentiles test/val loss: [0.7101 1.0014 1.4315]

Epoch 54, loss = 1.0175
Mean test/val loss: 1.1882
[25, 50, 75] percentiles test/val loss: [0.7128 0.9927 1.4092]

Epoch 56, loss = 1.0065
Mean test/val loss: 1.1820
[25, 50, 75] percentiles test/val loss: [0.7057 0.9913 1.4152]

Epoch 58, loss = 0.9968
Mean test/val loss: 1.1792
[25, 50, 75] percentiles test/val loss: [0.7006 0.9895 1.4095]

Epoch 60, loss = 0.9885
Mean test/val loss: 1.1726
[25, 50, 75] percentiles test/val loss: [0.6972 0.9752 1.4104]

Epoch 62, loss = 0.9823
Mean test/val loss: 1.1666
[25, 50, 75] percentiles test/val loss: [0.6857 0.9796 1.4014]

Epoch 64, loss = 0.9727
Mean test/val loss: 1.1643
[25, 50, 75] percentiles test/val loss: [0.6897 0.9756 1.401 ]

Epoch 66, loss = 0.9642
Mean test/val loss: 1.1627
[25, 50, 75] percentiles test/val loss: [0.6868 0.9743 1.3919]

Epoch 68, loss = 0.9564
Mean test/val loss: 1.1578
[25, 50, 75] percentiles test/val loss: [0.6865 0.9759 1.3976]

Epoch 70, loss = 0.9485
Mean test/val loss: 1.1565
[25, 50, 75] percentiles test/val loss: [0.6894 0.9691 1.3934]


Total parameters: 51479472
Total training + validation time: 10.0 hours, 2.0 mins, and 9.400000000001455 secs
Final val loss: 1.1564670265093446

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample981: 0.2393471747636795
dataset_09_28_23 sample324: 2.4248746633529663
dataset_09_28_23 sample3464: 1.3162173628807068
dataset_09_28_23 sample2834: 3.6086736917495728
dataset_09_28_23 sample1936: 1.0892653316259384
Loss1: 1.074, Loss2: 0.662
MSE_log+MSE_k_diag: 1.736 +- 1.168

Downsampling (200k) Results:
dataset_09_28_23 sample1936-downsampling: 14.079002380371094
dataset_09_28_23 sample2834-downsampling: 52.68347930908203
dataset_09_28_23 sample324-downsampling: 72.09014129638672
dataset_09_28_23 sample3464-downsampling: 27.761585235595703
dataset_09_28_23 sample981-downsampling: 4.603600025177002
Loss: 34.244 +- 24.898

Removing /scratch/midway3/erschultz/ContactGNNEnergy8downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1936-regular: 14.051653861999512
dataset_09_28_23 sample2834-regular: 51.11269760131836
dataset_09_28_23 sample324-regular: 58.76079559326172
dataset_09_28_23 sample3464-regular: 26.506202697753906
dataset_09_28_23 sample981-regular: 4.402192115783691
Loss: 30.967 +- 20.929

Removing /scratch/midway3/erschultz/ContactGNNEnergy8regsample

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy0', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[10, 50], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=577, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=True, input_L_to_D_mode='subtract', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/577', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/577/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/577/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/577/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7ff310765550>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 19.032 minutes
Number of samples: 5000
Average num edges per graph:  64202.6016
Mean degree: [249.86 254.38 247.02 ... 253.91 251.64 251.34] +- [6.31 0.99 8.25 ... 2.04 5.21 3.97]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7ff2d353da90>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.7395
Mean test/val loss: 1.7189
[25, 50, 75] percentiles test/val loss: [1.1162 1.6208 2.2315]

Epoch 4, loss = 1.6048
Mean test/val loss: 1.5220
[25, 50, 75] percentiles test/val loss: [1.0226 1.4739 1.9305]

Epoch 6, loss = 2.2566
Mean test/val loss: 1.8515
[25, 50, 75] percentiles test/val loss: [1.1772 1.7195 2.3943]

Epoch 8, loss = 2.1090
Mean test/val loss: 1.7837
[25, 50, 75] percentiles test/val loss: [1.1473 1.6588 2.3108]

Epoch 10, loss = 1.6153
Mean test/val loss: 1.3757
[25, 50, 75] percentiles test/val loss: [0.9469 1.3224 1.6964]

New lr: 1e-05
Epoch 12, loss = 1.2719
Mean test/val loss: 1.2472
[25, 50, 75] percentiles test/val loss: [0.8303 1.1781 1.5362]

Epoch 14, loss = 1.3289
Mean test/val loss: 1.4605
[25, 50, 75] percentiles test/val loss: [1.0342 1.3952 1.7576]

Epoch 16, loss = 1.2937
Mean test/val loss: 1.2193
[25, 50, 75] percentiles test/val loss: [0.8115 1.1447 1.513 ]

Epoch 18, loss = 1.1756
Mean test/val loss: 1.3390
[25, 50, 75] percentiles test/val loss: [0.8396 1.133  1.5165]

Epoch 20, loss = 1.1826
Mean test/val loss: 1.5171
[25, 50, 75] percentiles test/val loss: [1.0427 1.4552 1.8784]

Epoch 22, loss = 1.1954
Mean test/val loss: 1.1661
[25, 50, 75] percentiles test/val loss: [0.7631 1.089  1.4447]

Epoch 24, loss = 1.1324
Mean test/val loss: 1.1542
[25, 50, 75] percentiles test/val loss: [0.7867 1.103  1.4532]

Epoch 26, loss = 1.1081
Mean test/val loss: 1.1109
[25, 50, 75] percentiles test/val loss: [0.727  1.042  1.3856]

Epoch 28, loss = 1.0826
Mean test/val loss: 1.1012
[25, 50, 75] percentiles test/val loss: [0.6976 1.0203 1.3745]

Epoch 30, loss = 1.6514
Mean test/val loss: 1.4221
[25, 50, 75] percentiles test/val loss: [0.9799 1.3401 1.7584]

Epoch 32, loss = 1.3393
Mean test/val loss: 1.3096
[25, 50, 75] percentiles test/val loss: [0.8821 1.2651 1.624 ]

Epoch 34, loss = 1.1069
Mean test/val loss: 1.1004
[25, 50, 75] percentiles test/val loss: [0.7238 1.0186 1.3636]

Epoch 36, loss = 1.0695
Mean test/val loss: 1.0706
[25, 50, 75] percentiles test/val loss: [0.7    1.0062 1.3369]

Epoch 38, loss = 1.0522
Mean test/val loss: 1.0619
[25, 50, 75] percentiles test/val loss: [0.6765 0.9925 1.3146]

Epoch 40, loss = 1.0415
Mean test/val loss: 1.0561
[25, 50, 75] percentiles test/val loss: [0.6976 0.9839 1.3059]

Epoch 42, loss = 1.0291
Mean test/val loss: 1.0507
[25, 50, 75] percentiles test/val loss: [0.6745 0.9646 1.3158]

Epoch 44, loss = 1.0191
Mean test/val loss: 1.0613
[25, 50, 75] percentiles test/val loss: [0.7001 0.9983 1.2935]

Epoch 46, loss = 1.0158
Mean test/val loss: 1.0503
[25, 50, 75] percentiles test/val loss: [0.6647 0.9757 1.3128]

Epoch 48, loss = 1.0021
Mean test/val loss: 1.0227
[25, 50, 75] percentiles test/val loss: [0.6492 0.946  1.2756]

Epoch 50, loss = 0.9934
Mean test/val loss: 1.0137
[25, 50, 75] percentiles test/val loss: [0.6493 0.9368 1.2531]

New lr: 1.0000000000000002e-06
Epoch 52, loss = 0.9653
Mean test/val loss: 0.9966
[25, 50, 75] percentiles test/val loss: [0.6356 0.9188 1.2357]

Epoch 54, loss = 0.9625
Mean test/val loss: 0.9980
[25, 50, 75] percentiles test/val loss: [0.6409 0.9197 1.2321]

Epoch 56, loss = 0.9604
Mean test/val loss: 0.9931
[25, 50, 75] percentiles test/val loss: [0.6385 0.9151 1.2334]

Epoch 58, loss = 0.9585
Mean test/val loss: 0.9911
[25, 50, 75] percentiles test/val loss: [0.6288 0.9118 1.2298]

Epoch 60, loss = 0.9569
Mean test/val loss: 0.9920
[25, 50, 75] percentiles test/val loss: [0.6351 0.9063 1.2214]

Epoch 62, loss = 0.9553
Mean test/val loss: 0.9900
[25, 50, 75] percentiles test/val loss: [0.6307 0.9122 1.2298]

Epoch 64, loss = 0.9538
Mean test/val loss: 0.9884
[25, 50, 75] percentiles test/val loss: [0.6328 0.9074 1.2249]

Epoch 66, loss = 0.9523
Mean test/val loss: 0.9880
[25, 50, 75] percentiles test/val loss: [0.628  0.9078 1.2305]

Epoch 68, loss = 0.9509
Mean test/val loss: 0.9863
[25, 50, 75] percentiles test/val loss: [0.6285 0.9104 1.222 ]

Epoch 70, loss = 0.9495
Mean test/val loss: 0.9852
[25, 50, 75] percentiles test/val loss: [0.6242 0.9083 1.2169]

Epoch 72, loss = 0.9481
Mean test/val loss: 0.9852
[25, 50, 75] percentiles test/val loss: [0.6275 0.9023 1.2257]

Epoch 74, loss = 0.9470
Mean test/val loss: 0.9854
[25, 50, 75] percentiles test/val loss: [0.6242 0.9047 1.2228]

Epoch 76, loss = 0.9457
Mean test/val loss: 0.9839
[25, 50, 75] percentiles test/val loss: [0.6249 0.9018 1.2218]

Epoch 78, loss = 0.9444
Mean test/val loss: 0.9827
[25, 50, 75] percentiles test/val loss: [0.6284 0.9029 1.2176]

Epoch 80, loss = 0.9432
Mean test/val loss: 0.9809
[25, 50, 75] percentiles test/val loss: [0.6232 0.9018 1.215 ]


Total parameters: 51479472
Total training + validation time: 24.0 hours, 17.0 mins, and 35.0 secs
Final val loss: 0.9809360395818949

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample981: 0.25785157084465027
dataset_09_28_23 sample324: 0.933175802230835
dataset_09_28_23 sample3464: 1.232660174369812
dataset_09_28_23 sample2834: 2.692542791366577
dataset_09_28_23 sample1936: 1.0094006061553955
MSE_log: 1.225 +- 0.803

Downsampling (200k) Results:
dataset_09_28_23 sample1936-downsampling: 15.822694778442383
dataset_09_28_23 sample2834-downsampling: 63.309814453125
dataset_09_28_23 sample324-downsampling: 82.29199981689453
dataset_09_28_23 sample3464-downsampling: 32.743003845214844
dataset_09_28_23 sample981-downsampling: 5.362094402313232
Loss: 39.906 +- 28.875

Removing /scratch/midway3/erschultz/ContactGNNEnergy0downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1936-regular: 15.912784576416016
dataset_09_28_23 sample2834-regular: 63.01123046875
dataset_09_28_23 sample324-regular: 79.5955581665039
dataset_09_28_23 sample3464-regular: 31.007522583007812
dataset_09_28_23 sample981-regular: 5.528284072875977
Loss: 39.011 +- 28.078

Removing /scratch/midway3/erschultz/ContactGNNEnergy0regsample

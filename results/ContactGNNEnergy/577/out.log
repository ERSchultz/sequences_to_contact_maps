#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy0', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[10, 50], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=577, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=True, input_L_to_D_mode='subtract', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/577', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/577/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/577/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/577/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7f06d251d550>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 16.163 minutes
Number of samples: 5000
Average num edges per graph:  64202.6016
Mean degree: [249.86 254.38 247.02 ... 253.91 251.64 251.34] +- [6.31 0.99 8.25 ... 2.04 5.21 3.97]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f069c368b50>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.7905
Mean test/val loss: 1.7971
[25, 50, 75] percentiles test/val loss: [1.2265 1.7297 2.3219]

Epoch 4, loss = 1.5986
Mean test/val loss: 1.5368
[25, 50, 75] percentiles test/val loss: [1.0389 1.4689 1.9399]

Epoch 6, loss = 4.6932
Mean test/val loss: 1.8864
[25, 50, 75] percentiles test/val loss: [1.1781 1.7354 2.4085]

Epoch 8, loss = 2.0803
Mean test/val loss: 1.7805
[25, 50, 75] percentiles test/val loss: [1.1725 1.6903 2.2936]

Epoch 10, loss = 1.4986
Mean test/val loss: 1.4136
[25, 50, 75] percentiles test/val loss: [1.0063 1.3493 1.7175]

New lr: 1e-05
Epoch 12, loss = 1.2872
Mean test/val loss: 1.2778
[25, 50, 75] percentiles test/val loss: [0.876  1.2124 1.5631]

Epoch 14, loss = 1.2474
Mean test/val loss: 1.2727
[25, 50, 75] percentiles test/val loss: [0.8849 1.1994 1.5748]

Epoch 16, loss = 1.2233
Mean test/val loss: 1.2264
[25, 50, 75] percentiles test/val loss: [0.8384 1.1597 1.5231]

Epoch 18, loss = 1.1960
Mean test/val loss: 1.1980
[25, 50, 75] percentiles test/val loss: [0.8149 1.13   1.4796]

Epoch 20, loss = 1.1605
Mean test/val loss: 1.1607
[25, 50, 75] percentiles test/val loss: [0.7818 1.0844 1.4368]

Epoch 22, loss = 1.1271
Mean test/val loss: 1.1407
[25, 50, 75] percentiles test/val loss: [0.7322 1.0475 1.4026]

Epoch 24, loss = 1.1015
Mean test/val loss: 1.1185
[25, 50, 75] percentiles test/val loss: [0.7273 1.0323 1.3764]

Epoch 26, loss = 1.0841
Mean test/val loss: 1.1209
[25, 50, 75] percentiles test/val loss: [0.7243 1.009  1.3783]

Epoch 28, loss = 1.0717
Mean test/val loss: 1.0969
[25, 50, 75] percentiles test/val loss: [0.7144 1.0035 1.3651]

Epoch 30, loss = 1.0574
Mean test/val loss: 1.0782
[25, 50, 75] percentiles test/val loss: [0.6971 0.9955 1.3727]

Epoch 32, loss = 1.0439
Mean test/val loss: 1.0705
[25, 50, 75] percentiles test/val loss: [0.6947 0.9957 1.3567]

Epoch 34, loss = 1.0592
Mean test/val loss: 1.0451
[25, 50, 75] percentiles test/val loss: [0.67   0.9567 1.3083]

Epoch 36, loss = 1.0248
Mean test/val loss: 1.0512
[25, 50, 75] percentiles test/val loss: [0.6749 0.9795 1.3032]

Epoch 38, loss = 1.0154
Mean test/val loss: 1.0285
[25, 50, 75] percentiles test/val loss: [0.6598 0.9335 1.2719]

Epoch 40, loss = 1.0047
Mean test/val loss: 1.0270
[25, 50, 75] percentiles test/val loss: [0.6578 0.9407 1.2756]

Epoch 42, loss = 0.9992
Mean test/val loss: 1.0198
[25, 50, 75] percentiles test/val loss: [0.6432 0.9333 1.279 ]

Epoch 44, loss = 0.9887
Mean test/val loss: 1.0188
[25, 50, 75] percentiles test/val loss: [0.6737 0.9296 1.2583]

Epoch 46, loss = 0.9817
Mean test/val loss: 1.0259
[25, 50, 75] percentiles test/val loss: [0.6591 0.945  1.2835]

Epoch 48, loss = 0.9732
Mean test/val loss: 1.0024
[25, 50, 75] percentiles test/val loss: [0.6331 0.9279 1.234 ]

Epoch 50, loss = 0.9668
Mean test/val loss: 0.9899
[25, 50, 75] percentiles test/val loss: [0.6348 0.9126 1.219 ]

New lr: 1.0000000000000002e-06
Epoch 52, loss = 0.9383
Mean test/val loss: 0.9771
[25, 50, 75] percentiles test/val loss: [0.633  0.8949 1.2086]

Epoch 54, loss = 0.9353
Mean test/val loss: 0.9781
[25, 50, 75] percentiles test/val loss: [0.6376 0.8943 1.2116]

Epoch 56, loss = 0.9334
Mean test/val loss: 0.9755
[25, 50, 75] percentiles test/val loss: [0.6314 0.8882 1.2107]

Epoch 58, loss = 0.9316
Mean test/val loss: 0.9746
[25, 50, 75] percentiles test/val loss: [0.6264 0.8869 1.2072]

Epoch 60, loss = 0.9300
Mean test/val loss: 0.9769
[25, 50, 75] percentiles test/val loss: [0.6309 0.9    1.2045]

Epoch 62, loss = 0.9286
Mean test/val loss: 0.9733
[25, 50, 75] percentiles test/val loss: [0.6287 0.8871 1.2088]

Epoch 64, loss = 0.9274
Mean test/val loss: 0.9731
[25, 50, 75] percentiles test/val loss: [0.6295 0.8844 1.207 ]

Epoch 66, loss = 0.9259
Mean test/val loss: 0.9716
[25, 50, 75] percentiles test/val loss: [0.6272 0.8831 1.2049]

Epoch 68, loss = 0.9245
Mean test/val loss: 0.9690
[25, 50, 75] percentiles test/val loss: [0.6166 0.8813 1.2042]

Epoch 70, loss = 0.9233
Mean test/val loss: 0.9701
[25, 50, 75] percentiles test/val loss: [0.6256 0.8841 1.21  ]

Epoch 72, loss = 0.9222
Mean test/val loss: 0.9692
[25, 50, 75] percentiles test/val loss: [0.6226 0.8791 1.2036]

Epoch 74, loss = 0.9209
Mean test/val loss: 0.9682
[25, 50, 75] percentiles test/val loss: [0.6268 0.8886 1.1983]

Epoch 76, loss = 0.9198
Mean test/val loss: 0.9694
[25, 50, 75] percentiles test/val loss: [0.6312 0.8874 1.1999]

Epoch 78, loss = 0.9187
Mean test/val loss: 0.9688
[25, 50, 75] percentiles test/val loss: [0.6225 0.8911 1.1943]

Epoch 80, loss = 0.9175
Mean test/val loss: 0.9658
[25, 50, 75] percentiles test/val loss: [0.6258 0.8809 1.2063]


Total parameters: 51479472
Total training + validation time: 27.0 hours, 50.0 mins, and 17.19999999999709 secs
Final val loss: 0.9658213119432331

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample981: 0.2259608954191208
dataset_09_28_23 sample324: 0.8762173056602478
dataset_09_28_23 sample3464: 1.1770155429840088
dataset_09_28_23 sample2834: 2.609151840209961
dataset_09_28_23 sample1936: 1.0429972410202026
MSE_log: 1.186 +- 0.783

Downsampling (200k) Results:
dataset_09_28_23 sample1936-downsampling: 16.481433868408203
dataset_09_28_23 sample2834-downsampling: 60.713191986083984
dataset_09_28_23 sample324-downsampling: 67.37166595458984
dataset_09_28_23 sample3464-downsampling: 28.873260498046875
dataset_09_28_23 sample981-downsampling: 4.950595855712891
Loss: 35.678 +- 24.455

Removing /scratch/midway3/erschultz/ContactGNNEnergy0downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1936-regular: 15.686378479003906
dataset_09_28_23 sample2834-regular: 60.89955139160156
dataset_09_28_23 sample324-regular: 75.08660125732422
dataset_09_28_23 sample3464-regular: 27.77401351928711
dataset_09_28_23 sample981-regular: 4.714753150939941
Loss: 36.832 +- 26.845

Removing /scratch/midway3/erschultz/ContactGNNEnergy0regsample

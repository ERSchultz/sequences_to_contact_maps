#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_11_21_23_imr90'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy14', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=615, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/615', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/615/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/615/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/615/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7fe2b0f94670>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 15.075 minutes
Number of samples: 5000
Average num edges per graph:  65022.0704
Mean degree: [254.99 255.   255.   ... 255.   255.   212.8 ] +- [ 0.09  0.    0.   ...  0.    0.   36.13]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [2441, 2439, 4524, 4572, 267, 1589, 3722, 3235, 4344, 1440, 3110, 4976, 3392, 556, 4782, 4352, 3885, 4830, 977, 64, 2233, 3025, 714, 4783, 4117, 1362, 3600, 1487, 4535, 320, 1506, 926, 4791, 4059, 3950, 92, 3674, 118, 2249, 287, 4299, 1798, 1207, 3727, 1520, 749, 2869, 3414, 2777, 4226, 833, 2537, 2767, 514, 4825, 3684, 3756, 1398, 4383, 2828, 459, 4182, 3906, 1412, 1354, 1564, 3312, 2678, 2404, 1626, 3304, 326, 3164, 3003, 1649, 2045, 3288, 2798, 808, 3230, 1884, 475, 2047, 2825, 2749, 1600, 1640, 2854, 1569, 3538, 887, 4611, 1617, 642, 2434, 4612, 1300, 3809, 2221, 3296, 4932, 4785]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fe27ecba940>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.0674
Mean test/val loss: 0.9708
[25, 50, 75] percentiles test/val loss: [0.6854 0.9333 1.226 ]

Epoch 4, loss = 0.9100
Mean test/val loss: 0.8997
[25, 50, 75] percentiles test/val loss: [0.6315 0.8751 1.1344]

Epoch 6, loss = 0.8453
Mean test/val loss: 0.8453
[25, 50, 75] percentiles test/val loss: [0.5624 0.8111 1.0658]

Epoch 8, loss = 0.8060
Mean test/val loss: 0.8121
[25, 50, 75] percentiles test/val loss: [0.5457 0.774  1.015 ]

Epoch 10, loss = 0.7720
Mean test/val loss: 0.7850
[25, 50, 75] percentiles test/val loss: [0.5244 0.7494 0.9711]

Epoch 12, loss = 0.7452
Mean test/val loss: 0.7440
[25, 50, 75] percentiles test/val loss: [0.4995 0.7081 0.9344]

Epoch 14, loss = 0.7276
Mean test/val loss: 0.7335
[25, 50, 75] percentiles test/val loss: [0.49   0.6987 0.9143]

Epoch 16, loss = 0.7095
Mean test/val loss: 0.7296
[25, 50, 75] percentiles test/val loss: [0.5005 0.6903 0.8898]

Epoch 18, loss = 0.6941
Mean test/val loss: 0.7124
[25, 50, 75] percentiles test/val loss: [0.4871 0.6772 0.8831]

Epoch 20, loss = 0.6794
Mean test/val loss: 0.7002
[25, 50, 75] percentiles test/val loss: [0.4594 0.661  0.8669]

Epoch 22, loss = 0.6693
Mean test/val loss: 0.7144
[25, 50, 75] percentiles test/val loss: [0.4768 0.6823 0.8981]

Epoch 24, loss = 0.6583
Mean test/val loss: 0.6835
[25, 50, 75] percentiles test/val loss: [0.4576 0.6635 0.8459]

Epoch 26, loss = 0.6481
Mean test/val loss: 0.6770
[25, 50, 75] percentiles test/val loss: [0.4569 0.646  0.84  ]

Epoch 28, loss = 0.6376
Mean test/val loss: 0.6745
[25, 50, 75] percentiles test/val loss: [0.4571 0.6439 0.84  ]

Epoch 30, loss = 0.6299
Mean test/val loss: 0.6636
[25, 50, 75] percentiles test/val loss: [0.4417 0.6392 0.8275]

Epoch 32, loss = 0.6221
Mean test/val loss: 0.6597
[25, 50, 75] percentiles test/val loss: [0.4491 0.6276 0.822 ]

Epoch 34, loss = 0.6127
Mean test/val loss: 0.6590
[25, 50, 75] percentiles test/val loss: [0.4424 0.6262 0.8186]

Epoch 36, loss = 0.6060
Mean test/val loss: 0.6471
[25, 50, 75] percentiles test/val loss: [0.4427 0.6192 0.7967]

Epoch 38, loss = 0.5987
Mean test/val loss: 0.6371
[25, 50, 75] percentiles test/val loss: [0.4245 0.6046 0.7831]

Epoch 40, loss = 0.5910
Mean test/val loss: 0.6523
[25, 50, 75] percentiles test/val loss: [0.4341 0.6268 0.8176]

New lr: 1e-05
Epoch 42, loss = 0.5389
Mean test/val loss: 0.5962
[25, 50, 75] percentiles test/val loss: [0.389  0.5677 0.7348]

Epoch 44, loss = 0.5305
Mean test/val loss: 0.5931
[25, 50, 75] percentiles test/val loss: [0.3943 0.565  0.7339]

Epoch 46, loss = 0.5245
Mean test/val loss: 0.5922
[25, 50, 75] percentiles test/val loss: [0.3933 0.5663 0.7354]

Epoch 48, loss = 0.5195
Mean test/val loss: 0.5901
[25, 50, 75] percentiles test/val loss: [0.3878 0.5664 0.7313]

Epoch 50, loss = 0.5150
Mean test/val loss: 0.5872
[25, 50, 75] percentiles test/val loss: [0.3861 0.5629 0.7249]

Epoch 52, loss = 0.5107
Mean test/val loss: 0.5865
[25, 50, 75] percentiles test/val loss: [0.3875 0.5621 0.7246]

Epoch 54, loss = 0.5069
Mean test/val loss: 0.5860
[25, 50, 75] percentiles test/val loss: [0.3863 0.5604 0.7228]

Epoch 56, loss = 0.5031
Mean test/val loss: 0.5862
[25, 50, 75] percentiles test/val loss: [0.3828 0.5609 0.7259]

Epoch 58, loss = 0.4997
Mean test/val loss: 0.5852
[25, 50, 75] percentiles test/val loss: [0.3843 0.5605 0.7266]

Epoch 60, loss = 0.4964
Mean test/val loss: 0.5840
[25, 50, 75] percentiles test/val loss: [0.3845 0.561  0.7225]


Total parameters: 34470000
Total training + validation time: 7.0 hours, 5.0 mins, and 30.599999999998545 secs
Final val loss: 0.5840219039395451

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_11_21_23_imr90 sample981: 0.47991979122161865
dataset_11_21_23_imr90 sample324: 0.6927934885025024
dataset_11_21_23_imr90 sample3464: 0.7210392355918884
dataset_11_21_23_imr90 sample2834: 0.29820507764816284
dataset_11_21_23_imr90 sample1936: 0.6468721032142639
MSE_log: 0.568 +- 0.159

Downsampling (200k) Results:
Original sampling (400k) Results:

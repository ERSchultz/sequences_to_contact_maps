#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_17_23', '/project2/depablo/erschultz/dataset_09_19_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy20', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=488, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/488', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/488/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/488/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/488/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fc94f7a13a0>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 28.51 minutes
Number of samples: 10000
Average num edges per graph:  63217.4802
Mean degree: [245.12 249.23 254.53 ... 248.9  224.55 252.47] +- [ 9.06  7.42  0.85 ...  8.56 41.39  4.33]

split sizes: train=9000, val=1000, test=0, N=10000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fc90a5dc8b0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.2467
Mean test/val loss: 1.1356
[25, 50, 75] percentiles test/val loss: [0.7114 1.0417 1.4231]

Epoch 4, loss = 1.0942
Mean test/val loss: 1.0615
[25, 50, 75] percentiles test/val loss: [0.6424 0.9607 1.3187]

Epoch 6, loss = 0.9963
Mean test/val loss: 0.9651
[25, 50, 75] percentiles test/val loss: [0.589  0.8751 1.2173]

Epoch 8, loss = 0.9342
Mean test/val loss: 0.9156
[25, 50, 75] percentiles test/val loss: [0.5446 0.8351 1.1346]

Epoch 10, loss = 0.8957
Mean test/val loss: 0.9161
[25, 50, 75] percentiles test/val loss: [0.5649 0.8305 1.1197]

Epoch 12, loss = 0.8581
Mean test/val loss: 0.8629
[25, 50, 75] percentiles test/val loss: [0.5256 0.7802 1.0917]

Epoch 14, loss = 0.8360
Mean test/val loss: 0.8201
[25, 50, 75] percentiles test/val loss: [0.4992 0.7472 1.0376]

Epoch 16, loss = 0.8136
Mean test/val loss: 0.8411
[25, 50, 75] percentiles test/val loss: [0.5083 0.7645 1.0567]

Epoch 18, loss = 0.7922
Mean test/val loss: 0.7967
[25, 50, 75] percentiles test/val loss: [0.4914 0.7323 1.007 ]

Epoch 20, loss = 0.7773
Mean test/val loss: 0.7868
[25, 50, 75] percentiles test/val loss: [0.4857 0.7133 0.9977]

Epoch 22, loss = 0.7638
Mean test/val loss: 0.7713
[25, 50, 75] percentiles test/val loss: [0.472  0.7037 0.9759]

Epoch 24, loss = 0.7499
Mean test/val loss: 0.7690
[25, 50, 75] percentiles test/val loss: [0.4717 0.696  0.9682]

Epoch 26, loss = 0.7386
Mean test/val loss: 0.7575
[25, 50, 75] percentiles test/val loss: [0.4666 0.6913 0.9414]

Epoch 28, loss = 0.7267
Mean test/val loss: 0.7383
[25, 50, 75] percentiles test/val loss: [0.4555 0.6723 0.9362]

Epoch 30, loss = 0.7179
Mean test/val loss: 0.7530
[25, 50, 75] percentiles test/val loss: [0.4528 0.6836 0.9375]

Epoch 32, loss = 0.7096
Mean test/val loss: 0.7333
[25, 50, 75] percentiles test/val loss: [0.4444 0.6756 0.9238]

Epoch 34, loss = 0.7015
Mean test/val loss: 0.7331
[25, 50, 75] percentiles test/val loss: [0.4438 0.6701 0.9327]

Epoch 36, loss = 0.6930
Mean test/val loss: 0.7206
[25, 50, 75] percentiles test/val loss: [0.4359 0.6585 0.9018]

Epoch 38, loss = 0.6858
Mean test/val loss: 0.7192
[25, 50, 75] percentiles test/val loss: [0.4352 0.6636 0.8957]

Epoch 40, loss = 0.6800
Mean test/val loss: 0.7073
[25, 50, 75] percentiles test/val loss: [0.4288 0.6553 0.8919]

New lr: 1e-05
Epoch 42, loss = 0.6269
Mean test/val loss: 0.6736
[25, 50, 75] percentiles test/val loss: [0.4109 0.6256 0.839 ]

Epoch 44, loss = 0.6203
Mean test/val loss: 0.6721
[25, 50, 75] percentiles test/val loss: [0.4092 0.6212 0.8375]

Epoch 46, loss = 0.6157
Mean test/val loss: 0.6715
[25, 50, 75] percentiles test/val loss: [0.408  0.6195 0.839 ]

Epoch 48, loss = 0.6120
Mean test/val loss: 0.6701
[25, 50, 75] percentiles test/val loss: [0.4104 0.6203 0.8349]

Epoch 50, loss = 0.6087
Mean test/val loss: 0.6698
[25, 50, 75] percentiles test/val loss: [0.4076 0.6169 0.8362]

Epoch 52, loss = 0.6058
Mean test/val loss: 0.6679
[25, 50, 75] percentiles test/val loss: [0.4073 0.6162 0.8343]

Epoch 54, loss = 0.6030
Mean test/val loss: 0.6680
[25, 50, 75] percentiles test/val loss: [0.405  0.6171 0.8342]

Epoch 56, loss = 0.6005
Mean test/val loss: 0.6682
[25, 50, 75] percentiles test/val loss: [0.4045 0.6182 0.8375]

Epoch 58, loss = 0.5981
Mean test/val loss: 0.6679
[25, 50, 75] percentiles test/val loss: [0.4046 0.6146 0.8352]

Epoch 60, loss = 0.5960
Mean test/val loss: 0.6668
[25, 50, 75] percentiles test/val loss: [0.4023 0.6176 0.8345]

Epoch 62, loss = 0.5939
Mean test/val loss: 0.6667
[25, 50, 75] percentiles test/val loss: [0.4034 0.6144 0.8334]

Epoch 64, loss = 0.5920
Mean test/val loss: 0.6663
[25, 50, 75] percentiles test/val loss: [0.4006 0.6143 0.8326]

Epoch 66, loss = 0.5901
Mean test/val loss: 0.6662
[25, 50, 75] percentiles test/val loss: [0.4027 0.6173 0.8352]

Epoch 68, loss = 0.5884
Mean test/val loss: 0.6666
[25, 50, 75] percentiles test/val loss: [0.402  0.6144 0.8312]

Epoch 70, loss = 0.5866
Mean test/val loss: 0.6654
[25, 50, 75] percentiles test/val loss: [0.4016 0.6164 0.8303]

Epoch 72, loss = 0.5850
Mean test/val loss: 0.6661
[25, 50, 75] percentiles test/val loss: [0.4012 0.6134 0.835 ]

Epoch 74, loss = 0.5833
Mean test/val loss: 0.6657
[25, 50, 75] percentiles test/val loss: [0.4023 0.6151 0.834 ]

Epoch 76, loss = 0.5818
Mean test/val loss: 0.6647
[25, 50, 75] percentiles test/val loss: [0.4027 0.6117 0.8334]

Epoch 78, loss = 0.5803
Mean test/val loss: 0.6640
[25, 50, 75] percentiles test/val loss: [0.4024 0.6135 0.8297]

Epoch 80, loss = 0.5788
Mean test/val loss: 0.6644
[25, 50, 75] percentiles test/val loss: [0.4026 0.6135 0.8347]


Total parameters: 26462000
Total training + validation time: 16.0 hours, 12.0 mins, and 49.30000000000291 secs
Final val loss: 0.6644134192513302

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_09_17_23 sample1051: 1.0422701835632324
dataset_09_19_23 sample3302: 0.5511530637741089
dataset_09_17_23 sample1560: 1.298888921737671
dataset_09_17_23 sample2453: 1.0081841945648193
dataset_09_19_23 sample302: 0.6454304456710815
MSE Loss: 0.909 +- 0.275

Downsampling (40%) Results:
dataset_09_17_23 sample1051-downsampling: 54.91904830932617

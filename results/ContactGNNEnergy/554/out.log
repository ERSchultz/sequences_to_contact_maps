#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy6', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log_and_mse_kth_diagonal', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=554, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/554', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/554/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/554/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/554/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<scripts.neural_nets.losses.MSE_log_and_MSE_kth_diagonal object at 0x7fce6fa52850>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 12.49 minutes
Number of samples: 5000
Average num edges per graph:  64202.6016
Mean degree: [249.86 254.38 247.02 ... 253.91 251.64 251.34] +- [6.31 0.99 8.25 ... 2.04 5.21 3.97]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fce67be8040>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 84.8849
Mean test/val loss: 82.4086
[25, 50, 75] percentiles test/val loss: [ 32.4405  60.6745 104.9927]

Epoch 4, loss = 79.2539
Mean test/val loss: 80.5929
[25, 50, 75] percentiles test/val loss: [ 34.4352  60.2271 103.9243]

Epoch 6, loss = 73.8714
Mean test/val loss: 72.3988
[25, 50, 75] percentiles test/val loss: [27.5233 51.9938 89.5183]

Epoch 8, loss = 66.3232
Mean test/val loss: 62.7788
[25, 50, 75] percentiles test/val loss: [23.6978 43.5187 74.4294]

Epoch 10, loss = 61.6207
Mean test/val loss: 55.8718
[25, 50, 75] percentiles test/val loss: [20.1625 36.9322 66.6419]

Epoch 12, loss = 53.8689
Mean test/val loss: 56.4722
[25, 50, 75] percentiles test/val loss: [19.3417 36.5426 64.2192]

Epoch 14, loss = 48.8872
Mean test/val loss: 49.3482
[25, 50, 75] percentiles test/val loss: [16.3557 29.2638 56.5985]

Epoch 16, loss = 43.4318
Mean test/val loss: 50.8130
[25, 50, 75] percentiles test/val loss: [19.1088 33.4391 58.8664]

Epoch 18, loss = 38.6592
Mean test/val loss: 42.4487
[25, 50, 75] percentiles test/val loss: [13.3653 24.7553 45.5419]

Epoch 20, loss = 35.0377
Mean test/val loss: 43.6696
[25, 50, 75] percentiles test/val loss: [12.8009 22.7254 41.2292]

Epoch 22, loss = 33.1687
Mean test/val loss: 37.9488
[25, 50, 75] percentiles test/val loss: [12.627  22.0515 40.0834]

Epoch 24, loss = 28.8013
Mean test/val loss: 35.3403
[25, 50, 75] percentiles test/val loss: [12.3594 20.808  37.6901]

Epoch 26, loss = 27.0245
Mean test/val loss: 37.7427
[25, 50, 75] percentiles test/val loss: [11.927  21.3651 41.7137]

Epoch 28, loss = 25.0243
Mean test/val loss: 33.9925
[25, 50, 75] percentiles test/val loss: [11.2421 18.9902 34.7037]

Epoch 30, loss = 23.2829
Mean test/val loss: 32.7321
[25, 50, 75] percentiles test/val loss: [ 9.762  17.6205 33.2538]

Epoch 32, loss = 22.3644
Mean test/val loss: 29.2857
[25, 50, 75] percentiles test/val loss: [10.0603 15.7788 28.9235]

Epoch 34, loss = 20.4831
Mean test/val loss: 30.6380
[25, 50, 75] percentiles test/val loss: [10.4046 16.0767 31.3267]

Epoch 36, loss = 18.4900
Mean test/val loss: 29.3663
[25, 50, 75] percentiles test/val loss: [ 9.3992 16.088  30.4505]

Epoch 38, loss = 17.8347
Mean test/val loss: 31.1655
[25, 50, 75] percentiles test/val loss: [ 9.9865 17.3297 33.9892]

Epoch 40, loss = 16.4405
Mean test/val loss: 27.7065
[25, 50, 75] percentiles test/val loss: [ 8.8636 14.9901 28.7035]

New lr: 1e-05
Epoch 42, loss = 9.7974
Mean test/val loss: 22.2774
[25, 50, 75] percentiles test/val loss: [ 7.0107 11.3834 21.0527]

Epoch 44, loss = 8.6971
Mean test/val loss: 21.5328
[25, 50, 75] percentiles test/val loss: [ 6.5416 11.1042 20.8268]

Epoch 46, loss = 8.0560
Mean test/val loss: 21.3878
[25, 50, 75] percentiles test/val loss: [ 6.6108 11.1274 20.5629]

Epoch 48, loss = 7.5209
Mean test/val loss: 20.8510
[25, 50, 75] percentiles test/val loss: [ 6.4537 10.8225 21.2213]

Epoch 50, loss = 7.0905
Mean test/val loss: 20.6501
[25, 50, 75] percentiles test/val loss: [ 6.4457 10.6785 19.1591]

Epoch 52, loss = 6.7320
Mean test/val loss: 20.2317
[25, 50, 75] percentiles test/val loss: [ 6.2543 10.6962 19.9785]

Epoch 54, loss = 6.4418
Mean test/val loss: 20.2538
[25, 50, 75] percentiles test/val loss: [ 6.3807 10.2828 19.8214]

Epoch 56, loss = 6.1886
Mean test/val loss: 19.8979
[25, 50, 75] percentiles test/val loss: [ 6.3097 10.478  19.5276]

Epoch 58, loss = 5.9527
Mean test/val loss: 19.8536
[25, 50, 75] percentiles test/val loss: [ 6.3126 10.0138 19.5921]

Epoch 60, loss = 5.7507
Mean test/val loss: 20.0100
[25, 50, 75] percentiles test/val loss: [ 6.2007 10.3123 19.4639]

Epoch 62, loss = 5.5989
Mean test/val loss: 19.6576
[25, 50, 75] percentiles test/val loss: [ 6.0214  9.9684 19.0168]

Epoch 64, loss = 5.4398
Mean test/val loss: 19.3490
[25, 50, 75] percentiles test/val loss: [ 6.2653  9.92   18.2865]

Epoch 66, loss = 5.2902
Mean test/val loss: 20.0212
[25, 50, 75] percentiles test/val loss: [ 6.0485 10.062  18.7471]

Epoch 68, loss = 5.1735
Mean test/val loss: 19.7439
[25, 50, 75] percentiles test/val loss: [ 6.1145  9.8407 18.6566]

Epoch 70, loss = 5.0704
Mean test/val loss: 19.4989
[25, 50, 75] percentiles test/val loss: [ 5.7914  9.4888 18.7523]


Total parameters: 51479472
Total training + validation time: 10.0 hours, 5.0 mins, and 16.80000000000291 secs
Final val loss: 19.49886343026161

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample981: 5.481537312269211
dataset_09_28_23 sample324: 87.90898561477661
dataset_09_28_23 sample3464: 11.985798120498657
dataset_09_28_23 sample2834: 26.57765769958496
dataset_09_28_23 sample1936: 6.506582736968994
Loss1: 3.621, Loss2: 24.071
MSE_log+MSE_k_diag: 27.692 +- 31.036

Downsampling (200k) Results:
dataset_09_28_23 sample1936-downsampling: 59.44078063964844
dataset_09_28_23 sample2834-downsampling: 206.21636962890625
dataset_09_28_23 sample324-downsampling: 163.9414520263672
dataset_09_28_23 sample3464-downsampling: 70.33475494384766
dataset_09_28_23 sample981-downsampling: 8.432550430297852
Loss: 101.673 +- 72.479

Removing /scratch/midway3/erschultz/ContactGNNEnergy6downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1936-regular: 50.065452575683594
dataset_09_28_23 sample2834-regular: 208.4376220703125
dataset_09_28_23 sample324-regular: 202.9725341796875
dataset_09_28_23 sample3464-regular: 70.90725708007812
dataset_09_28_23 sample981-regular: 10.650079727172852
Loss: 108.607 +- 81.627

Removing /scratch/midway3/erschultz/ContactGNNEnergy6regsample

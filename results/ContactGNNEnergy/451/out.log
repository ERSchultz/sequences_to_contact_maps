#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_08_25_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy0', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=451, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/451', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/451/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/451/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/451/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f25652a0310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 16.206 minutes
Number of samples: 5000
Average num edges per graph:  64713.4272
Mean degree: [252.9  254.92 254.73 ... 254.88 254.63 254.43] +- [3.31 0.33 0.66 ... 0.35 0.82 1.18]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f252012ca60>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.1320
Mean test/val loss: 1.1307
[25, 50, 75] percentiles test/val loss: [0.3015 0.6909 1.7449]

Epoch 4, loss = 1.0342
Mean test/val loss: 1.0055
[25, 50, 75] percentiles test/val loss: [0.2467 0.6283 1.5436]

Epoch 6, loss = 0.9527
Mean test/val loss: 0.9417
[25, 50, 75] percentiles test/val loss: [0.2317 0.6171 1.47  ]

Epoch 8, loss = 1.0131
Mean test/val loss: 0.9825
[25, 50, 75] percentiles test/val loss: [0.2754 0.6305 1.5255]

Epoch 10, loss = 10.0119
Mean test/val loss: 1.1615
[25, 50, 75] percentiles test/val loss: [0.2847 0.7633 1.7787]

Epoch 12, loss = 0.9749
Mean test/val loss: 0.9307
[25, 50, 75] percentiles test/val loss: [0.2232 0.5808 1.4532]

Epoch 14, loss = 0.9063
Mean test/val loss: 1.3377
[25, 50, 75] percentiles test/val loss: [0.4123 0.9948 2.0702]

Epoch 16, loss = 0.9288
Mean test/val loss: 0.8572
[25, 50, 75] percentiles test/val loss: [0.2047 0.528  1.3092]

Epoch 18, loss = 0.8160
Mean test/val loss: 0.8367
[25, 50, 75] percentiles test/val loss: [0.2318 0.5272 1.3111]

Epoch 20, loss = 0.7791
Mean test/val loss: 0.7876
[25, 50, 75] percentiles test/val loss: [0.1885 0.4769 1.2574]

Epoch 22, loss = 0.7585
Mean test/val loss: 0.8247
[25, 50, 75] percentiles test/val loss: [0.1955 0.4929 1.2621]

Epoch 24, loss = 0.7842
Mean test/val loss: 0.8435
[25, 50, 75] percentiles test/val loss: [0.2586 0.5175 1.271 ]

Epoch 26, loss = 0.7389
Mean test/val loss: 0.7490
[25, 50, 75] percentiles test/val loss: [0.1764 0.4521 1.1586]

Epoch 28, loss = 0.7239
Mean test/val loss: 0.7513
[25, 50, 75] percentiles test/val loss: [0.1966 0.4563 1.1518]

Epoch 30, loss = 0.7057
Mean test/val loss: 0.7071
[25, 50, 75] percentiles test/val loss: [0.166  0.4315 1.1177]

Epoch 32, loss = 0.7111
Mean test/val loss: 0.7350
[25, 50, 75] percentiles test/val loss: [0.2003 0.4564 1.1409]

Epoch 34, loss = 0.6913
Mean test/val loss: 0.7546
[25, 50, 75] percentiles test/val loss: [0.1834 0.4597 1.1726]

Epoch 36, loss = 0.6796
Mean test/val loss: 0.7105
[25, 50, 75] percentiles test/val loss: [0.1672 0.4204 1.1079]

Epoch 38, loss = 0.6724
Mean test/val loss: 0.6739
[25, 50, 75] percentiles test/val loss: [0.1597 0.4132 1.051 ]

Epoch 40, loss = 0.6623
Mean test/val loss: 0.6749
[25, 50, 75] percentiles test/val loss: [0.1639 0.4094 1.0404]

New lr: 1e-05
Epoch 42, loss = 0.6178
Mean test/val loss: 0.6481
[25, 50, 75] percentiles test/val loss: [0.1516 0.3912 1.0136]

Epoch 44, loss = 0.6124
Mean test/val loss: 0.6446
[25, 50, 75] percentiles test/val loss: [0.1508 0.3876 1.0035]

Epoch 46, loss = 0.6088
Mean test/val loss: 0.6435
[25, 50, 75] percentiles test/val loss: [0.1497 0.3917 0.9979]

Epoch 48, loss = 0.6055
Mean test/val loss: 0.6403
[25, 50, 75] percentiles test/val loss: [0.1495 0.3852 0.9977]

Epoch 50, loss = 0.6028
Mean test/val loss: 0.6380
[25, 50, 75] percentiles test/val loss: [0.1514 0.385  0.9951]

Epoch 52, loss = 0.6003
Mean test/val loss: 0.6357
[25, 50, 75] percentiles test/val loss: [0.1471 0.3834 0.9876]

Epoch 54, loss = 0.5980
Mean test/val loss: 0.6341
[25, 50, 75] percentiles test/val loss: [0.1458 0.383  0.9884]

Epoch 56, loss = 0.5958
Mean test/val loss: 0.6329
[25, 50, 75] percentiles test/val loss: [0.1491 0.3817 0.9875]

Epoch 58, loss = 0.5939
Mean test/val loss: 0.6311
[25, 50, 75] percentiles test/val loss: [0.1454 0.3842 0.9829]

Epoch 60, loss = 0.5921
Mean test/val loss: 0.6297
[25, 50, 75] percentiles test/val loss: [0.1471 0.3793 0.9853]

Epoch 62, loss = 0.5903
Mean test/val loss: 0.6290
[25, 50, 75] percentiles test/val loss: [0.1466 0.3824 0.9883]

Epoch 64, loss = 0.5888
Mean test/val loss: 0.6273
[25, 50, 75] percentiles test/val loss: [0.144  0.3824 0.977 ]

Epoch 66, loss = 0.5871
Mean test/val loss: 0.6278
[25, 50, 75] percentiles test/val loss: [0.1449 0.3798 0.9846]

Epoch 68, loss = 0.5857
Mean test/val loss: 0.6261
[25, 50, 75] percentiles test/val loss: [0.1467 0.379  0.9745]

Epoch 70, loss = 0.5844
Mean test/val loss: 0.6241
[25, 50, 75] percentiles test/val loss: [0.1447 0.3755 0.9731]

Epoch 72, loss = 0.5827
Mean test/val loss: 0.6233
[25, 50, 75] percentiles test/val loss: [0.1423 0.3826 0.9718]

Epoch 74, loss = 0.5816
Mean test/val loss: 0.6219
[25, 50, 75] percentiles test/val loss: [0.1443 0.3775 0.9753]

Epoch 76, loss = 0.5803
Mean test/val loss: 0.6211
[25, 50, 75] percentiles test/val loss: [0.1441 0.3769 0.9734]

Epoch 78, loss = 0.5792
Mean test/val loss: 0.6211
[25, 50, 75] percentiles test/val loss: [0.143  0.3773 0.9763]

Epoch 80, loss = 0.5780
Mean test/val loss: 0.6215
[25, 50, 75] percentiles test/val loss: [0.1421 0.3814 0.9753]


Total parameters: 26462000
Total training + validation time: 7.0 hours, 42.0 mins, and 27.599999999998545 secs
Final val loss: 0.6215204662233591

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_08_25_23 sample981: 1.6029143333435059
dataset_08_25_23 sample324: 0.1841815710067749
dataset_08_25_23 sample3464: 0.1637256145477295
dataset_08_25_23 sample2834: 0.08462592959403992
dataset_08_25_23 sample1936: 0.24560722708702087
Loss: 0.456 +- 0.576

Downsampling (40%) Results:
dataset_08_25_23 sample1936-downsampling: 462.19354248046875
dataset_08_25_23 sample2834-downsampling: 1063.320068359375
dataset_08_25_23 sample324-downsampling: 512.9863891601562
dataset_08_25_23 sample3464-downsampling: 1151.189453125
dataset_08_25_23 sample981-downsampling: 8671.5859375
Loss: 2372.255 +- 3161.996

Removing /scratch/midway3/erschultz/ContactGNNEnergy0downsample
Original sampling (100%) Results:
dataset_08_25_23 sample1936-regular: 446.48016357421875
dataset_08_25_23 sample2834-regular: 874.5233764648438
dataset_08_25_23 sample324-regular: 527.4937744140625
dataset_08_25_23 sample3464-regular: 867.769775390625
dataset_08_25_23 sample981-regular: 7687.37890625
Loss: 2080.729 +- 2808.702

Removing /scratch/midway3/erschultz/ContactGNNEnergy0regsample

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_11_27_23_imr90'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy10', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=622, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/622', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/622/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/622/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/622/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7f8f279675e0>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 15.927 minutes
Number of samples: 5000
Average num edges per graph:  65006.5948
Mean degree: [255.   254.95 251.42 ... 254.99 245.73 254.93] +- [ 0.    0.31  6.21 ...  0.09 12.77  0.32]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f8f0027ec40>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.0556
Mean test/val loss: 1.0240
[25, 50, 75] percentiles test/val loss: [0.7022 0.9729 1.2738]

Epoch 4, loss = 0.9327
Mean test/val loss: 0.9096
[25, 50, 75] percentiles test/val loss: [0.6035 0.8678 1.1436]

Epoch 6, loss = 0.8600
Mean test/val loss: 0.8508
[25, 50, 75] percentiles test/val loss: [0.548  0.8135 1.0748]

Epoch 8, loss = 0.8075
Mean test/val loss: 0.8202
[25, 50, 75] percentiles test/val loss: [0.5274 0.7754 1.0408]

Epoch 10, loss = 0.7693
Mean test/val loss: 0.7629
[25, 50, 75] percentiles test/val loss: [0.4995 0.7207 0.9566]

Epoch 12, loss = 0.7384
Mean test/val loss: 0.7313
[25, 50, 75] percentiles test/val loss: [0.4816 0.6884 0.9164]

Epoch 14, loss = 0.7211
Mean test/val loss: 0.7330
[25, 50, 75] percentiles test/val loss: [0.4715 0.6886 0.9292]

Epoch 16, loss = 0.6933
Mean test/val loss: 0.7052
[25, 50, 75] percentiles test/val loss: [0.4608 0.6708 0.8918]

Epoch 18, loss = 0.6733
Mean test/val loss: 0.6822
[25, 50, 75] percentiles test/val loss: [0.4485 0.6455 0.8505]

Epoch 20, loss = 0.6592
Mean test/val loss: 0.6881
[25, 50, 75] percentiles test/val loss: [0.4396 0.6549 0.8716]

Epoch 22, loss = 0.6449
Mean test/val loss: 0.6656
[25, 50, 75] percentiles test/val loss: [0.4245 0.6346 0.8498]

Epoch 24, loss = 0.6319
Mean test/val loss: 0.6612
[25, 50, 75] percentiles test/val loss: [0.4209 0.6264 0.8417]

Epoch 26, loss = 0.6193
Mean test/val loss: 0.6509
[25, 50, 75] percentiles test/val loss: [0.4104 0.6159 0.8211]

Epoch 28, loss = 0.6101
Mean test/val loss: 0.6384
[25, 50, 75] percentiles test/val loss: [0.4102 0.5993 0.8168]

Epoch 30, loss = 0.5995
Mean test/val loss: 0.6323
[25, 50, 75] percentiles test/val loss: [0.4047 0.596  0.8023]

Epoch 32, loss = 0.5910
Mean test/val loss: 0.6357
[25, 50, 75] percentiles test/val loss: [0.4054 0.6056 0.8228]

Epoch 34, loss = 0.5814
Mean test/val loss: 0.6223
[25, 50, 75] percentiles test/val loss: [0.3945 0.5877 0.7882]

Epoch 36, loss = 0.5748
Mean test/val loss: 0.6207
[25, 50, 75] percentiles test/val loss: [0.3893 0.5849 0.7828]

Epoch 38, loss = 0.5679
Mean test/val loss: 0.6090
[25, 50, 75] percentiles test/val loss: [0.3867 0.5751 0.7758]

Epoch 40, loss = 0.5589
Mean test/val loss: 0.6203
[25, 50, 75] percentiles test/val loss: [0.382  0.5855 0.7918]

New lr: 1e-05
Epoch 42, loss = 0.5047
Mean test/val loss: 0.5690
[25, 50, 75] percentiles test/val loss: [0.358  0.5336 0.731 ]

Epoch 44, loss = 0.4960
Mean test/val loss: 0.5668
[25, 50, 75] percentiles test/val loss: [0.356  0.5314 0.7263]

Epoch 46, loss = 0.4901
Mean test/val loss: 0.5653
[25, 50, 75] percentiles test/val loss: [0.3533 0.5313 0.7237]

Epoch 48, loss = 0.4852
Mean test/val loss: 0.5642
[25, 50, 75] percentiles test/val loss: [0.3522 0.5316 0.7196]

Epoch 50, loss = 0.4808
Mean test/val loss: 0.5631
[25, 50, 75] percentiles test/val loss: [0.352  0.5263 0.7209]

Epoch 52, loss = 0.4768
Mean test/val loss: 0.5618
[25, 50, 75] percentiles test/val loss: [0.351  0.5261 0.7192]

Epoch 54, loss = 0.4729
Mean test/val loss: 0.5613
[25, 50, 75] percentiles test/val loss: [0.351  0.5226 0.7205]

Epoch 56, loss = 0.4693
Mean test/val loss: 0.5609
[25, 50, 75] percentiles test/val loss: [0.3451 0.5232 0.7185]

Epoch 58, loss = 0.4661
Mean test/val loss: 0.5606
[25, 50, 75] percentiles test/val loss: [0.3489 0.5232 0.7231]

Epoch 60, loss = 0.4627
Mean test/val loss: 0.5595
[25, 50, 75] percentiles test/val loss: [0.3462 0.5243 0.7185]


Total parameters: 51479472
Total training + validation time: 8.0 hours, 51.0 mins, and 17.299999999999272 secs
Final val loss: 0.5594820676669479

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_11_27_23_imr90 sample981: 0.3079849183559418
dataset_11_27_23_imr90 sample324: 0.0796634778380394
dataset_11_27_23_imr90 sample3464: 0.6438152194023132
dataset_11_27_23_imr90 sample2834: 0.5344483256340027
dataset_11_27_23_imr90 sample1936: 1.5201375484466553
MSE_log: 0.617 +- 0.491

Downsampling (200k) Results:
Original sampling (400k) Results:

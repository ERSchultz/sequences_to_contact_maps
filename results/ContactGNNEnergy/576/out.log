#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_10_14_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy16', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=576, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/576', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/576/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/576/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/576/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fda9fbaa310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 30.477 minutes
Number of samples: 10000
Average num edges per graph:  65198.2786
Mean degree: [255.   254.73 254.98 ... 255.   255.   255.  ] +- [0.   0.96 0.15 ... 0.   0.   0.  ]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [1736, 8603, 4487, 7484, 1944, 6883, 5242, 5402, 2741, 5051, 6509, 7138, 316, 8888, 2400, 8268, 478, 5626, 4834, 8222, 2775, 7297, 9366, 3542, 9486, 5574, 1020, 9892, 5740, 1800, 7753, 2160, 9690, 201, 7926, 1469, 3437, 9939, 6550, 5567, 2452, 3201, 4402, 3181, 5685, 1790, 5045, 8122, 7296, 768, 5261, 2576, 6643, 4781, 1945, 5516, 8922, 8796, 6633, 7263, 9807, 7993, 4712, 1640, 1644, 2131, 8519, 2955, 203, 6356, 8148, 8107, 6575, 4769, 8354, 995, 8881, 972, 7933, 3869, 9749, 6260, 6269, 6134, 2997, 674, 5447, 8738, 7028, 53, 3314, 8398, 8061, 7264, 7488, 1001, 2594, 4870, 8312, 4053, 6041, 1680]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fda56c09880>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.7981
Mean test/val loss: 1.6555
[25, 50, 75] percentiles test/val loss: [1.1315 1.5847 2.0289]

Epoch 4, loss = 1.4261
Mean test/val loss: 1.3936
[25, 50, 75] percentiles test/val loss: [0.8885 1.2902 1.7283]

Epoch 6, loss = 1.2400
Mean test/val loss: 1.3059
[25, 50, 75] percentiles test/val loss: [0.8816 1.1889 1.5663]

Epoch 8, loss = 1.1636
Mean test/val loss: 1.1470
[25, 50, 75] percentiles test/val loss: [0.7322 1.0377 1.3918]

Epoch 10, loss = 1.1175
Mean test/val loss: 1.1142
[25, 50, 75] percentiles test/val loss: [0.7122 1.0134 1.3514]

Epoch 12, loss = 1.0874
Mean test/val loss: 1.0714
[25, 50, 75] percentiles test/val loss: [0.6805 0.9636 1.3091]

Epoch 14, loss = 1.0650
Mean test/val loss: 1.0589
[25, 50, 75] percentiles test/val loss: [0.6699 0.95   1.2965]

Epoch 16, loss = 1.0413
Mean test/val loss: 1.0409
[25, 50, 75] percentiles test/val loss: [0.6662 0.9351 1.2537]

Epoch 18, loss = 1.0188
Mean test/val loss: 1.0224
[25, 50, 75] percentiles test/val loss: [0.6438 0.917  1.2533]

Epoch 20, loss = 1.0015
Mean test/val loss: 1.0215
[25, 50, 75] percentiles test/val loss: [0.644  0.9126 1.261 ]

Epoch 22, loss = 0.9865
Mean test/val loss: 0.9954
[25, 50, 75] percentiles test/val loss: [0.6282 0.8994 1.2196]

Epoch 24, loss = 0.9728
Mean test/val loss: 1.0017
[25, 50, 75] percentiles test/val loss: [0.6335 0.8961 1.2242]

Epoch 26, loss = 0.9560
Mean test/val loss: 0.9671
[25, 50, 75] percentiles test/val loss: [0.6145 0.8693 1.1749]

Epoch 28, loss = 0.9416
Mean test/val loss: 0.9857
[25, 50, 75] percentiles test/val loss: [0.616  0.881  1.2076]

Epoch 30, loss = 0.9270
Mean test/val loss: 0.9615
[25, 50, 75] percentiles test/val loss: [0.6185 0.8554 1.1652]

Epoch 32, loss = 0.9154
Mean test/val loss: 0.9829
[25, 50, 75] percentiles test/val loss: [0.6199 0.8725 1.2039]

Epoch 34, loss = 0.9048
Mean test/val loss: 0.9321
[25, 50, 75] percentiles test/val loss: [0.585  0.8286 1.1395]

Epoch 36, loss = 0.8907
Mean test/val loss: 0.9392
[25, 50, 75] percentiles test/val loss: [0.5881 0.839  1.1578]

Epoch 38, loss = 0.8829
Mean test/val loss: 0.9329
[25, 50, 75] percentiles test/val loss: [0.5892 0.8332 1.141 ]

Epoch 40, loss = 0.8717
Mean test/val loss: 0.9105
[25, 50, 75] percentiles test/val loss: [0.5729 0.8057 1.1133]

New lr: 1e-05
Epoch 42, loss = 0.7906
Mean test/val loss: 0.8592
[25, 50, 75] percentiles test/val loss: [0.5379 0.7652 1.0544]

Epoch 44, loss = 0.7780
Mean test/val loss: 0.8545
[25, 50, 75] percentiles test/val loss: [0.5392 0.7598 1.0522]

Epoch 46, loss = 0.7691
Mean test/val loss: 0.8545
[25, 50, 75] percentiles test/val loss: [0.5373 0.7533 1.0477]

Epoch 48, loss = 0.7613
Mean test/val loss: 0.8514
[25, 50, 75] percentiles test/val loss: [0.5317 0.752  1.0406]

Epoch 50, loss = 0.7543
Mean test/val loss: 0.8486
[25, 50, 75] percentiles test/val loss: [0.5296 0.7493 1.0429]

Epoch 52, loss = 0.7478
Mean test/val loss: 0.8492
[25, 50, 75] percentiles test/val loss: [0.5288 0.7488 1.04  ]

Epoch 54, loss = 0.7418
Mean test/val loss: 0.8494
[25, 50, 75] percentiles test/val loss: [0.5274 0.7476 1.035 ]

Epoch 56, loss = 0.7360
Mean test/val loss: 0.8486
[25, 50, 75] percentiles test/val loss: [0.5243 0.7457 1.0354]

Epoch 58, loss = 0.7303
Mean test/val loss: 0.8476
[25, 50, 75] percentiles test/val loss: [0.5253 0.7455 1.0367]

Epoch 60, loss = 0.7251
Mean test/val loss: 0.8458
[25, 50, 75] percentiles test/val loss: [0.5252 0.7454 1.0371]

Epoch 62, loss = 0.7202
Mean test/val loss: 0.8464
[25, 50, 75] percentiles test/val loss: [0.527  0.7416 1.0359]

Epoch 64, loss = 0.7151
Mean test/val loss: 0.8443
[25, 50, 75] percentiles test/val loss: [0.5243 0.7405 1.029 ]

Epoch 66, loss = 0.7108
Mean test/val loss: 0.8462
[25, 50, 75] percentiles test/val loss: [0.5231 0.7362 1.034 ]

Epoch 68, loss = 0.7061
Mean test/val loss: 0.8442
[25, 50, 75] percentiles test/val loss: [0.5283 0.7381 1.0331]

Epoch 70, loss = 0.7018
Mean test/val loss: 0.8433
[25, 50, 75] percentiles test/val loss: [0.5208 0.7384 1.0258]

Epoch 72, loss = 0.6972
Mean test/val loss: 0.8427
[25, 50, 75] percentiles test/val loss: [0.5218 0.7422 1.0239]

Epoch 74, loss = 0.6937
Mean test/val loss: 0.8458
[25, 50, 75] percentiles test/val loss: [0.523  0.7399 1.0308]

Epoch 76, loss = 0.6894
Mean test/val loss: 0.8468
[25, 50, 75] percentiles test/val loss: [0.5255 0.7418 1.0267]

Epoch 78, loss = 0.6865
Mean test/val loss: 0.8436
[25, 50, 75] percentiles test/val loss: [0.5242 0.7412 1.0245]

Epoch 80, loss = 0.6821
Mean test/val loss: 0.8449
[25, 50, 75] percentiles test/val loss: [0.5232 0.7348 1.0281]


Total parameters: 51479472
Total training + validation time: 22.0 hours, 51.0 mins, and 31.10000000000582 secs
Final val loss: 0.844931216314435

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_10_14_23 sample1050: 0.22453272342681885
dataset_10_14_23 sample7802: 0.7171355485916138
dataset_10_14_23 sample156: 0.37996670603752136
dataset_10_14_23 sample2452: 0.6074385643005371
dataset_10_14_23 sample752: 0.6083027720451355
MSE Loss: 0.507 +- 0.179

Downsampling (200k) Results:

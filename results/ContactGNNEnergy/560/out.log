#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=33280, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy3', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=560, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=True, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/560', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/560/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/560/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/560/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7fe3b0e064c0>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 12.194 minutes
Number of samples: 5000
Average num edges per graph:  64202.6016
Mean degree: [249.86 254.38 247.02 ... 253.91 251.64 251.34] +- [6.31 0.99 8.25 ... 2.04 5.21 3.97]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [3254, 4639, 4056, 4711, 4996, 219, 833, 1354, 2869, 2668, 745, 2996, 367, 2376, 4552, 147, 4977, 1569, 4781, 1925, 2567, 1936, 197, 3818, 4723, 4092, 1806, 161, 1544, 280, 4920, 3343, 4570, 2906, 962, 3296, 3661, 3, 4680, 3414, 2798, 4580, 4783, 2956, 2363, 1512, 308, 4932, 238, 2072, 1006, 546, 952, 2787, 338, 4515, 3267, 2661, 3132, 4589, 4217, 2156, 4269, 3025, 953, 78, 287, 4669, 2517, 3931, 1898, 1582, 1735, 2439, 4427, 4444, 3736, 1766, 1498, 920, 622, 2143, 810, 1798, 887, 4595, 2286, 3987, 2434, 2324, 3228, 1549, 3226, 3698, 3564, 2461, 2610, 1626, 1002, 2700, 2695, 3671]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fe376a21a30>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.8374
Mean test/val loss: 1.8963
[25, 50, 75] percentiles test/val loss: [1.1739 1.7196 2.5106]

Epoch 4, loss = 1.9838
Mean test/val loss: 1.7572
[25, 50, 75] percentiles test/val loss: [1.1506 1.6772 2.2898]

Epoch 6, loss = 3.1098
Mean test/val loss: 1.8165
[25, 50, 75] percentiles test/val loss: [1.1712 1.6967 2.374 ]

Epoch 8, loss = 1.7487
Mean test/val loss: 1.7331
[25, 50, 75] percentiles test/val loss: [1.1192 1.6308 2.2384]

Epoch 10, loss = 1.8029
Mean test/val loss: 1.9213
[25, 50, 75] percentiles test/val loss: [1.2315 1.7708 2.4881]

Epoch 12, loss = 1.7310
Mean test/val loss: 1.7003
[25, 50, 75] percentiles test/val loss: [1.0995 1.5831 2.2384]

Epoch 14, loss = 1.7271
Mean test/val loss: 1.7267
[25, 50, 75] percentiles test/val loss: [1.1288 1.6264 2.2916]

Epoch 16, loss = 1.8553
Mean test/val loss: 1.7407
[25, 50, 75] percentiles test/val loss: [1.1465 1.6213 2.2624]

Epoch 18, loss = 2.2645
Mean test/val loss: 1.9963
[25, 50, 75] percentiles test/val loss: [1.2054 1.8332 2.6881]

Epoch 20, loss = 2.3699
Mean test/val loss: 1.9122
[25, 50, 75] percentiles test/val loss: [1.2036 1.7427 2.5147]

Epoch 22, loss = 2.4685
Mean test/val loss: 1.8177
[25, 50, 75] percentiles test/val loss: [1.1664 1.7021 2.3478]

Epoch 24, loss = 4.1742
Mean test/val loss: 1.8485
[25, 50, 75] percentiles test/val loss: [1.2197 1.7126 2.389 ]

Epoch 26, loss = 2.8774
Mean test/val loss: 1.8682
[25, 50, 75] percentiles test/val loss: [1.2309 1.7372 2.4425]

Epoch 28, loss = 1.7707
Mean test/val loss: 1.7343
[25, 50, 75] percentiles test/val loss: [1.1176 1.6006 2.265 ]

Epoch 30, loss = 2.6329
Mean test/val loss: 1.8962
[25, 50, 75] percentiles test/val loss: [1.2321 1.7617 2.4757]

Epoch 32, loss = 5.8309
Mean test/val loss: 1.8001
[25, 50, 75] percentiles test/val loss: [1.1449 1.6794 2.329 ]

Epoch 34, loss = 2.2567
Mean test/val loss: 1.8470
[25, 50, 75] percentiles test/val loss: [1.1729 1.7142 2.4206]

Epoch 36, loss = 1.9749
Mean test/val loss: 1.7643
[25, 50, 75] percentiles test/val loss: [1.1331 1.6408 2.2824]

Epoch 38, loss = 2.8532
Mean test/val loss: 1.9970
[25, 50, 75] percentiles test/val loss: [1.2483 1.834  2.6144]

Epoch 40, loss = 2.3599
Mean test/val loss: 25.8842
[25, 50, 75] percentiles test/val loss: [12.0331 15.5709 35.8416]

New lr: 1e-05
Epoch 42, loss = 1.7656
Mean test/val loss: 1.7494
[25, 50, 75] percentiles test/val loss: [1.1251 1.6391 2.2831]

Epoch 44, loss = 1.7283
Mean test/val loss: 1.7819
[25, 50, 75] percentiles test/val loss: [1.1659 1.6708 2.3035]

Epoch 46, loss = 1.7541
Mean test/val loss: 1.7392
[25, 50, 75] percentiles test/val loss: [1.1326 1.615  2.283 ]

Epoch 48, loss = 1.6930
Mean test/val loss: 1.7344
[25, 50, 75] percentiles test/val loss: [1.1344 1.6294 2.2303]

Epoch 50, loss = 1.6961
Mean test/val loss: 1.7057
[25, 50, 75] percentiles test/val loss: [1.0842 1.5888 2.2249]

Epoch 52, loss = 1.6599
Mean test/val loss: 1.6451
[25, 50, 75] percentiles test/val loss: [1.0501 1.5282 2.1603]

Epoch 54, loss = 1.5433
Mean test/val loss: 1.5205
[25, 50, 75] percentiles test/val loss: [1.0132 1.4381 1.937 ]

Epoch 56, loss = 1.5938
Mean test/val loss: 1.5431
[25, 50, 75] percentiles test/val loss: [1.0316 1.4719 1.9536]

Epoch 58, loss = 1.4683
Mean test/val loss: 1.4642
[25, 50, 75] percentiles test/val loss: [0.9934 1.4167 1.8561]

Epoch 60, loss = 1.9787
Mean test/val loss: 1.8195
[25, 50, 75] percentiles test/val loss: [1.1733 1.6963 2.3917]

Epoch 62, loss = 1.5979
Mean test/val loss: 1.6694
[25, 50, 75] percentiles test/val loss: [1.0809 1.5973 2.1879]

Epoch 64, loss = 1.5156
Mean test/val loss: 1.4879
[25, 50, 75] percentiles test/val loss: [1.0133 1.4506 1.9008]

Epoch 66, loss = 1.4188
Mean test/val loss: 1.4384
[25, 50, 75] percentiles test/val loss: [0.9904 1.3938 1.8172]

Epoch 68, loss = 1.4546
Mean test/val loss: 1.4238
[25, 50, 75] percentiles test/val loss: [0.9988 1.3864 1.7751]

Epoch 70, loss = 1.3810
Mean test/val loss: 1.3721
[25, 50, 75] percentiles test/val loss: [0.9368 1.3121 1.7138]


Total parameters: 51991472
Total training + validation time: 17.0 hours, 13.0 mins, and 59.5 secs
Final val loss: 1.3720901653245092

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample981: 0.47402626276016235
dataset_09_28_23 sample324: 1.3279610872268677
dataset_09_28_23 sample3464: 1.7031831741333008
dataset_09_28_23 sample2834: 3.175811767578125
dataset_09_28_23 sample1936: 1.405050277709961
MSE_log: 1.617 +- 0.88

Downsampling (200k) Results:
dataset_09_28_23 sample1936-downsampling: 20.051555633544922
dataset_09_28_23 sample2834-downsampling: 67.09062194824219
dataset_09_28_23 sample324-downsampling: 125.84464263916016
dataset_09_28_23 sample3464-downsampling: 46.23504638671875
dataset_09_28_23 sample981-downsampling: 10.340814590454102
Loss: 53.913 +- 41.114

Removing /scratch/midway3/erschultz/ContactGNNEnergy3downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1936-regular: 20.62445831298828
dataset_09_28_23 sample2834-regular: 67.57225799560547
dataset_09_28_23 sample324-regular: 124.88050842285156
dataset_09_28_23 sample3464-regular: 47.35962677001953
dataset_09_28_23 sample981-regular: 9.157346725463867
Loss: 53.919 +- 40.932

Removing /scratch/midway3/erschultz/ContactGNNEnergy3regsample

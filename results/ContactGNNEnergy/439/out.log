#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'GeneticDistance_norm', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy9', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=1, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=439, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/439', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/439/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/439/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/439/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f4a63d2d3a0>, channels=1, node_feature_size=0, input_m=512, edge_transforms=['ContactDistance(norm=False)', 'GeneticDistance(norm=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=4, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  GeneticDistance(norm=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 23.225 minutes
Number of samples: 5000
Average num edges per graph:  221897.8496
Mean degree: [427.75 497.38 374.65 ... 471.86 367.9  508.75] +- [40.03  8.98 67.12 ... 29.74 69.03  2.11]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f4a240dfe50>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.5821
Mean test/val loss: 0.5752
[25, 50, 75] percentiles test/val loss: [0.3103 0.4862 0.6988]

Epoch 4, loss = 0.4681
Mean test/val loss: 0.4491
[25, 50, 75] percentiles test/val loss: [0.2278 0.3617 0.5405]

Epoch 6, loss = 0.4255
Mean test/val loss: 0.4026
[25, 50, 75] percentiles test/val loss: [0.2007 0.3156 0.4827]

Epoch 8, loss = 0.3946
Mean test/val loss: 0.3975
[25, 50, 75] percentiles test/val loss: [0.1913 0.3011 0.4778]

Epoch 10, loss = 0.3674
Mean test/val loss: 0.3623
[25, 50, 75] percentiles test/val loss: [0.1774 0.2742 0.4309]

Epoch 12, loss = 0.3491
Mean test/val loss: 0.3368
[25, 50, 75] percentiles test/val loss: [0.1584 0.2549 0.4058]

Epoch 14, loss = 0.3271
Mean test/val loss: 0.3392
[25, 50, 75] percentiles test/val loss: [0.1609 0.2585 0.4026]

Epoch 16, loss = 0.3148
Mean test/val loss: 0.3271
[25, 50, 75] percentiles test/val loss: [0.1684 0.2527 0.3924]

Epoch 18, loss = 0.3047
Mean test/val loss: 0.3049
[25, 50, 75] percentiles test/val loss: [0.1474 0.234  0.3711]

Epoch 20, loss = 0.2951
Mean test/val loss: 0.3059
[25, 50, 75] percentiles test/val loss: [0.1477 0.2267 0.3576]

Epoch 22, loss = 0.2865
Mean test/val loss: 0.3093
[25, 50, 75] percentiles test/val loss: [0.1491 0.2415 0.3712]

Epoch 24, loss = 0.2744
Mean test/val loss: 0.2858
[25, 50, 75] percentiles test/val loss: [0.1345 0.21   0.3311]

Epoch 26, loss = 0.2658
Mean test/val loss: 0.2906
[25, 50, 75] percentiles test/val loss: [0.1479 0.2199 0.3398]

Epoch 28, loss = 0.2568
Mean test/val loss: 0.2737
[25, 50, 75] percentiles test/val loss: [0.1275 0.1986 0.3267]

Epoch 30, loss = 0.2481
Mean test/val loss: 0.2830
[25, 50, 75] percentiles test/val loss: [0.1478 0.214  0.3247]

Epoch 32, loss = 0.2405
Mean test/val loss: 0.3012
[25, 50, 75] percentiles test/val loss: [0.1436 0.2166 0.3497]

Epoch 34, loss = 0.2343
Mean test/val loss: 0.2615
[25, 50, 75] percentiles test/val loss: [0.1256 0.1926 0.3181]

Epoch 36, loss = 0.2294
Mean test/val loss: 0.2483
[25, 50, 75] percentiles test/val loss: [0.1151 0.1818 0.3001]

Epoch 38, loss = 0.2244
Mean test/val loss: 0.2474
[25, 50, 75] percentiles test/val loss: [0.1144 0.1788 0.2972]

Epoch 40, loss = 0.2208
Mean test/val loss: 0.2503
[25, 50, 75] percentiles test/val loss: [0.1134 0.1836 0.2972]

New lr: 1e-05
Epoch 42, loss = 0.1910
Mean test/val loss: 0.2287
[25, 50, 75] percentiles test/val loss: [0.1032 0.164  0.2702]

Epoch 44, loss = 0.1869
Mean test/val loss: 0.2268
[25, 50, 75] percentiles test/val loss: [0.102  0.1627 0.2721]

Epoch 46, loss = 0.1841
Mean test/val loss: 0.2263
[25, 50, 75] percentiles test/val loss: [0.1014 0.1619 0.2695]

Epoch 48, loss = 0.1817
Mean test/val loss: 0.2253
[25, 50, 75] percentiles test/val loss: [0.1007 0.1621 0.2683]

Epoch 50, loss = 0.1796
Mean test/val loss: 0.2240
[25, 50, 75] percentiles test/val loss: [0.1004 0.1608 0.2697]

Epoch 52, loss = 0.1778
Mean test/val loss: 0.2228
[25, 50, 75] percentiles test/val loss: [0.0998 0.161  0.2677]

Epoch 54, loss = 0.1761
Mean test/val loss: 0.2227
[25, 50, 75] percentiles test/val loss: [0.0998 0.1592 0.2648]

Epoch 56, loss = 0.1746
Mean test/val loss: 0.2211
[25, 50, 75] percentiles test/val loss: [0.0986 0.1584 0.2629]

Epoch 58, loss = 0.1732
Mean test/val loss: 0.2208
[25, 50, 75] percentiles test/val loss: [0.0988 0.1595 0.2605]

Epoch 60, loss = 0.1719
Mean test/val loss: 0.2204
[25, 50, 75] percentiles test/val loss: [0.0983 0.1587 0.2613]

Epoch 62, loss = 0.1706
Mean test/val loss: 0.2199
[25, 50, 75] percentiles test/val loss: [0.0976 0.1583 0.2594]

Epoch 64, loss = 0.1694
Mean test/val loss: 0.2190
[25, 50, 75] percentiles test/val loss: [0.0976 0.1552 0.2589]

Epoch 66, loss = 0.1683
Mean test/val loss: 0.2191
[25, 50, 75] percentiles test/val loss: [0.0976 0.1564 0.2612]

Epoch 68, loss = 0.1673
Mean test/val loss: 0.2188
[25, 50, 75] percentiles test/val loss: [0.0978 0.1563 0.2558]

Epoch 70, loss = 0.1663
Mean test/val loss: 0.2189
[25, 50, 75] percentiles test/val loss: [0.0967 0.1565 0.2557]

Epoch 72, loss = 0.1653
Mean test/val loss: 0.2181
[25, 50, 75] percentiles test/val loss: [0.0972 0.1542 0.2572]

Epoch 74, loss = 0.1644
Mean test/val loss: 0.2178
[25, 50, 75] percentiles test/val loss: [0.0964 0.1564 0.2585]

Epoch 76, loss = 0.1635
Mean test/val loss: 0.2174
[25, 50, 75] percentiles test/val loss: [0.0965 0.1547 0.2575]

Epoch 78, loss = 0.1627
Mean test/val loss: 0.2171
[25, 50, 75] percentiles test/val loss: [0.0962 0.1548 0.2568]

Epoch 80, loss = 0.1619
Mean test/val loss: 0.2164
[25, 50, 75] percentiles test/val loss: [0.0954 0.1559 0.256 ]


Total parameters: 42846256
Total training + validation time: 9.0 hours, 28.0 mins, and 0.19999999999708962 secs
Final val loss: 0.21638700173050165

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_04_28_23 sample981: 0.4884171187877655
dataset_04_28_23 sample324: 0.5597537159919739
dataset_04_28_23 sample3464: 0.2563111484050751
dataset_04_28_23 sample2834: 0.2837934195995331
dataset_04_28_23 sample1936: 0.1534852683544159
Loss: 0.348 +- 0.152

Downsampling (40%) Results:
dataset_04_28_23 sample1936-downsampling: 37.84492874145508
dataset_04_28_23 sample2834-downsampling: 6.063261032104492
dataset_04_28_23 sample324-downsampling: 10.584691047668457
dataset_04_28_23 sample3464-downsampling: 6.289621353149414
dataset_04_28_23 sample981-downsampling: 13.932238578796387
Loss: 14.943 +- 11.817

Removing /scratch/midway3/erschultz/ContactGNNEnergy9downsample
Original sampling (100%) Results:
dataset_04_28_23 sample1936-regular: 22.087141036987305
dataset_04_28_23 sample2834-regular: 6.015409469604492
dataset_04_28_23 sample324-regular: 10.565113067626953
dataset_04_28_23 sample3464-regular: 6.956606388092041
dataset_04_28_23 sample981-regular: 10.17901611328125
Loss: 11.161 +- 5.742

Removing /scratch/midway3/erschultz/ContactGNNEnergy9regsample

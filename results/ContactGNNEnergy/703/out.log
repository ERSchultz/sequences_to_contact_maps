#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 None 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(1, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'constant'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_02_30_24_imr90', '/project2/depablo/erschultz/dataset_03_12_24_imr90'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy4', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, lambda3=1, grad_clip=None, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', save_early_stop=False, model_type='ContactGNNEnergy', id=703, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', output_clip=None, use_sign_net=False, use_sign_plus=False, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, bonded_path=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/703', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/703/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/703/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/703/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, node_feature_size=1, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)'], node_transforms=['Constant(value=1.0)'], edge_dim=2, transforms_processed=None, diag=False, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  Constant(value=1.0)
]), eig=False, criterion=<function mse_log at 0x7f889e1da4c0>, cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 28.904 minutes
Number of samples: 10000
Average num edges per graph:  59473.9514
Mean degree: [190.48 248.96 204.09 ... 227.49 213.23 250.99] +- [43.53  7.8  33.59 ... 26.54 38.56  6.32]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [478, 3140, 4222, 4663, 4152, 2738, 4256, 3994, 4423, 3340, 1211, 763, 4260, 4289, 2397, 1403, 319, 1662, 1583, 4110, 3063, 3628, 4726, 2496, 3710, 4342, 2688, 3273, 177, 3285, 3611, 4754, 4112, 2797, 1688, 412, 1382, 886, 2687, 409, 2450, 1144, 346, 313, 4317, 4324, 4227, 2810, 3738, 3920, 3210, 3683, 1469, 1088, 2014, 142, 4139, 4305, 1085, 76, 4420, 4721, 4087, 911, 3563, 991, 746, 2675, 3493, 3694, 2390, 914, 1188, 4381, 2996, 4774, 3565, 1566, 3697, 470, 2419, 4713, 282, 4448, 4245, 2403, 640, 4490, 1791, 830, 1621, 3637, 21, 3152, 2193, 1624, 619, 1793, 3269, 1616, 3971, 1181]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f889d243220>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.0175
Mean test/val loss: 0.9594
[25, 50, 75] percentiles test/val loss: [0.4888 0.8096 1.2797]

Epoch 4, loss = 0.8946
Mean test/val loss: 1.0813
[25, 50, 75] percentiles test/val loss: [0.684  0.9499 1.4032]

Epoch 6, loss = 0.8435
Mean test/val loss: 0.8134
[25, 50, 75] percentiles test/val loss: [0.4017 0.6563 1.0751]

Epoch 8, loss = 0.7884
Mean test/val loss: 0.7481
[25, 50, 75] percentiles test/val loss: [0.3487 0.5923 0.9985]

Epoch 10, loss = 0.7542
Mean test/val loss: 0.7671
[25, 50, 75] percentiles test/val loss: [0.3845 0.6265 0.9979]

Epoch 12, loss = 0.7221
Mean test/val loss: 0.6892
[25, 50, 75] percentiles test/val loss: [0.3152 0.5572 0.9163]

Epoch 14, loss = 0.6961
Mean test/val loss: 0.6991
[25, 50, 75] percentiles test/val loss: [0.3512 0.5676 0.9384]

Epoch 16, loss = 0.6745
Mean test/val loss: 0.6822
[25, 50, 75] percentiles test/val loss: [0.3254 0.537  0.9156]

Epoch 18, loss = 0.6504
Mean test/val loss: 0.6456
[25, 50, 75] percentiles test/val loss: [0.2993 0.5201 0.868 ]

Epoch 20, loss = 0.6309
Mean test/val loss: 0.6186
[25, 50, 75] percentiles test/val loss: [0.291  0.5012 0.8369]

Epoch 22, loss = 0.6108
Mean test/val loss: 0.6052
[25, 50, 75] percentiles test/val loss: [0.2732 0.4865 0.8173]

Epoch 24, loss = 0.5922
Mean test/val loss: 0.6046
[25, 50, 75] percentiles test/val loss: [0.2753 0.4835 0.8317]

Epoch 26, loss = 0.5776
Mean test/val loss: 0.5941
[25, 50, 75] percentiles test/val loss: [0.2661 0.4722 0.8053]

Epoch 28, loss = 0.5617
Mean test/val loss: 0.6325
[25, 50, 75] percentiles test/val loss: [0.2805 0.4915 0.8333]

Epoch 30, loss = 0.5471
Mean test/val loss: 0.5716
[25, 50, 75] percentiles test/val loss: [0.2645 0.4538 0.7776]

Epoch 32, loss = 0.5335
Mean test/val loss: 0.5614
[25, 50, 75] percentiles test/val loss: [0.2588 0.4568 0.7597]

Epoch 34, loss = 0.5217
Mean test/val loss: 0.5505
[25, 50, 75] percentiles test/val loss: [0.2459 0.4289 0.7428]

Epoch 36, loss = 0.5094
Mean test/val loss: 0.5511
[25, 50, 75] percentiles test/val loss: [0.2501 0.4387 0.7377]

Epoch 38, loss = 0.4977
Mean test/val loss: 0.5527
[25, 50, 75] percentiles test/val loss: [0.2501 0.4315 0.7447]

Epoch 40, loss = 0.4863
Mean test/val loss: 0.5426
[25, 50, 75] percentiles test/val loss: [0.2462 0.4351 0.7473]

New lr: 1e-05
Epoch 42, loss = 0.4206
Mean test/val loss: 0.4923
[25, 50, 75] percentiles test/val loss: [0.2154 0.3897 0.668 ]

Epoch 44, loss = 0.4096
Mean test/val loss: 0.4893
[25, 50, 75] percentiles test/val loss: [0.2104 0.3855 0.6676]

Epoch 46, loss = 0.4016
Mean test/val loss: 0.4868
[25, 50, 75] percentiles test/val loss: [0.213  0.3855 0.6636]

Epoch 48, loss = 0.3948
Mean test/val loss: 0.4861
[25, 50, 75] percentiles test/val loss: [0.2099 0.3814 0.6581]

Epoch 50, loss = 0.3885
Mean test/val loss: 0.4853
[25, 50, 75] percentiles test/val loss: [0.2071 0.3817 0.6574]

Epoch 52, loss = 0.3829
Mean test/val loss: 0.4862
[25, 50, 75] percentiles test/val loss: [0.2092 0.3818 0.6561]

Epoch 54, loss = 0.3777
Mean test/val loss: 0.4850
[25, 50, 75] percentiles test/val loss: [0.208  0.3791 0.658 ]

Epoch 56, loss = 0.3729
Mean test/val loss: 0.4862
[25, 50, 75] percentiles test/val loss: [0.2082 0.3822 0.658 ]

Epoch 58, loss = 0.3683
Mean test/val loss: 0.4855
[25, 50, 75] percentiles test/val loss: [0.2091 0.3771 0.646 ]

Epoch 60, loss = 0.3640
Mean test/val loss: 0.4838
[25, 50, 75] percentiles test/val loss: [0.2083 0.3782 0.6573]


Total parameters: 51445040
Total training + validation time: 23.0 hours, 12.0 mins, and 41.30000000000291 secs
Final val loss: 0.4838462379798293

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_02_30_24_imr90 sample1051: 0.4935770034790039
dataset_03_12_24_imr90 sample3302: 0.18856486678123474
dataset_02_30_24_imr90 sample1560: 1.0362260341644287
dataset_02_30_24_imr90 sample2453: 0.6261626482009888
dataset_03_12_24_imr90 sample302: 0.44925329089164734
MSE_log: 0.559 +- 0.278

Downsampling (200k) Results:
Original sampling (400k) Results:

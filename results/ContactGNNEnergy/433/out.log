#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance_bonded', 'GeneticDistance_norm', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy5', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=433, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/433', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/433/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/433/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/433/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fbe79af5310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'GeneticDistance(norm=True)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  GeneticDistance(norm=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 14.672 minutes
Number of samples: 5000
Average num edges per graph:  61627.9772
Mean degree: [245.68 254.88 219.23 ... 251.09 215.5  255.  ] +- [ 9.13  0.37 26.94 ...  4.77 29.22  0.  ]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fbe3c1065e0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.5677
Mean test/val loss: 0.5387
[25, 50, 75] percentiles test/val loss: [0.2585 0.4411 0.6743]

Epoch 4, loss = 0.4960
Mean test/val loss: 0.5326
[25, 50, 75] percentiles test/val loss: [0.259  0.4145 0.6552]

Epoch 6, loss = 0.4594
Mean test/val loss: 0.4661
[25, 50, 75] percentiles test/val loss: [0.234  0.3739 0.5697]

Epoch 8, loss = 0.4256
Mean test/val loss: 0.4351
[25, 50, 75] percentiles test/val loss: [0.2155 0.3467 0.5382]

Epoch 10, loss = 0.3998
Mean test/val loss: 0.3943
[25, 50, 75] percentiles test/val loss: [0.1923 0.3086 0.4912]

Epoch 12, loss = 0.4237
Mean test/val loss: 0.3872
[25, 50, 75] percentiles test/val loss: [0.1858 0.3033 0.4723]

Epoch 14, loss = 0.3750
Mean test/val loss: 0.3774
[25, 50, 75] percentiles test/val loss: [0.1783 0.2906 0.4707]

Epoch 16, loss = 0.3634
Mean test/val loss: 0.3819
[25, 50, 75] percentiles test/val loss: [0.2093 0.3086 0.4566]

Epoch 18, loss = 0.3518
Mean test/val loss: 0.3652
[25, 50, 75] percentiles test/val loss: [0.1772 0.2805 0.4273]

Epoch 20, loss = 0.3426
Mean test/val loss: 0.3417
[25, 50, 75] percentiles test/val loss: [0.1663 0.269  0.4207]

Epoch 22, loss = 0.3323
Mean test/val loss: 0.3655
[25, 50, 75] percentiles test/val loss: [0.1972 0.2823 0.423 ]

Epoch 24, loss = 0.3217
Mean test/val loss: 0.3372
[25, 50, 75] percentiles test/val loss: [0.1646 0.2679 0.4074]

Epoch 26, loss = 0.3114
Mean test/val loss: 0.3291
[25, 50, 75] percentiles test/val loss: [0.1558 0.2608 0.3849]

Epoch 28, loss = 0.3038
Mean test/val loss: 0.3241
[25, 50, 75] percentiles test/val loss: [0.1544 0.255  0.3941]

Epoch 30, loss = 0.2971
Mean test/val loss: 0.3223
[25, 50, 75] percentiles test/val loss: [0.1596 0.2539 0.3833]

Epoch 32, loss = 0.2905
Mean test/val loss: 0.3226
[25, 50, 75] percentiles test/val loss: [0.1586 0.2567 0.3869]

Epoch 34, loss = 0.2897
Mean test/val loss: 0.3240
[25, 50, 75] percentiles test/val loss: [0.1587 0.2573 0.3927]

Epoch 36, loss = 0.2832
Mean test/val loss: 0.3065
[25, 50, 75] percentiles test/val loss: [0.1528 0.2436 0.3715]

Epoch 38, loss = 0.2784
Mean test/val loss: 0.3040
[25, 50, 75] percentiles test/val loss: [0.1465 0.2365 0.366 ]

Epoch 40, loss = 0.2745
Mean test/val loss: 0.3067
[25, 50, 75] percentiles test/val loss: [0.1482 0.2415 0.3751]

New lr: 1e-05
Epoch 42, loss = 0.2482
Mean test/val loss: 0.2834
[25, 50, 75] percentiles test/val loss: [0.1374 0.2209 0.3492]

Epoch 44, loss = 0.2442
Mean test/val loss: 0.2814
[25, 50, 75] percentiles test/val loss: [0.1354 0.2188 0.3448]

Epoch 46, loss = 0.2416
Mean test/val loss: 0.2801
[25, 50, 75] percentiles test/val loss: [0.1344 0.2161 0.3439]

Epoch 48, loss = 0.2394
Mean test/val loss: 0.2793
[25, 50, 75] percentiles test/val loss: [0.1343 0.2174 0.3454]

Epoch 50, loss = 0.2375
Mean test/val loss: 0.2790
[25, 50, 75] percentiles test/val loss: [0.1344 0.2172 0.3454]

Epoch 52, loss = 0.2358
Mean test/val loss: 0.2789
[25, 50, 75] percentiles test/val loss: [0.1345 0.2169 0.344 ]

Epoch 54, loss = 0.2342
Mean test/val loss: 0.2773
[25, 50, 75] percentiles test/val loss: [0.1335 0.215  0.3423]

Epoch 56, loss = 0.2329
Mean test/val loss: 0.2770
[25, 50, 75] percentiles test/val loss: [0.1337 0.2152 0.3421]

Epoch 58, loss = 0.2316
Mean test/val loss: 0.2769
[25, 50, 75] percentiles test/val loss: [0.1333 0.2158 0.3418]

Epoch 60, loss = 0.2304
Mean test/val loss: 0.2766
[25, 50, 75] percentiles test/val loss: [0.132  0.2139 0.3411]

Epoch 62, loss = 0.2293
Mean test/val loss: 0.2766
[25, 50, 75] percentiles test/val loss: [0.132  0.2149 0.3427]

Epoch 64, loss = 0.2283
Mean test/val loss: 0.2759
[25, 50, 75] percentiles test/val loss: [0.131  0.2119 0.3406]

Epoch 66, loss = 0.2273
Mean test/val loss: 0.2756
[25, 50, 75] percentiles test/val loss: [0.1322 0.2119 0.3406]

Epoch 68, loss = 0.2263
Mean test/val loss: 0.2753
[25, 50, 75] percentiles test/val loss: [0.1314 0.2132 0.3425]

Epoch 70, loss = 0.2254
Mean test/val loss: 0.2754
[25, 50, 75] percentiles test/val loss: [0.1302 0.2123 0.3405]

Epoch 72, loss = 0.2246
Mean test/val loss: 0.2751
[25, 50, 75] percentiles test/val loss: [0.1315 0.2126 0.3428]

Epoch 74, loss = 0.2238
Mean test/val loss: 0.2737
[25, 50, 75] percentiles test/val loss: [0.1298 0.2114 0.3399]

Epoch 76, loss = 0.2231
Mean test/val loss: 0.2750
[25, 50, 75] percentiles test/val loss: [0.1295 0.2115 0.3389]

Epoch 78, loss = 0.2223
Mean test/val loss: 0.2740
[25, 50, 75] percentiles test/val loss: [0.1309 0.2111 0.338 ]

Epoch 80, loss = 0.2215
Mean test/val loss: 0.2739
[25, 50, 75] percentiles test/val loss: [0.1294 0.2103 0.3394]


Total parameters: 26462000
Total training + validation time: 6.0 hours, 30.0 mins, and 13.400000000001455 secs
Final val loss: 0.27393132939562204

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_04_28_23 sample981: 0.5253759026527405
dataset_04_28_23 sample324: 0.5077539682388306
dataset_04_28_23 sample3464: 0.352792888879776
dataset_04_28_23 sample2834: 0.3993557095527649
dataset_04_28_23 sample1936: 0.20051541924476624
Loss: 0.397 +- 0.118

Downsampling (40%) Results:
dataset_04_28_23 sample1936-downsampling: 6.704106330871582
dataset_04_28_23 sample2834-downsampling: 7.7436299324035645
dataset_04_28_23 sample324-downsampling: 35.70554733276367
dataset_04_28_23 sample3464-downsampling: 9.183862686157227
dataset_04_28_23 sample981-downsampling: 11.001039505004883
Loss: 14.068 +- 10.915

Removing /scratch/midway3/erschultz/ContactGNNEnergy5downsample
Original sampling (100%) Results:
dataset_04_28_23 sample1936-regular: 6.067047119140625
dataset_04_28_23 sample2834-regular: 7.470040321350098
dataset_04_28_23 sample324-regular: 66.2538833618164
dataset_04_28_23 sample3464-regular: 6.8909101486206055
dataset_04_28_23 sample981-regular: 11.817632675170898
Loss: 19.7 +- 23.362

Removing /scratch/midway3/erschultz/ContactGNNEnergy5regsample

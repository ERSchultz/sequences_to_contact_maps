#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['MeanContactDistance', 'AdjPCs_10', 'GeneticDistance_pos512'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_02_30_24_imr90', '/project2/depablo/erschultz/dataset_03_12_24_imr90'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy7', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, lambda3=1, grad_clip=None, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', save_early_stop=False, model_type='ContactGNNEnergy', id=706, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', output_clip=None, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, bonded_path=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/706', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/706/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/706/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/706/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, node_feature_size=0, input_m=256, edge_transforms=['GeneticDistance(norm=False, positional_encoding with d=512)', 'MeanContactDistance(norm=False)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=513, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  MeanContactDistance(norm=False),
  AdjPCs(k=10, normalize=False, sign_net=True),
  GeneticDistance(norm=False, positional_encoding with d=512)
]), eig=False, criterion=<function mse_log at 0x7fd3b0f164c0>, cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 88.248 minutes
Number of samples: 10000
Average num edges per graph:  59473.9514
Mean degree: [190.48 248.96 204.09 ... 227.49 213.23 250.99] +- [43.53  7.8  33.59 ... 26.54 38.56  6.32]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [4713, 4774, 1016, 2684, 210, 1051, 3854, 1455, 822, 2835, 112, 1624, 1573, 3640, 1834, 1673, 3509, 2022, 2048, 858, 4211, 2155, 1892, 2837, 208, 3833, 4708, 2639, 3430, 4902, 2522, 1280, 2513, 380, 4385, 4145, 3490, 2293, 4881, 3861, 1124, 1794, 1318, 2859, 1074, 2956, 40, 2371, 2702, 617, 2703, 2935, 1235, 2755, 4049, 3269, 397, 3840, 3659, 915, 1, 4342, 1429, 4087, 1440, 3364, 1144, 302, 3180, 2708, 2983, 3067, 332, 2014, 2031, 936, 4695, 1846, 907, 2551, 3649, 945, 3095, 3242, 1559, 473, 4726, 4554, 2460, 520, 789, 414, 1768, 2965, 2891, 4987, 1583, 4222, 1097, 1091, 412, 1931]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fd3aff80730>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.4258
Mean test/val loss: 1.3866
[25, 50, 75] percentiles test/val loss: [0.7102 1.2248 1.903 ]

Epoch 4, loss = 1.4103
Mean test/val loss: 1.3482
[25, 50, 75] percentiles test/val loss: [0.6775 1.2116 1.8784]

Epoch 6, loss = 1.3917
Mean test/val loss: 1.3636
[25, 50, 75] percentiles test/val loss: [0.6932 1.2051 1.8774]

Epoch 8, loss = 1.3646
Mean test/val loss: 1.3292
[25, 50, 75] percentiles test/val loss: [0.6743 1.2045 1.8483]

Epoch 10, loss = 1.3348
Mean test/val loss: 1.2932
[25, 50, 75] percentiles test/val loss: [0.68   1.1769 1.7846]

Epoch 12, loss = 1.3072
Mean test/val loss: 1.2837
[25, 50, 75] percentiles test/val loss: [0.6594 1.1715 1.7506]

Epoch 14, loss = 1.2810
Mean test/val loss: 1.2476
[25, 50, 75] percentiles test/val loss: [0.6535 1.1454 1.717 ]

Epoch 16, loss = 1.2551
Mean test/val loss: 1.2503
[25, 50, 75] percentiles test/val loss: [0.655  1.1456 1.7349]

Epoch 18, loss = 1.2267
Mean test/val loss: 1.2182
[25, 50, 75] percentiles test/val loss: [0.6532 1.1242 1.6917]

Epoch 20, loss = 1.1986
Mean test/val loss: 1.2243
[25, 50, 75] percentiles test/val loss: [0.6631 1.1169 1.6579]

Epoch 22, loss = 1.1012
Mean test/val loss: 1.0038
[25, 50, 75] percentiles test/val loss: [0.5052 0.8391 1.3649]

Epoch 24, loss = 0.9225
Mean test/val loss: 0.9178
[25, 50, 75] percentiles test/val loss: [0.4582 0.7903 1.2503]

Epoch 26, loss = 0.8677
Mean test/val loss: 0.8614
[25, 50, 75] percentiles test/val loss: [0.428  0.7373 1.1986]

Epoch 28, loss = 0.8303
Mean test/val loss: 0.8489
[25, 50, 75] percentiles test/val loss: [0.428  0.7251 1.1459]

Epoch 30, loss = 0.7949
Mean test/val loss: 0.8046
[25, 50, 75] percentiles test/val loss: [0.4014 0.6878 1.0837]

Epoch 32, loss = 0.7637
Mean test/val loss: 0.7890
[25, 50, 75] percentiles test/val loss: [0.3895 0.6745 1.0495]

Epoch 34, loss = 0.7367
Mean test/val loss: 0.7996
[25, 50, 75] percentiles test/val loss: [0.4113 0.6802 1.078 ]

Epoch 36, loss = 0.7108
Mean test/val loss: 0.7546
[25, 50, 75] percentiles test/val loss: [0.3754 0.6474 1.0089]

Epoch 38, loss = 0.6864
Mean test/val loss: 0.7475
[25, 50, 75] percentiles test/val loss: [0.3695 0.6334 1.0019]

Epoch 40, loss = 0.6638
Mean test/val loss: 0.7310
[25, 50, 75] percentiles test/val loss: [0.3664 0.6226 0.9688]

New lr: 1e-05
Epoch 42, loss = 0.5605
Mean test/val loss: 0.6573
[25, 50, 75] percentiles test/val loss: [0.3312 0.5564 0.8809]

Epoch 44, loss = 0.5429
Mean test/val loss: 0.6500
[25, 50, 75] percentiles test/val loss: [0.3224 0.5483 0.867 ]

Epoch 46, loss = 0.5295
Mean test/val loss: 0.6456
[25, 50, 75] percentiles test/val loss: [0.3205 0.5428 0.8661]

Epoch 48, loss = 0.5178

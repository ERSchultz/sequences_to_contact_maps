#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_19_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy19', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=1e-05, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=489, pretrain_id=485, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/489', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/489/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/489/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/489/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7fa193e99280>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 16.089 minutes
Number of samples: 5000
Average num edges per graph:  63043.7012
Mean degree: [251.47 252.84 254.85 ... 248.9  224.55 252.47] +- [ 3.35  3.22  0.53 ...  8.56 41.39  4.33]

split sizes: train=4500, val=500, test=0, N=5000
Pre-trained model is loaded.
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 1e-05
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fa13c383970>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.7180
Mean test/val loss: 0.7228
[25, 50, 75] percentiles test/val loss: [0.3687 0.676  0.9454]

Epoch 4, loss = 0.6928
Mean test/val loss: 0.7089
[25, 50, 75] percentiles test/val loss: [0.372  0.668  0.9322]

Epoch 6, loss = 0.6762
Mean test/val loss: 0.7054
[25, 50, 75] percentiles test/val loss: [0.3678 0.6668 0.9321]

Epoch 8, loss = 0.6644
Mean test/val loss: 0.7036
[25, 50, 75] percentiles test/val loss: [0.3766 0.667  0.9294]

Epoch 10, loss = 0.6548
Mean test/val loss: 0.7023
[25, 50, 75] percentiles test/val loss: [0.3757 0.6646 0.9288]

Epoch 12, loss = 0.6468
Mean test/val loss: 0.7006
[25, 50, 75] percentiles test/val loss: [0.3689 0.6628 0.9301]

Epoch 14, loss = 0.6406
Mean test/val loss: 0.7015
[25, 50, 75] percentiles test/val loss: [0.3734 0.6618 0.9236]

Epoch 16, loss = 0.6355
Mean test/val loss: 0.6998
[25, 50, 75] percentiles test/val loss: [0.3709 0.6603 0.9287]

Epoch 18, loss = 0.6309
Mean test/val loss: 0.6986
[25, 50, 75] percentiles test/val loss: [0.3692 0.6618 0.9277]

Epoch 20, loss = 0.6265
Mean test/val loss: 0.6982
[25, 50, 75] percentiles test/val loss: [0.3663 0.6621 0.9178]

Epoch 22, loss = 0.6231
Mean test/val loss: 0.7030
[25, 50, 75] percentiles test/val loss: [0.3741 0.6618 0.9156]

Epoch 24, loss = 0.6195
Mean test/val loss: 0.6956
[25, 50, 75] percentiles test/val loss: [0.3714 0.6545 0.9241]

Epoch 26, loss = 0.6161
Mean test/val loss: 0.6931
[25, 50, 75] percentiles test/val loss: [0.3692 0.6512 0.9133]

Epoch 28, loss = 0.6133
Mean test/val loss: 0.6961
[25, 50, 75] percentiles test/val loss: [0.367  0.6576 0.9097]

Epoch 30, loss = 0.6105
Mean test/val loss: 0.6955
[25, 50, 75] percentiles test/val loss: [0.3665 0.6549 0.9138]

Epoch 32, loss = 0.6079
Mean test/val loss: 0.6945
[25, 50, 75] percentiles test/val loss: [0.3682 0.6577 0.9008]

Epoch 34, loss = 0.6055
Mean test/val loss: 0.6911
[25, 50, 75] percentiles test/val loss: [0.3685 0.6562 0.9054]

Epoch 36, loss = 0.6031
Mean test/val loss: 0.6946
[25, 50, 75] percentiles test/val loss: [0.3678 0.6541 0.9076]

Epoch 38, loss = 0.6008
Mean test/val loss: 0.6948
[25, 50, 75] percentiles test/val loss: [0.3649 0.6543 0.9089]

Epoch 40, loss = 0.5985
Mean test/val loss: 0.6984
[25, 50, 75] percentiles test/val loss: [0.3717 0.6557 0.9044]

New lr: 1.0000000000000002e-06
Epoch 42, loss = 0.5897
Mean test/val loss: 0.6909
[25, 50, 75] percentiles test/val loss: [0.3658 0.6501 0.8968]

Epoch 44, loss = 0.5888
Mean test/val loss: 0.6911
[25, 50, 75] percentiles test/val loss: [0.3675 0.6507 0.8963]

Epoch 46, loss = 0.5883
Mean test/val loss: 0.6913
[25, 50, 75] percentiles test/val loss: [0.367  0.6519 0.8952]

Epoch 48, loss = 0.5879
Mean test/val loss: 0.6919
[25, 50, 75] percentiles test/val loss: [0.3687 0.6482 0.8996]

Epoch 50, loss = 0.5875
Mean test/val loss: 0.6919
[25, 50, 75] percentiles test/val loss: [0.3676 0.6512 0.9005]

Epoch 52, loss = 0.5871
Mean test/val loss: 0.6916
[25, 50, 75] percentiles test/val loss: [0.3669 0.6498 0.8967]

Epoch 54, loss = 0.5868
Mean test/val loss: 0.6917
[25, 50, 75] percentiles test/val loss: [0.3669 0.6512 0.8947]

Epoch 56, loss = 0.5865
Mean test/val loss: 0.6923
[25, 50, 75] percentiles test/val loss: [0.3678 0.6494 0.9002]

Epoch 58, loss = 0.5862
Mean test/val loss: 0.6921
[25, 50, 75] percentiles test/val loss: [0.3676 0.6524 0.8949]

Epoch 60, loss = 0.5858
Mean test/val loss: 0.6923
[25, 50, 75] percentiles test/val loss: [0.3676 0.6518 0.8924]

Epoch 62, loss = 0.5855
Mean test/val loss: 0.6922
[25, 50, 75] percentiles test/val loss: [0.3678 0.6505 0.8982]

Epoch 64, loss = 0.5852
Mean test/val loss: 0.6928
[25, 50, 75] percentiles test/val loss: [0.3671 0.6525 0.9001]

Epoch 66, loss = 0.5849
Mean test/val loss: 0.6928
[25, 50, 75] percentiles test/val loss: [0.3692 0.6513 0.8993]

Epoch 68, loss = 0.5846
Mean test/val loss: 0.6926
[25, 50, 75] percentiles test/val loss: [0.3684 0.6524 0.8989]

Epoch 70, loss = 0.5843
Mean test/val loss: 0.6930
[25, 50, 75] percentiles test/val loss: [0.3691 0.6514 0.8962]

Epoch 72, loss = 0.5840
Mean test/val loss: 0.6933
[25, 50, 75] percentiles test/val loss: [0.3674 0.6523 0.9009]

Epoch 74, loss = 0.5837
Mean test/val loss: 0.6935
[25, 50, 75] percentiles test/val loss: [0.3683 0.6528 0.8983]

Epoch 76, loss = 0.5834
Mean test/val loss: 0.6937
[25, 50, 75] percentiles test/val loss: [0.3691 0.6522 0.8945]

Epoch 78, loss = 0.5831
Mean test/val loss: 0.6934
[25, 50, 75] percentiles test/val loss: [0.3689 0.6518 0.8954]

Epoch 80, loss = 0.5829
Mean test/val loss: 0.6935
[25, 50, 75] percentiles test/val loss: [0.3679 0.6521 0.8942]


Total parameters: 26462000
Total training + validation time: 6.0 hours, 51.0 mins, and 57.099999999998545 secs
Final val loss: 0.6934505301173777

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_09_19_23 sample981: 0.24300512671470642
dataset_09_19_23 sample324: 0.730932354927063
dataset_09_19_23 sample3464: 0.9440374374389648
dataset_09_19_23 sample2834: 0.03471982851624489
dataset_09_19_23 sample1936: 0.20904287695884705
MSE Loss: 0.432 +- 0.345

Downsampling (40%) Results:
dataset_09_19_23 sample1936-downsampling: 51.77690124511719

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project/depablo/erschultz/dataset_12_12_23_imr90'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy8', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log_and_mse_log_scc', loss_k=2, lambda1=1.0, lambda2=0.1, lambda3=1, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=648, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/648', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/648/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/648/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/648/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<scripts.neural_nets.losses.Combined_Loss object at 0x7f09089992b0>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=2, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 9.622 minutes
Number of samples: 5000
Average num edges per graph:  62346.308
Mean degree: [254.87 255.   255.   ... 214.69 254.65 239.73] +- [ 0.48  0.    0.   ... 35.84  1.01 17.39]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [1640, 1672, 3464, 831, 1651, 2678, 861, 3660, 267, 810, 2325, 2890, 3805, 4444, 2956, 1308, 3942, 2151, 3235, 1362, 566, 1440, 3319, 161, 206, 459, 3674, 4352, 2576, 4555, 753, 2322, 275, 745, 2876, 2221, 1309, 2628, 2363, 1906, 2834, 3684, 166, 3987, 3663, 1549, 981, 3237, 803, 1932, 3661, 4977, 4056, 255, 2787, 3760, 4875, 4932, 1511, 3912, 2913, 2064, 3, 64, 2434, 930, 795, 1006, 727, 672, 2695, 338, 111, 787, 1626, 1407, 952, 833, 4570, 1725, 1798, 1787, 2072, 3457, 544, 3195, 3861, 3343, 1300, 3110, 3283, 4990, 4966, 4092, 1475, 1589, 367, 1972, 4641, 1487, 1184, 4058]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f09040e07c0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.9318
Mean test/val loss: 0.8805
[25, 50, 75] percentiles test/val loss: [0.5444 0.8165 1.1032]

Epoch 4, loss = 0.7881
Mean test/val loss: 0.7784
[25, 50, 75] percentiles test/val loss: [0.4596 0.7178 0.9788]

Epoch 6, loss = 0.7291
Mean test/val loss: 0.7185
[25, 50, 75] percentiles test/val loss: [0.4321 0.6653 0.9032]

Epoch 8, loss = 0.6756
Mean test/val loss: 0.7506
[25, 50, 75] percentiles test/val loss: [0.4706 0.6715 0.9299]

Epoch 10, loss = 0.6368
Mean test/val loss: 0.6586
[25, 50, 75] percentiles test/val loss: [0.3919 0.5996 0.8296]

Epoch 12, loss = 0.6076
Mean test/val loss: 0.7131
[25, 50, 75] percentiles test/val loss: [0.4249 0.6445 0.9059]

Epoch 14, loss = 0.5781
Mean test/val loss: 0.6001
[25, 50, 75] percentiles test/val loss: [0.3387 0.5277 0.7681]

Epoch 16, loss = 0.5530
Mean test/val loss: 0.5802
[25, 50, 75] percentiles test/val loss: [0.3214 0.5193 0.7305]

Epoch 18, loss = 0.5376
Mean test/val loss: 0.5727
[25, 50, 75] percentiles test/val loss: [0.3262 0.5021 0.7275]

Epoch 20, loss = 0.5220
Mean test/val loss: 0.5469
[25, 50, 75] percentiles test/val loss: [0.3065 0.4904 0.6913]

Epoch 22, loss = 0.5013
Mean test/val loss: 0.5412
[25, 50, 75] percentiles test/val loss: [0.3121 0.4734 0.6922]

Epoch 24, loss = 0.4881
Mean test/val loss: 0.5231
[25, 50, 75] percentiles test/val loss: [0.2967 0.4608 0.6648]

Epoch 26, loss = 0.4796
Mean test/val loss: 0.5178
[25, 50, 75] percentiles test/val loss: [0.2949 0.4628 0.651 ]

Epoch 28, loss = 0.4628
Mean test/val loss: 0.5064
[25, 50, 75] percentiles test/val loss: [0.2852 0.4436 0.6451]

Epoch 30, loss = 0.4548
Mean test/val loss: 0.5145
[25, 50, 75] percentiles test/val loss: [0.3036 0.4595 0.6449]

Epoch 32, loss = 0.4424
Mean test/val loss: 0.4961
[25, 50, 75] percentiles test/val loss: [0.2807 0.4335 0.6357]

Epoch 34, loss = 0.4341
Mean test/val loss: 0.4836
[25, 50, 75] percentiles test/val loss: [0.281  0.4194 0.6215]

Epoch 36, loss = 0.4261
Mean test/val loss: 0.4852
[25, 50, 75] percentiles test/val loss: [0.276  0.4238 0.6275]

Epoch 38, loss = 0.4184
Mean test/val loss: 0.4774
[25, 50, 75] percentiles test/val loss: [0.2686 0.4147 0.6076]

Epoch 40, loss = 0.4108
Mean test/val loss: 0.4695
[25, 50, 75] percentiles test/val loss: [0.2667 0.4099 0.5954]

New lr: 1e-05
Epoch 42, loss = 0.3611
Mean test/val loss: 0.4374
[25, 50, 75] percentiles test/val loss: [0.2479 0.382  0.5546]

Epoch 44, loss = 0.3534
Mean test/val loss: 0.4360
[25, 50, 75] percentiles test/val loss: [0.2477 0.3816 0.5565]

Epoch 46, loss = 0.3481
Mean test/val loss: 0.4351
[25, 50, 75] percentiles test/val loss: [0.2478 0.3749 0.5507]

Epoch 48, loss = 0.3438
Mean test/val loss: 0.4343
[25, 50, 75] percentiles test/val loss: [0.245  0.3747 0.5462]

Epoch 50, loss = 0.3397
Mean test/val loss: 0.4329
[25, 50, 75] percentiles test/val loss: [0.2433 0.3723 0.5522]

Epoch 52, loss = 0.3361
Mean test/val loss: 0.4331
[25, 50, 75] percentiles test/val loss: [0.2443 0.3757 0.5457]

Epoch 54, loss = 0.3328
Mean test/val loss: 0.4318
[25, 50, 75] percentiles test/val loss: [0.2417 0.3722 0.5392]

Epoch 56, loss = 0.3295
Mean test/val loss: 0.4316
[25, 50, 75] percentiles test/val loss: [0.2426 0.3737 0.5429]

Epoch 58, loss = 0.3266
Mean test/val loss: 0.4310
[25, 50, 75] percentiles test/val loss: [0.2403 0.3698 0.5401]

Epoch 60, loss = 0.3237
Mean test/val loss: 0.4313
[25, 50, 75] percentiles test/val loss: [0.2425 0.3723 0.5425]


Total parameters: 51478960
Total training + validation time: 8.0 hours, 20.0 mins, and 2.400000000001455 secs
Final val loss: 0.4312941104322672

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_12_12_23_imr90 sample981: 0.13025347888469696
dataset_12_12_23_imr90 sample324: 0.5508002638816833
dataset_12_12_23_imr90 sample3464: 0.45917367935180664
dataset_12_12_23_imr90 sample2834: 0.27953681349754333
dataset_12_12_23_imr90 sample1936: 0.09192498028278351
mse_log_and_mse_log_scc loss: 0.302 +- 0.179

Downsampling (200k) Results:
Original sampling (400k) Results:

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_11_21_23_imr90'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy15', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=616, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/616', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/616/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/616/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/616/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f9aa9f4f280>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 12.927 minutes
Number of samples: 5000
Average num edges per graph:  65022.0704
Mean degree: [254.99 255.   255.   ... 255.   255.   212.8 ] +- [ 0.09  0.    0.   ...  0.    0.   36.13]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f9a5c2343d0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.0958
Mean test/val loss: 1.0372
[25, 50, 75] percentiles test/val loss: [0.7321 0.9925 1.2688]

Epoch 4, loss = 1.1626
Mean test/val loss: 1.0356
[25, 50, 75] percentiles test/val loss: [0.7178 0.9974 1.2819]

Epoch 6, loss = 0.9218
Mean test/val loss: 0.9103
[25, 50, 75] percentiles test/val loss: [0.6218 0.8873 1.1464]

Epoch 8, loss = 0.8743
Mean test/val loss: 0.8720
[25, 50, 75] percentiles test/val loss: [0.5965 0.8225 1.0866]

Epoch 10, loss = 0.8209
Mean test/val loss: 0.8579
[25, 50, 75] percentiles test/val loss: [0.5845 0.8214 1.0642]

Epoch 12, loss = 0.7847
Mean test/val loss: 0.7902
[25, 50, 75] percentiles test/val loss: [0.5302 0.7536 0.9908]

Epoch 14, loss = 0.7602
Mean test/val loss: 0.7573
[25, 50, 75] percentiles test/val loss: [0.5119 0.7278 0.9347]

Epoch 16, loss = 0.7292
Mean test/val loss: 0.7294
[25, 50, 75] percentiles test/val loss: [0.5034 0.6981 0.8915]

Epoch 18, loss = 0.7077
Mean test/val loss: 0.7198
[25, 50, 75] percentiles test/val loss: [0.487  0.683  0.8735]

Epoch 20, loss = 0.6906
Mean test/val loss: 0.7069
[25, 50, 75] percentiles test/val loss: [0.4772 0.6813 0.8582]

Epoch 22, loss = 0.6719
Mean test/val loss: 0.6852
[25, 50, 75] percentiles test/val loss: [0.4626 0.6583 0.8404]

Epoch 24, loss = 0.6570
Mean test/val loss: 0.6889
[25, 50, 75] percentiles test/val loss: [0.4584 0.6611 0.8452]

Epoch 26, loss = 0.6444
Mean test/val loss: 0.6731
[25, 50, 75] percentiles test/val loss: [0.4626 0.6561 0.8106]

Epoch 28, loss = 0.6315
Mean test/val loss: 0.6506
[25, 50, 75] percentiles test/val loss: [0.4409 0.6279 0.8073]

Epoch 30, loss = 0.6204
Mean test/val loss: 0.6559
[25, 50, 75] percentiles test/val loss: [0.4364 0.6325 0.8018]

Epoch 32, loss = 0.6120
Mean test/val loss: 0.6478
[25, 50, 75] percentiles test/val loss: [0.4375 0.6273 0.7999]

Epoch 34, loss = 0.6038
Mean test/val loss: 0.6485
[25, 50, 75] percentiles test/val loss: [0.4346 0.6198 0.7938]

Epoch 36, loss = 0.5927
Mean test/val loss: 0.6502
[25, 50, 75] percentiles test/val loss: [0.4323 0.6272 0.7904]

Epoch 38, loss = 0.5864
Mean test/val loss: 0.6232
[25, 50, 75] percentiles test/val loss: [0.4218 0.6008 0.7665]

Epoch 40, loss = 0.5765
Mean test/val loss: 0.6220
[25, 50, 75] percentiles test/val loss: [0.4176 0.6034 0.762 ]

New lr: 1e-05
Epoch 42, loss = 0.5204
Mean test/val loss: 0.5788
[25, 50, 75] percentiles test/val loss: [0.3881 0.5541 0.7097]

Epoch 44, loss = 0.5116
Mean test/val loss: 0.5747
[25, 50, 75] percentiles test/val loss: [0.3861 0.5512 0.7004]

Epoch 46, loss = 0.5054
Mean test/val loss: 0.5724
[25, 50, 75] percentiles test/val loss: [0.3858 0.5463 0.6953]

Epoch 48, loss = 0.5003
Mean test/val loss: 0.5708
[25, 50, 75] percentiles test/val loss: [0.383  0.5516 0.6964]

Epoch 50, loss = 0.4955
Mean test/val loss: 0.5695
[25, 50, 75] percentiles test/val loss: [0.3826 0.5453 0.696 ]

Epoch 52, loss = 0.4912
Mean test/val loss: 0.5691
[25, 50, 75] percentiles test/val loss: [0.3822 0.5443 0.6947]

Epoch 54, loss = 0.4871
Mean test/val loss: 0.5662
[25, 50, 75] percentiles test/val loss: [0.3798 0.5432 0.6939]

Epoch 56, loss = 0.4834
Mean test/val loss: 0.5653
[25, 50, 75] percentiles test/val loss: [0.3811 0.5421 0.6869]

Epoch 58, loss = 0.4798
Mean test/val loss: 0.5652
[25, 50, 75] percentiles test/val loss: [0.3773 0.543  0.695 ]

Epoch 60, loss = 0.4763
Mean test/val loss: 0.5634
[25, 50, 75] percentiles test/val loss: [0.3781 0.5422 0.6846]


Total parameters: 51479472
Total training + validation time: 8.0 hours, 29.0 mins, and 50.79999999999927 secs
Final val loss: 0.5634244195148349

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_11_21_23_imr90 sample981: 0.4524892270565033
dataset_11_21_23_imr90 sample324: 0.6749011278152466
dataset_11_21_23_imr90 sample3464: 0.8075568675994873
dataset_11_21_23_imr90 sample2834: 0.3088000416755676
dataset_11_21_23_imr90 sample1936: 0.6298478841781616
MSE Loss: 0.575 +- 0.175

Downsampling (200k) Results:
Original sampling (400k) Results:

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project/depablo/erschultz/dataset_12_12_23_imr90'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy0', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=2, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, lambda3=1, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=657, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/657', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/657/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/657/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/657/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=2, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), eig=False, criterion=<function mse_log at 0x7f03f93ec430>, cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 9.348 minutes
Number of samples: 5000
Average num edges per graph:  62346.308
Mean degree: [254.87 255.   255.   ... 214.69 254.65 239.73] +- [ 0.48  0.    0.   ... 35.84  1.01 17.39]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [1640, 3464, 1651, 861, 267, 2325, 3805, 2956, 3942, 3235, 566, 3319, 206, 3674, 2576, 753, 275, 2876, 1309, 2363, 2834, 166, 3663, 981, 803, 3661, 4056, 2787, 4875, 1511, 2913, 3, 2434, 795, 727, 2695, 111, 1626, 952, 4570, 1798, 2072, 544, 3861, 1300, 3283, 4966, 1475, 367, 4641, 1184, 3739, 4059, 4256, 2825, 4772, 75, 2390, 3988, 887, 4067, 3037, 2461, 2642, 3950, 3392, 2422, 1735, 3600, 324, 3694, 3229, 3756, 3003, 4682, 2073, 4082, 3596, 127, 1716, 2451, 1005, 3332, 320, 4171, 2951, 2986, 3435, 290, 1764, 3216, 4503, 1617, 3383, 2517, 3230, 2431, 2537, 741, 2906, 3727, 1634]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f03f84cd640>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.8789
Mean test/val loss: 0.8421
[25, 50, 75] percentiles test/val loss: [0.6155 0.8007 1.035 ]

Epoch 4, loss = 0.7688
Mean test/val loss: 0.7716
[25, 50, 75] percentiles test/val loss: [0.5478 0.7445 0.9441]

Epoch 6, loss = 0.7073
Mean test/val loss: 0.7151
[25, 50, 75] percentiles test/val loss: [0.5114 0.6773 0.8599]

Epoch 8, loss = 0.6704
Mean test/val loss: 0.7054
[25, 50, 75] percentiles test/val loss: [0.4877 0.6542 0.8764]

Epoch 10, loss = 0.6468
Mean test/val loss: 0.6623
[25, 50, 75] percentiles test/val loss: [0.4853 0.6193 0.7968]

Epoch 12, loss = 0.6137
Mean test/val loss: 0.6763
[25, 50, 75] percentiles test/val loss: [0.5127 0.6538 0.7979]

Epoch 14, loss = 0.5815
Mean test/val loss: 0.6023
[25, 50, 75] percentiles test/val loss: [0.4261 0.5559 0.7208]

Epoch 16, loss = 0.5493
Mean test/val loss: 0.5739
[25, 50, 75] percentiles test/val loss: [0.4055 0.5421 0.6931]

Epoch 18, loss = 0.5268
Mean test/val loss: 0.5610
[25, 50, 75] percentiles test/val loss: [0.4076 0.5458 0.6595]

Epoch 20, loss = 0.5069
Mean test/val loss: 0.5324
[25, 50, 75] percentiles test/val loss: [0.3656 0.5095 0.6739]

Epoch 22, loss = 0.4860
Mean test/val loss: 0.5171
[25, 50, 75] percentiles test/val loss: [0.3628 0.4919 0.6058]

Epoch 24, loss = 0.4727
Mean test/val loss: 0.5098
[25, 50, 75] percentiles test/val loss: [0.3611 0.4742 0.6255]

Epoch 26, loss = 0.4589
Mean test/val loss: 0.4884
[25, 50, 75] percentiles test/val loss: [0.3597 0.4547 0.6038]

Epoch 28, loss = 0.4467
Mean test/val loss: 0.4823
[25, 50, 75] percentiles test/val loss: [0.3243 0.4511 0.5845]

Epoch 30, loss = 0.4354
Mean test/val loss: 0.4847
[25, 50, 75] percentiles test/val loss: [0.3385 0.4516 0.603 ]

Epoch 32, loss = 0.4255
Mean test/val loss: 0.4692
[25, 50, 75] percentiles test/val loss: [0.3173 0.4414 0.5639]

Epoch 34, loss = 0.4151
Mean test/val loss: 0.4678
[25, 50, 75] percentiles test/val loss: [0.3297 0.4316 0.5598]

Epoch 36, loss = 0.4092
Mean test/val loss: 0.4585
[25, 50, 75] percentiles test/val loss: [0.3236 0.4275 0.5586]

Epoch 38, loss = 0.4016
Mean test/val loss: 0.4647
[25, 50, 75] percentiles test/val loss: [0.3392 0.4322 0.5467]

Epoch 40, loss = 0.3951
Mean test/val loss: 0.4533
[25, 50, 75] percentiles test/val loss: [0.3194 0.4102 0.5649]

New lr: 1e-05
Epoch 42, loss = 0.3529
Mean test/val loss: 0.4220
[25, 50, 75] percentiles test/val loss: [0.2872 0.3937 0.5158]

Epoch 44, loss = 0.3468
Mean test/val loss: 0.4200
[25, 50, 75] percentiles test/val loss: [0.2893 0.3982 0.5123]

Epoch 46, loss = 0.3426
Mean test/val loss: 0.4191
[25, 50, 75] percentiles test/val loss: [0.2852 0.3904 0.52  ]

Epoch 48, loss = 0.3391
Mean test/val loss: 0.4185
[25, 50, 75] percentiles test/val loss: [0.2929 0.3787 0.5053]

Epoch 50, loss = 0.3359
Mean test/val loss: 0.4161
[25, 50, 75] percentiles test/val loss: [0.2894 0.3798 0.5133]

Epoch 52, loss = 0.3331
Mean test/val loss: 0.4167
[25, 50, 75] percentiles test/val loss: [0.2783 0.3868 0.5104]

Epoch 54, loss = 0.3304
Mean test/val loss: 0.4158
[25, 50, 75] percentiles test/val loss: [0.2921 0.3923 0.5176]

Epoch 56, loss = 0.3279
Mean test/val loss: 0.4169
[25, 50, 75] percentiles test/val loss: [0.29   0.3886 0.5248]

Epoch 58, loss = 0.3255
Mean test/val loss: 0.4143
[25, 50, 75] percentiles test/val loss: [0.2804 0.3856 0.5212]

Epoch 60, loss = 0.3233
Mean test/val loss: 0.4160
[25, 50, 75] percentiles test/val loss: [0.285  0.3753 0.5087]


Total parameters: 51478960
Total training + validation time: 16.0 hours, 20.0 mins, and 51.400000000001455 secs
Final val loss: 0.41602582976222036

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_12_12_23_imr90 sample981: 0.13330432772636414
dataset_12_12_23_imr90 sample324: 0.5236197710037231
dataset_12_12_23_imr90 sample3464: 0.42325401306152344
dataset_12_12_23_imr90 sample2834: 0.2753535509109497
dataset_12_12_23_imr90 sample1936: 0.08953668922185898
MSE_log: 0.289 +- 0.166

Downsampling (200k) Results:
Original sampling (400k) Results:

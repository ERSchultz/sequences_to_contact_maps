#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_19_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy0', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=487, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/487', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/487/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/487/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/487/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f4d28018280>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 17.715 minutes
Number of samples: 5000
Average num edges per graph:  63043.7012
Mean degree: [251.47 252.84 254.85 ... 248.9  224.55 252.47] +- [ 3.35  3.22  0.53 ...  8.56 41.39  4.33]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f4ce0164760>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.3857
Mean test/val loss: 1.2927
[25, 50, 75] percentiles test/val loss: [0.7557 1.2498 1.7261]

Epoch 4, loss = 1.2157
Mean test/val loss: 1.1829
[25, 50, 75] percentiles test/val loss: [0.7113 1.1105 1.5548]

Epoch 6, loss = 1.1194
Mean test/val loss: 1.0673
[25, 50, 75] percentiles test/val loss: [0.5834 0.9941 1.4696]

Epoch 8, loss = 1.0541
Mean test/val loss: 1.1234
[25, 50, 75] percentiles test/val loss: [0.6465 1.0677 1.4818]

Epoch 10, loss = 0.9942
Mean test/val loss: 0.9671
[25, 50, 75] percentiles test/val loss: [0.5251 0.9125 1.2857]

Epoch 12, loss = 0.9437
Mean test/val loss: 0.9088
[25, 50, 75] percentiles test/val loss: [0.486  0.8564 1.2121]

Epoch 14, loss = 0.9104
Mean test/val loss: 0.9080
[25, 50, 75] percentiles test/val loss: [0.4842 0.8518 1.1973]

Epoch 16, loss = 0.8827
Mean test/val loss: 0.9076
[25, 50, 75] percentiles test/val loss: [0.5016 0.8652 1.1942]

Epoch 18, loss = 0.8594
Mean test/val loss: 0.9377
[25, 50, 75] percentiles test/val loss: [0.5411 0.8733 1.1972]

Epoch 20, loss = 0.8448
Mean test/val loss: 0.8579
[25, 50, 75] percentiles test/val loss: [0.4688 0.8262 1.121 ]

Epoch 22, loss = 0.8222
Mean test/val loss: 0.8546
[25, 50, 75] percentiles test/val loss: [0.4511 0.8132 1.102 ]

Epoch 24, loss = 0.8066
Mean test/val loss: 0.8461
[25, 50, 75] percentiles test/val loss: [0.4427 0.809  1.1132]

Epoch 26, loss = 0.7930
Mean test/val loss: 0.8081
[25, 50, 75] percentiles test/val loss: [0.4369 0.758  1.0692]

Epoch 28, loss = 0.7797
Mean test/val loss: 0.8394
[25, 50, 75] percentiles test/val loss: [0.4667 0.7925 1.0849]

Epoch 30, loss = 0.7676
Mean test/val loss: 0.8128
[25, 50, 75] percentiles test/val loss: [0.438  0.7679 1.069 ]

Epoch 32, loss = 0.7571
Mean test/val loss: 0.8006
[25, 50, 75] percentiles test/val loss: [0.4481 0.7615 1.0492]

Epoch 34, loss = 0.7460
Mean test/val loss: 0.7811
[25, 50, 75] percentiles test/val loss: [0.4214 0.7433 1.0407]

Epoch 36, loss = 0.7396
Mean test/val loss: 0.7904
[25, 50, 75] percentiles test/val loss: [0.4275 0.7574 1.0509]

Epoch 38, loss = 0.7295
Mean test/val loss: 0.7609
[25, 50, 75] percentiles test/val loss: [0.4143 0.7184 1.0156]

Epoch 40, loss = 0.7203
Mean test/val loss: 0.7853
[25, 50, 75] percentiles test/val loss: [0.4296 0.7467 1.0225]

New lr: 1e-05
Epoch 42, loss = 0.6627
Mean test/val loss: 0.7257
[25, 50, 75] percentiles test/val loss: [0.397  0.6881 0.9377]

Epoch 44, loss = 0.6548
Mean test/val loss: 0.7220
[25, 50, 75] percentiles test/val loss: [0.3912 0.6878 0.9313]

Epoch 46, loss = 0.6494
Mean test/val loss: 0.7206
[25, 50, 75] percentiles test/val loss: [0.3904 0.6854 0.9309]

Epoch 48, loss = 0.6448
Mean test/val loss: 0.7189
[25, 50, 75] percentiles test/val loss: [0.393  0.6885 0.9298]

Epoch 50, loss = 0.6408
Mean test/val loss: 0.7184
[25, 50, 75] percentiles test/val loss: [0.3922 0.6833 0.9304]

Epoch 52, loss = 0.6370
Mean test/val loss: 0.7185
[25, 50, 75] percentiles test/val loss: [0.3927 0.6819 0.9386]

Epoch 54, loss = 0.6338
Mean test/val loss: 0.7166
[25, 50, 75] percentiles test/val loss: [0.3863 0.6827 0.9279]

Epoch 56, loss = 0.6306
Mean test/val loss: 0.7161
[25, 50, 75] percentiles test/val loss: [0.3891 0.6809 0.9261]

Epoch 58, loss = 0.6277
Mean test/val loss: 0.7167
[25, 50, 75] percentiles test/val loss: [0.3881 0.6847 0.9373]

Epoch 60, loss = 0.6250
Mean test/val loss: 0.7155
[25, 50, 75] percentiles test/val loss: [0.3854 0.6842 0.9262]

Epoch 62, loss = 0.6224
Mean test/val loss: 0.7171
[25, 50, 75] percentiles test/val loss: [0.3867 0.6851 0.9238]

Epoch 64, loss = 0.6199
Mean test/val loss: 0.7135
[25, 50, 75] percentiles test/val loss: [0.3843 0.68   0.9273]

Epoch 66, loss = 0.6175
Mean test/val loss: 0.7166
[25, 50, 75] percentiles test/val loss: [0.3823 0.6838 0.9183]

Epoch 68, loss = 0.6152
Mean test/val loss: 0.7147
[25, 50, 75] percentiles test/val loss: [0.3816 0.6794 0.9237]

Epoch 70, loss = 0.6131
Mean test/val loss: 0.7146
[25, 50, 75] percentiles test/val loss: [0.3791 0.6778 0.931 ]

Epoch 72, loss = 0.6109
Mean test/val loss: 0.7136
[25, 50, 75] percentiles test/val loss: [0.3803 0.6842 0.9214]

Epoch 74, loss = 0.6089
Mean test/val loss: 0.7120
[25, 50, 75] percentiles test/val loss: [0.3805 0.681  0.9286]

Epoch 76, loss = 0.6068
Mean test/val loss: 0.7117
[25, 50, 75] percentiles test/val loss: [0.3788 0.6778 0.9274]

Epoch 78, loss = 0.6050
Mean test/val loss: 0.7115
[25, 50, 75] percentiles test/val loss: [0.3778 0.6761 0.9157]

Epoch 80, loss = 0.6031
Mean test/val loss: 0.7118
[25, 50, 75] percentiles test/val loss: [0.377  0.6769 0.9315]


Total parameters: 26462000
Total training + validation time: 6.0 hours, 31.0 mins, and 19.700000000000728 secs
Final val loss: 0.7118204792048782

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_09_19_23 sample981: 0.26487958431243896
dataset_09_19_23 sample324: 0.7322670817375183
dataset_09_19_23 sample3464: 0.8069345951080322
dataset_09_19_23 sample2834: 0.03670797497034073
dataset_09_19_23 sample1936: 0.19516979157924652
MSE Loss: 0.407 +- 0.306

Downsampling (40%) Results:
dataset_09_19_23 sample1936-downsampling: 39.84391403198242

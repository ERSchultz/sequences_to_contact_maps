#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 Sequential(
  (0): ConvBlock(
    (model): Sequential(
      (0): Conv1d(128, 64, kernel_size=(3,), stride=(1,), padding=(1,))
      (1): Identity()
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (1): ConvBlock(
    (model): Sequential(
      (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
      (1): Identity()
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (2): ConvBlock(
    (model): Sequential(
      (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
      (1): Identity()
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (3): ConvBlock(
    (model): Sequential(
      (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
      (1): Identity()
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (4): ConvBlock(
    (model): Sequential(
      (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(16,), dilation=(16,))
      (1): Identity()
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
) 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project/depablo/erschultz/dataset_12_12_23_imr90'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy8', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, lambda3=1, clip=None, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=665, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='dconv-fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/665', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/665/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/665/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/665/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=2, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), eig=False, criterion=<function mse_log at 0x7fad6fa82e50>, cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 9.749 minutes
Number of samples: 5000
Average num edges per graph:  62346.308
Mean degree: [254.87 255.   255.   ... 214.69 254.65 239.73] +- [ 0.48  0.    0.   ... 35.84  1.01 17.39]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [2135, 1533, 4864, 840, 622, 3254, 3064, 2661, 2322, 3442, 1806, 1847, 3230, 166, 2425, 3025, 3406, 4024, 1672, 2795, 1506, 795, 3455, 2249, 831, 3733, 410, 1006, 926, 338, 195, 3616, 4356, 3898, 3698, 3988, 4307, 1626, 2143, 943, 267, 2363, 3457, 4058, 719, 4515, 4994, 4976, 2441, 3038, 2291, 4546, 1667, 2060, 1001, 1906, 4901, 4408, 2319, 863, 1523, 682, 3049, 3570, 1122, 2097, 75, 3282, 40, 4568, 3003, 1005, 953, 4966, 1300, 808, 320, 225, 4092, 2986, 2390, 1140, 787, 2113, 2567, 290, 3634, 1659, 3739, 4783, 280, 2984, 2147, 3523, 1954, 4604, 978, 475, 3092, 2956, 4345, 3440]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fad6eb08220>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.9002
Mean test/val loss: 0.8856
[25, 50, 75] percentiles test/val loss: [0.5711 0.8222 1.0913]

Epoch 4, loss = 0.7796
Mean test/val loss: 0.7903
[25, 50, 75] percentiles test/val loss: [0.4762 0.7327 0.9865]

Epoch 6, loss = 0.7202
Mean test/val loss: 0.7329
[25, 50, 75] percentiles test/val loss: [0.4523 0.6757 0.9158]

Epoch 8, loss = 0.6625
Mean test/val loss: 0.6903
[25, 50, 75] percentiles test/val loss: [0.4213 0.6244 0.8762]

Epoch 10, loss = 0.6271
Mean test/val loss: 0.6811
[25, 50, 75] percentiles test/val loss: [0.412  0.6147 0.8657]

Epoch 12, loss = 0.5965
Mean test/val loss: 0.6059
[25, 50, 75] percentiles test/val loss: [0.3492 0.5451 0.7991]

Epoch 14, loss = 0.5710
Mean test/val loss: 0.5714
[25, 50, 75] percentiles test/val loss: [0.3235 0.5126 0.7328]

Epoch 16, loss = 0.5469
Mean test/val loss: 0.5627
[25, 50, 75] percentiles test/val loss: [0.3217 0.5089 0.7228]

Epoch 18, loss = 0.5313
Mean test/val loss: 0.5640
[25, 50, 75] percentiles test/val loss: [0.324  0.5023 0.7251]

Epoch 20, loss = 0.5130
Mean test/val loss: 0.5568
[25, 50, 75] percentiles test/val loss: [0.3231 0.5007 0.7143]

Epoch 22, loss = 0.4964
Mean test/val loss: 0.5257
[25, 50, 75] percentiles test/val loss: [0.2974 0.4605 0.6738]

Epoch 24, loss = 0.4879
Mean test/val loss: 0.5137
[25, 50, 75] percentiles test/val loss: [0.2922 0.4591 0.6587]

Epoch 26, loss = 0.4719
Mean test/val loss: 0.5045
[25, 50, 75] percentiles test/val loss: [0.2867 0.4512 0.6491]

Epoch 28, loss = 0.4593
Mean test/val loss: 0.4974
[25, 50, 75] percentiles test/val loss: [0.29   0.4412 0.6214]

Epoch 30, loss = 0.4502
Mean test/val loss: 0.4822
[25, 50, 75] percentiles test/val loss: [0.2733 0.4266 0.6159]

Epoch 32, loss = 0.4395
Mean test/val loss: 0.4893
[25, 50, 75] percentiles test/val loss: [0.2848 0.4362 0.6207]

Epoch 34, loss = 0.4319
Mean test/val loss: 0.4822
[25, 50, 75] percentiles test/val loss: [0.2725 0.4207 0.604 ]

Epoch 36, loss = 0.4234
Mean test/val loss: 0.4760
[25, 50, 75] percentiles test/val loss: [0.2683 0.4187 0.6033]

Epoch 38, loss = 0.4142
Mean test/val loss: 0.4845
[25, 50, 75] percentiles test/val loss: [0.2858 0.4327 0.6212]

Epoch 40, loss = 0.4080
Mean test/val loss: 0.4602
[25, 50, 75] percentiles test/val loss: [0.2612 0.4084 0.5831]

New lr: 1e-05
Epoch 42, loss = 0.3583
Mean test/val loss: 0.4330
[25, 50, 75] percentiles test/val loss: [0.2457 0.377  0.5528]

Epoch 44, loss = 0.3506
Mean test/val loss: 0.4306
[25, 50, 75] percentiles test/val loss: [0.2446 0.377  0.5443]

Epoch 46, loss = 0.3451
Mean test/val loss: 0.4295
[25, 50, 75] percentiles test/val loss: [0.242  0.3745 0.5428]

Epoch 48, loss = 0.3408
Mean test/val loss: 0.4288
[25, 50, 75] percentiles test/val loss: [0.2415 0.3718 0.5463]

Epoch 50, loss = 0.3367
Mean test/val loss: 0.4282
[25, 50, 75] percentiles test/val loss: [0.2421 0.3734 0.5427]

Epoch 52, loss = 0.3330
#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 Sequential(
  (0): ConvBlock(
    (model): Sequential(
      (0): Conv1d(128, 64, kernel_size=(3,), stride=(1,), padding=(1,))
      (1): Identity()
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (1): ConvBlock(
    (model): Sequential(
      (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
      (1): Identity()
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (2): ConvBlock(
    (model): Sequential(
      (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
      (1): Identity()
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (3): ConvBlock(
    (model): Sequential(
      (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
      (1): Identity()
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (4): ConvBlock(
    (model): Sequential(
      (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(16,), dilation=(16,))
      (1): Identity()
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
) 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project/depablo/erschultz/dataset_12_12_23_imr90'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy8', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, lambda3=1, grad_clip=None, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=665, pretrain_id=None, resume_training=True, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', output_clip=None, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='dconv-fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/665', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/665/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/665/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/665/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=2, transforms_processed=None, diag=True, corr=False, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), eig=False, criterion=<function mse_log at 0x7f851b696160>, cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 10.119 minutes
Number of samples: 5000
Average num edges per graph:  62346.308
Mean degree: [254.87 255.   255.   ... 214.69 254.65 239.73] +- [ 0.48  0.    0.   ... 35.84  1.01 17.39]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [2135, 1533, 4864, 840, 622, 3254, 3064, 2661, 2322, 3442, 1806, 1847, 3230, 166, 2425, 3025, 3406, 4024, 1672, 2795, 1506, 795, 3455, 2249, 831, 3733, 410, 1006, 926, 338, 195, 3616, 4356, 3898, 3698, 3988, 4307, 1626, 2143, 943, 267, 2363, 3457, 4058, 719, 4515, 4994, 4976, 2441, 3038, 2291, 4546, 1667, 2060, 1001, 1906, 4901, 4408, 2319, 863, 1523, 682, 3049, 3570, 1122, 2097, 75, 3282, 40, 4568, 3003, 1005, 953, 4966, 1300, 808, 320, 225, 4092, 2986, 2390, 1140, 787, 2113, 2567, 290, 3634, 1659, 3739, 4783, 280, 2984, 2147, 3523, 1954, 4604, 978, 475, 3092, 2956, 4345, 3440]
Partially-trained model is loaded.
Starting at epoch 51
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f851a71a9d0>
#### TRAINING/VALIDATION ####
New lr: 1e-05
Epoch 52, loss = 0.3330
Mean test/val loss: 0.4287
[25, 50, 75] percentiles test/val loss: [0.2388 0.373  0.5496]

Epoch 54, loss = 0.3295
Mean test/val loss: 0.4266
[25, 50, 75] percentiles test/val loss: [0.2387 0.3691 0.5449]

Epoch 56, loss = 0.3262
Mean test/val loss: 0.4272
[25, 50, 75] percentiles test/val loss: [0.2389 0.3738 0.5424]

Epoch 58, loss = 0.3232
Mean test/val loss: 0.4264
[25, 50, 75] percentiles test/val loss: [0.2365 0.3678 0.5467]

Epoch 60, loss = 0.3201
Mean test/val loss: 0.4263
[25, 50, 75] percentiles test/val loss: [0.237  0.3675 0.5431]


Total parameters: 35169008
Total training + validation time: 4.0 hours, 20.0 mins, and 46.5 secs
Final val loss: 0.4262791677936912

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_12_12_23_imr90 sample981: 0.1147545576095581
dataset_12_12_23_imr90 sample324: 0.51282799243927
dataset_12_12_23_imr90 sample3464: 0.4371153712272644
dataset_12_12_23_imr90 sample2834: 0.25157439708709717
dataset_12_12_23_imr90 sample1936: 0.09871824085712433
MSE_log: 0.283 +- 0.167

Downsampling (200k) Results:
Original sampling (400k) Results:

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_17_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy20', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=485, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/485', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/485/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/485/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/485/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f426414c280>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 19.078 minutes
Number of samples: 5000
Average num edges per graph:  63391.2592
Mean degree: [245.12 249.23 254.53 ... 250.54 253.05 254.34] +- [9.06 7.42 0.85 ... 6.51 2.57 1.27]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f421c292d30>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.3440
Mean test/val loss: 1.2498
[25, 50, 75] percentiles test/val loss: [0.8622 1.1874 1.5378]

Epoch 4, loss = 1.2014
Mean test/val loss: 1.1641
[25, 50, 75] percentiles test/val loss: [0.8132 1.0963 1.4524]

Epoch 6, loss = 1.1057
Mean test/val loss: 1.0502
[25, 50, 75] percentiles test/val loss: [0.704  0.9484 1.3101]

Epoch 8, loss = 1.0410
Mean test/val loss: 1.0539
[25, 50, 75] percentiles test/val loss: [0.7185 0.9802 1.3305]

Epoch 10, loss = 0.9854
Mean test/val loss: 0.9280
[25, 50, 75] percentiles test/val loss: [0.6178 0.843  1.1882]

Epoch 12, loss = 0.9479
Mean test/val loss: 0.9013
[25, 50, 75] percentiles test/val loss: [0.6014 0.8252 1.1339]

Epoch 14, loss = 0.9175
Mean test/val loss: 0.8814
[25, 50, 75] percentiles test/val loss: [0.5918 0.7913 1.1162]

Epoch 16, loss = 0.8974
Mean test/val loss: 0.8709
[25, 50, 75] percentiles test/val loss: [0.5825 0.7911 1.1173]

Epoch 18, loss = 0.8729
Mean test/val loss: 0.8365
[25, 50, 75] percentiles test/val loss: [0.5552 0.7577 1.0751]

Epoch 20, loss = 0.8544
Mean test/val loss: 0.8243
[25, 50, 75] percentiles test/val loss: [0.5394 0.7422 1.067 ]

Epoch 22, loss = 0.8376
Mean test/val loss: 0.8243
[25, 50, 75] percentiles test/val loss: [0.5441 0.7438 1.0553]

Epoch 24, loss = 0.8245
Mean test/val loss: 0.8153
[25, 50, 75] percentiles test/val loss: [0.5486 0.7445 1.0367]

Epoch 26, loss = 0.8103
Mean test/val loss: 0.7913
[25, 50, 75] percentiles test/val loss: [0.5284 0.7174 1.0235]

Epoch 28, loss = 0.7997
Mean test/val loss: 0.7880
[25, 50, 75] percentiles test/val loss: [0.5252 0.7135 1.01  ]

Epoch 30, loss = 0.7862
Mean test/val loss: 0.7772
[25, 50, 75] percentiles test/val loss: [0.5178 0.7091 1.0006]

Epoch 32, loss = 0.7744
Mean test/val loss: 0.7685
[25, 50, 75] percentiles test/val loss: [0.5079 0.6949 1.0053]

Epoch 34, loss = 0.7666
Mean test/val loss: 0.7613
[25, 50, 75] percentiles test/val loss: [0.506  0.6935 0.98  ]

Epoch 36, loss = 0.7587
Mean test/val loss: 0.7541
[25, 50, 75] percentiles test/val loss: [0.4907 0.6863 0.9832]

Epoch 38, loss = 0.7498
Mean test/val loss: 0.7490
[25, 50, 75] percentiles test/val loss: [0.5062 0.6814 0.9648]

Epoch 40, loss = 0.7425
Mean test/val loss: 0.7528
[25, 50, 75] percentiles test/val loss: [0.4978 0.6862 0.9768]

New lr: 1e-05
Epoch 42, loss = 0.6896
Mean test/val loss: 0.7104
[25, 50, 75] percentiles test/val loss: [0.4683 0.6502 0.9208]

Epoch 44, loss = 0.6828
Mean test/val loss: 0.7093
[25, 50, 75] percentiles test/val loss: [0.4661 0.65   0.921 ]

Epoch 46, loss = 0.6782
Mean test/val loss: 0.7067
[25, 50, 75] percentiles test/val loss: [0.4657 0.6475 0.9157]

Epoch 48, loss = 0.6743
Mean test/val loss: 0.7058
[25, 50, 75] percentiles test/val loss: [0.4637 0.6472 0.9127]

Epoch 50, loss = 0.6710
Mean test/val loss: 0.7047
[25, 50, 75] percentiles test/val loss: [0.4623 0.6502 0.9155]

Epoch 52, loss = 0.6680
Mean test/val loss: 0.7043
[25, 50, 75] percentiles test/val loss: [0.4644 0.6467 0.9131]

Epoch 54, loss = 0.6652
Mean test/val loss: 0.7057
[25, 50, 75] percentiles test/val loss: [0.4645 0.6488 0.9186]

Epoch 56, loss = 0.6626
Mean test/val loss: 0.7045
[25, 50, 75] percentiles test/val loss: [0.4643 0.6457 0.9111]

Epoch 58, loss = 0.6601
Mean test/val loss: 0.7058
[25, 50, 75] percentiles test/val loss: [0.4631 0.6505 0.914 ]

Epoch 60, loss = 0.6579
Mean test/val loss: 0.7018
[25, 50, 75] percentiles test/val loss: [0.4611 0.6484 0.9134]

Epoch 62, loss = 0.6556
Mean test/val loss: 0.7023
[25, 50, 75] percentiles test/val loss: [0.4596 0.6455 0.9109]

Epoch 64, loss = 0.6535
Mean test/val loss: 0.7008
[25, 50, 75] percentiles test/val loss: [0.4643 0.6462 0.9121]

Epoch 66, loss = 0.6515
Mean test/val loss: 0.7022
[25, 50, 75] percentiles test/val loss: [0.4612 0.6468 0.9151]

Epoch 68, loss = 0.6496
Mean test/val loss: 0.6992
[25, 50, 75] percentiles test/val loss: [0.4602 0.6475 0.9073]

Epoch 70, loss = 0.6477
Mean test/val loss: 0.6988
[25, 50, 75] percentiles test/val loss: [0.459  0.6458 0.9091]

Epoch 72, loss = 0.6459
Mean test/val loss: 0.6988
[25, 50, 75] percentiles test/val loss: [0.4592 0.6446 0.9122]

Epoch 74, loss = 0.6441
Mean test/val loss: 0.6984
[25, 50, 75] percentiles test/val loss: [0.4584 0.6449 0.9134]

Epoch 76, loss = 0.6423
Mean test/val loss: 0.6983
[25, 50, 75] percentiles test/val loss: [0.4596 0.6454 0.9065]

Epoch 78, loss = 0.6406
Mean test/val loss: 0.6993
[25, 50, 75] percentiles test/val loss: [0.461  0.6449 0.9063]

Epoch 80, loss = 0.6390
Mean test/val loss: 0.6977
[25, 50, 75] percentiles test/val loss: [0.4576 0.6432 0.9093]


Total parameters: 26462000
Total training + validation time: 6.0 hours, 41.0 mins, and 29.900000000001455 secs
Final val loss: 0.6977232424914837

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_09_17_23 sample981: 0.6787934899330139
dataset_09_17_23 sample324: 1.0124893188476562
dataset_09_17_23 sample3464: 0.6856991052627563
dataset_09_17_23 sample2834: 1.025532841682434
dataset_09_17_23 sample1936: 0.5356745719909668
MSE Loss: 0.788 +- 0.196

Downsampling (40%) Results:
dataset_09_17_23 sample1936-downsampling: 70.08746337890625
dataset_09_17_23 sample2834-downsampling: 45.634521484375
dataset_09_17_23 sample324-downsampling: 44.514076232910156
dataset_09_17_23 sample3464-downsampling: 62.699764251708984
dataset_09_17_23 sample981-downsampling: 115.44524383544922
Loss: 67.676 +- 25.825

Removing /scratch/midway3/erschultz/ContactGNNEnergy20downsample
Original sampling (100%) Results:
dataset_09_17_23 sample1936-regular: 46.33283996582031
dataset_09_17_23 sample2834-regular: 101.60348510742188
dataset_09_17_23 sample324-regular: 42.37502670288086
dataset_09_17_23 sample3464-regular: 59.51386260986328
dataset_09_17_23 sample981-regular: 150.7921142578125
Loss: 80.123 +- 41.102

Removing /scratch/midway3/erschultz/ContactGNNEnergy20regsample

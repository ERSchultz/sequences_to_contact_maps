#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_11_21_23_imr90'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy10', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=611, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/611', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/611/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/611/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/611/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7f8040f06670>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 16.195 minutes
Number of samples: 5000
Average num edges per graph:  65022.0704
Mean degree: [254.99 255.   255.   ... 255.   255.   212.8 ] +- [ 0.09  0.    0.   ...  0.    0.   36.13]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f8012b148b0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.5493
Mean test/val loss: 1.4760
[25, 50, 75] percentiles test/val loss: [1.0466 1.4485 1.8222]

Epoch 4, loss = 1.3001
Mean test/val loss: 1.2802
[25, 50, 75] percentiles test/val loss: [0.9479 1.2722 1.5475]

Epoch 6, loss = 1.2082
Mean test/val loss: 1.1809
[25, 50, 75] percentiles test/val loss: [0.8369 1.1358 1.4383]

Epoch 8, loss = 1.0819
Mean test/val loss: 1.0748
[25, 50, 75] percentiles test/val loss: [0.7148 1.0492 1.3288]

Epoch 10, loss = 1.0245
Mean test/val loss: 1.0417
[25, 50, 75] percentiles test/val loss: [0.7324 1.0053 1.2784]

Epoch 12, loss = 0.9863
Mean test/val loss: 1.0003
[25, 50, 75] percentiles test/val loss: [0.6772 0.9535 1.2585]

Epoch 14, loss = 0.9563
Mean test/val loss: 0.9900
[25, 50, 75] percentiles test/val loss: [0.6779 0.9445 1.2164]

Epoch 16, loss = 0.9342
Mean test/val loss: 0.9661
[25, 50, 75] percentiles test/val loss: [0.6601 0.9108 1.1962]

Epoch 18, loss = 0.9123
Mean test/val loss: 0.9347
[25, 50, 75] percentiles test/val loss: [0.6291 0.8858 1.1719]

Epoch 20, loss = 0.8964
Mean test/val loss: 0.9352
[25, 50, 75] percentiles test/val loss: [0.6403 0.8947 1.1536]

Epoch 22, loss = 0.8806
Mean test/val loss: 0.9063
[25, 50, 75] percentiles test/val loss: [0.5989 0.8581 1.1374]

Epoch 24, loss = 0.8672
Mean test/val loss: 0.9231
[25, 50, 75] percentiles test/val loss: [0.6267 0.8796 1.125 ]

Epoch 26, loss = 0.8550
Mean test/val loss: 0.8985
[25, 50, 75] percentiles test/val loss: [0.623  0.8447 1.0998]

Epoch 28, loss = 0.8428
Mean test/val loss: 0.8807
[25, 50, 75] percentiles test/val loss: [0.588  0.826  1.1092]

Epoch 30, loss = 0.8315
Mean test/val loss: 0.8865
[25, 50, 75] percentiles test/val loss: [0.5884 0.8377 1.0931]

Epoch 32, loss = 0.8230
Mean test/val loss: 0.8838
[25, 50, 75] percentiles test/val loss: [0.5908 0.8302 1.1157]

Epoch 34, loss = 0.8098
Mean test/val loss: 0.8642
[25, 50, 75] percentiles test/val loss: [0.5785 0.8127 1.0679]

Epoch 36, loss = 0.8031
Mean test/val loss: 0.8622
[25, 50, 75] percentiles test/val loss: [0.5789 0.8101 1.0687]

Epoch 38, loss = 0.7944
Mean test/val loss: 0.8598
[25, 50, 75] percentiles test/val loss: [0.5759 0.8121 1.0733]

Epoch 40, loss = 0.7859
Mean test/val loss: 0.8630
[25, 50, 75] percentiles test/val loss: [0.5803 0.8198 1.0739]

New lr: 1e-05
Epoch 42, loss = 0.7231
Mean test/val loss: 0.8076
[25, 50, 75] percentiles test/val loss: [0.5382 0.7575 1.0142]

Epoch 44, loss = 0.7131
Mean test/val loss: 0.8049
[25, 50, 75] percentiles test/val loss: [0.5302 0.7507 1.0124]

Epoch 46, loss = 0.7060
Mean test/val loss: 0.8027
[25, 50, 75] percentiles test/val loss: [0.5309 0.7456 1.0093]

Epoch 48, loss = 0.7000
Mean test/val loss: 0.8011
[25, 50, 75] percentiles test/val loss: [0.5269 0.7457 1.0031]

Epoch 50, loss = 0.6945
Mean test/val loss: 0.8007
[25, 50, 75] percentiles test/val loss: [0.5263 0.7488 1.0094]

Epoch 52, loss = 0.6894
Mean test/val loss: 0.7994
[25, 50, 75] percentiles test/val loss: [0.525  0.7454 1.0131]

Epoch 54, loss = 0.6846
Mean test/val loss: 0.7999
[25, 50, 75] percentiles test/val loss: [0.5258 0.7428 1.0091]

Epoch 56, loss = 0.6801
Mean test/val loss: 0.7989
[25, 50, 75] percentiles test/val loss: [0.5189 0.7462 1.0069]

Epoch 58, loss = 0.6756
Mean test/val loss: 0.7980
[25, 50, 75] percentiles test/val loss: [0.5165 0.7431 1.0059]

Epoch 60, loss = 0.6715
Mean test/val loss: 0.7977
[25, 50, 75] percentiles test/val loss: [0.5126 0.7428 0.9986]


Total parameters: 51479472
Total training + validation time: 8.0 hours, 26.0 mins, and 50.79999999999927 secs
Final val loss: 0.7977282332926988

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_11_21_23_imr90 sample981: 0.658346951007843
dataset_11_21_23_imr90 sample324: 0.9687166213989258
dataset_11_21_23_imr90 sample3464: 1.2280373573303223
dataset_11_21_23_imr90 sample2834: 0.49761825799942017
dataset_11_21_23_imr90 sample1936: 0.96665358543396
MSE_log: 0.864 +- 0.257

Downsampling (200k) Results:

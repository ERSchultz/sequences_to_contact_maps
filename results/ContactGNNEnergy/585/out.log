#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_10_14_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy13', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log_and_mse_top_k_diagonals', loss_k=20, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=585, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/585', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/585/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/585/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/585/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<scripts.neural_nets.losses.MSE_log_and_MSE_top_k_diagonals object at 0x7f73070cd850>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 13.301 minutes
Number of samples: 5000
Average num edges per graph:  65200.434
Mean degree: [255.   254.73 254.98 ... 255.   255.   254.94] +- [0.   0.96 0.15 ... 0.   0.   0.3 ]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f72ff1b37c0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 83.5547
Mean test/val loss: 80.3417
[25, 50, 75] percentiles test/val loss: [ 37.9598  64.1992 101.8995]

Epoch 4, loss = 77.7388
Mean test/val loss: 72.3097
[25, 50, 75] percentiles test/val loss: [33.2754 58.8423 91.6212]

Epoch 6, loss = 75.0158
Mean test/val loss: 67.9175
[25, 50, 75] percentiles test/val loss: [32.7822 53.1763 86.4477]

Epoch 8, loss = 69.3792
Mean test/val loss: 71.7859
[25, 50, 75] percentiles test/val loss: [33.7056 55.9621 93.5199]

Epoch 10, loss = 66.8848
Mean test/val loss: 66.3674
[25, 50, 75] percentiles test/val loss: [33.8026 52.7468 85.4726]

Epoch 12, loss = 65.0753
Mean test/val loss: 64.2852
[25, 50, 75] percentiles test/val loss: [30.4405 51.4569 80.0751]

Epoch 14, loss = 60.8993
Mean test/val loss: 61.5525
[25, 50, 75] percentiles test/val loss: [32.1551 48.4455 75.5928]

Epoch 16, loss = 56.9282
Mean test/val loss: 57.0130
[25, 50, 75] percentiles test/val loss: [28.5917 44.03   68.2883]

Epoch 18, loss = 54.1161
Mean test/val loss: 51.5171
[25, 50, 75] percentiles test/val loss: [25.2819 39.784  62.4577]

Epoch 20, loss = 52.2088
Mean test/val loss: 52.8466
[25, 50, 75] percentiles test/val loss: [25.1352 40.2933 66.5656]

Epoch 22, loss = 49.5553
Mean test/val loss: 50.4687
[25, 50, 75] percentiles test/val loss: [25.6839 40.125  61.5083]

Epoch 24, loss = 48.0079
Mean test/val loss: 48.3753
[25, 50, 75] percentiles test/val loss: [24.534  37.5599 59.4342]

Epoch 26, loss = 46.1930
Mean test/val loss: 47.2873
[25, 50, 75] percentiles test/val loss: [22.6575 36.9146 59.6421]

Epoch 28, loss = 43.6776
Mean test/val loss: 46.8782
[25, 50, 75] percentiles test/val loss: [22.6877 35.5274 56.8955]

Epoch 30, loss = 41.7871
Mean test/val loss: 45.4805
[25, 50, 75] percentiles test/val loss: [21.9671 34.6889 56.5854]

Epoch 32, loss = 40.0918
Mean test/val loss: 47.4313
[25, 50, 75] percentiles test/val loss: [22.0945 37.1675 56.8722]

Epoch 34, loss = 38.9906
Mean test/val loss: 43.0224
[25, 50, 75] percentiles test/val loss: [21.4231 33.4267 53.9412]

Epoch 36, loss = 38.0489
Mean test/val loss: 42.9854
[25, 50, 75] percentiles test/val loss: [21.6412 33.5724 52.667 ]

Epoch 38, loss = 36.5435
Mean test/val loss: 43.5474
[25, 50, 75] percentiles test/val loss: [21.0928 33.1441 51.5979]

Epoch 40, loss = 35.6400
Mean test/val loss: 41.2755
[25, 50, 75] percentiles test/val loss: [19.6184 31.8393 50.1866]

New lr: 1e-05
Epoch 42, loss = 30.1070
Mean test/val loss: 38.5551
[25, 50, 75] percentiles test/val loss: [18.7233 28.9382 46.6675]

Epoch 44, loss = 29.1054
Mean test/val loss: 38.0711
[25, 50, 75] percentiles test/val loss: [18.6534 29.012  46.1639]

Epoch 46, loss = 28.3877
Mean test/val loss: 37.8829
[25, 50, 75] percentiles test/val loss: [18.752  28.6028 44.8741]

Epoch 48, loss = 27.7875
Mean test/val loss: 37.7191
[25, 50, 75] percentiles test/val loss: [18.4906 29.0055 45.1007]

Epoch 50, loss = 27.2638
Mean test/val loss: 37.2768
[25, 50, 75] percentiles test/val loss: [18.1579 28.9432 44.129 ]

Epoch 52, loss = 26.8153
Mean test/val loss: 37.1637
[25, 50, 75] percentiles test/val loss: [18.277  28.6549 43.4194]

Epoch 54, loss = 26.3707
Mean test/val loss: 36.9951
[25, 50, 75] percentiles test/val loss: [18.0677 28.6065 43.5405]

Epoch 56, loss = 25.9745
Mean test/val loss: 37.0537
[25, 50, 75] percentiles test/val loss: [18.1043 28.4954 44.4843]

Epoch 58, loss = 25.6172
Mean test/val loss: 37.7734
[25, 50, 75] percentiles test/val loss: [18.6767 29.8021 45.2059]

Epoch 60, loss = 25.2481
Mean test/val loss: 36.6750
[25, 50, 75] percentiles test/val loss: [18.495  28.5332 43.105 ]

Epoch 62, loss = 24.9336
Mean test/val loss: 36.6815
[25, 50, 75] percentiles test/val loss: [17.9093 28.4724 44.0003]

Epoch 64, loss = 24.6520
Mean test/val loss: 36.2957
[25, 50, 75] percentiles test/val loss: [18.1503 28.3318 43.4489]

Epoch 66, loss = 24.3729
Mean test/val loss: 36.6085
[25, 50, 75] percentiles test/val loss: [18.3796 28.5753 43.1485]

Epoch 68, loss = 24.1333
Mean test/val loss: 36.4831
[25, 50, 75] percentiles test/val loss: [18.1987 28.6733 44.4111]

Epoch 70, loss = 23.8996
Mean test/val loss: 36.4728
[25, 50, 75] percentiles test/val loss: [18.1491 28.574  43.1577]


Total parameters: 51479472
Total training + validation time: 10.0 hours, 12.0 mins, and 6.900000000001455 secs
Final val loss: 36.47278198814392

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_10_14_23 sample981: 43.55185532569885
dataset_10_14_23 sample324: 35.012072533369064
dataset_10_14_23 sample3464: 97.81418657302856
dataset_10_14_23 sample2834: 24.117657780647278
dataset_10_14_23 sample1936: 20.409806609153748
Loss1: 1.784, Loss2: 42.397
MSE_log+MSE_top_k_diag: 44.181 +- 28.031

Downsampling (200k) Results:

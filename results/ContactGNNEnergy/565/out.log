#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy7', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log_and_mse_kth_diagonal', loss_k=2, lambda1=1.0, lambda2=0.001, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=565, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/565', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/565/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/565/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/565/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<scripts.neural_nets.losses.MSE_log_and_MSE_kth_diagonal object at 0x7fa01e489850>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 17.471 minutes
Number of samples: 5000
Average num edges per graph:  64202.6016
Mean degree: [249.86 254.38 247.02 ... 253.91 251.64 251.34] +- [6.31 0.99 8.25 ... 2.04 5.21 3.97]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fa01e424280>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.8059
Mean test/val loss: 1.7915
[25, 50, 75] percentiles test/val loss: [1.1805 1.6905 2.3125]

Epoch 4, loss = 1.6696
Mean test/val loss: 1.5727
[25, 50, 75] percentiles test/val loss: [1.0477 1.5088 1.9757]

Epoch 6, loss = 1.4576
Mean test/val loss: 1.4111
[25, 50, 75] percentiles test/val loss: [0.9858 1.3347 1.7456]

Epoch 8, loss = 1.3586
Mean test/val loss: 1.3148
[25, 50, 75] percentiles test/val loss: [0.8874 1.2267 1.6251]

Epoch 10, loss = 1.2435
Mean test/val loss: 1.2115
[25, 50, 75] percentiles test/val loss: [0.7904 1.133  1.495 ]

Epoch 12, loss = 1.1728
Mean test/val loss: 1.1669
[25, 50, 75] percentiles test/val loss: [0.7397 1.0782 1.4142]

Epoch 14, loss = 1.1276
Mean test/val loss: 1.1332
[25, 50, 75] percentiles test/val loss: [0.7295 1.06   1.3901]

Epoch 16, loss = 1.0858
Mean test/val loss: 1.0866
[25, 50, 75] percentiles test/val loss: [0.7032 1.0012 1.331 ]

Epoch 18, loss = 1.0590
Mean test/val loss: 1.0615
[25, 50, 75] percentiles test/val loss: [0.6766 0.9785 1.2978]

Epoch 20, loss = 1.0384
Mean test/val loss: 1.0506
[25, 50, 75] percentiles test/val loss: [0.6801 0.9572 1.2688]

Epoch 22, loss = 1.0111
Mean test/val loss: 1.0243
[25, 50, 75] percentiles test/val loss: [0.6474 0.932  1.2674]

Epoch 24, loss = 0.9946
Mean test/val loss: 1.1285
[25, 50, 75] percentiles test/val loss: [0.76   1.0068 1.39  ]

Epoch 26, loss = 0.9768
Mean test/val loss: 1.0107
[25, 50, 75] percentiles test/val loss: [0.6268 0.9294 1.2259]

Epoch 28, loss = 0.9607
Mean test/val loss: 0.9829
[25, 50, 75] percentiles test/val loss: [0.6137 0.893  1.2173]

Epoch 30, loss = 0.9500
Mean test/val loss: 1.0043
[25, 50, 75] percentiles test/val loss: [0.6709 0.9134 1.23  ]

Epoch 32, loss = 0.9325
Mean test/val loss: 0.9843
[25, 50, 75] percentiles test/val loss: [0.617  0.8931 1.2071]

Epoch 34, loss = 0.9231
Mean test/val loss: 0.9515
[25, 50, 75] percentiles test/val loss: [0.6058 0.8674 1.1879]

Epoch 36, loss = 0.9057
Mean test/val loss: 0.9420
[25, 50, 75] percentiles test/val loss: [0.6022 0.8493 1.1705]

Epoch 38, loss = 0.8954
Mean test/val loss: 0.9468
[25, 50, 75] percentiles test/val loss: [0.6029 0.8624 1.1657]

Epoch 40, loss = 0.8852
Mean test/val loss: 0.9286
[25, 50, 75] percentiles test/val loss: [0.5837 0.8397 1.1567]

New lr: 1e-05
Epoch 42, loss = 0.8019
Mean test/val loss: 0.8723
[25, 50, 75] percentiles test/val loss: [0.5544 0.7796 1.0886]

Epoch 44, loss = 0.7890
Mean test/val loss: 0.8652
[25, 50, 75] percentiles test/val loss: [0.5434 0.7734 1.0847]

Epoch 46, loss = 0.7796
Mean test/val loss: 0.8641
[25, 50, 75] percentiles test/val loss: [0.5413 0.7781 1.0795]

Epoch 48, loss = 0.7717
Mean test/val loss: 0.8577
[25, 50, 75] percentiles test/val loss: [0.5371 0.7623 1.0729]

Epoch 50, loss = 0.7644
Mean test/val loss: 0.8569
[25, 50, 75] percentiles test/val loss: [0.5417 0.7635 1.0661]

Epoch 52, loss = 0.7575
Mean test/val loss: 0.8551
[25, 50, 75] percentiles test/val loss: [0.5437 0.7587 1.0654]

Epoch 54, loss = 0.7514
Mean test/val loss: 0.8535
[25, 50, 75] percentiles test/val loss: [0.5349 0.7593 1.0601]

Epoch 56, loss = 0.7451
Mean test/val loss: 0.8545
[25, 50, 75] percentiles test/val loss: [0.544  0.7561 1.0589]

Epoch 58, loss = 0.7388
Mean test/val loss: 0.8544
[25, 50, 75] percentiles test/val loss: [0.5334 0.7615 1.062 ]

Epoch 60, loss = 0.7337
Mean test/val loss: 0.8524
[25, 50, 75] percentiles test/val loss: [0.5382 0.7552 1.0557]

Epoch 62, loss = 0.7288
Mean test/val loss: 0.8482
[25, 50, 75] percentiles test/val loss: [0.5356 0.7526 1.0527]

Epoch 64, loss = 0.7232
Mean test/val loss: 0.8474
[25, 50, 75] percentiles test/val loss: [0.5329 0.7511 1.0473]

Epoch 66, loss = 0.7182
Mean test/val loss: 0.8481
[25, 50, 75] percentiles test/val loss: [0.5341 0.7511 1.0583]

Epoch 68, loss = 0.7136
Mean test/val loss: 0.8450
[25, 50, 75] percentiles test/val loss: [0.526  0.7489 1.0425]

Epoch 70, loss = 0.7090
Mean test/val loss: 0.8466
[25, 50, 75] percentiles test/val loss: [0.5241 0.75   1.0534]


Total parameters: 51479472
Total training + validation time: 9.0 hours, 59.0 mins, and 52.5 secs
Final val loss: 0.8465584264323115

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample981: 0.20746020483784378
dataset_09_28_23 sample324: 0.8370755165815353
dataset_09_28_23 sample3464: 1.1299380250275135
dataset_09_28_23 sample2834: 2.575197607278824
dataset_09_28_23 sample1936: 0.9051885306835175
Loss1: 1.048, Loss2: 0.083
MSE_log+MSE_k_diag: 1.131 +- 0.784

Downsampling (200k) Results:
dataset_09_28_23 sample1936-downsampling: 13.120756149291992
dataset_09_28_23 sample2834-downsampling: 54.238670349121094
dataset_09_28_23 sample324-downsampling: 65.6827392578125
dataset_09_28_23 sample3464-downsampling: 35.34403991699219
dataset_09_28_23 sample981-downsampling: 4.205542087554932
Loss: 34.518 +- 23.399

Removing /scratch/midway3/erschultz/ContactGNNEnergy7downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1936-regular: 12.983772277832031
dataset_09_28_23 sample2834-regular: 52.6654167175293
dataset_09_28_23 sample324-regular: 50.65220642089844
dataset_09_28_23 sample3464-regular: 24.225387573242188
dataset_09_28_23 sample981-regular: 4.0409040451049805
Loss: 28.914 +- 19.653

Removing /scratch/midway3/erschultz/ContactGNNEnergy7regsample

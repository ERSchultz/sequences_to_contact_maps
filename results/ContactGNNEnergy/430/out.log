#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'GeneticDistance_norm', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy0', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym', model_type='ContactGNNEnergy', id=430, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/430', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/430/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/430/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/430/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7ff597caf3a0>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'GeneticDistance(norm=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=4, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  GeneticDistance(norm=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 20.032 minutes
Number of samples: 5000
Average num edges per graph:  61627.9772
Mean degree: [245.68 254.88 219.23 ... 251.09 215.5  255.  ] +- [ 9.13  0.37 26.94 ...  4.77 29.22  0.  ]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7ff55db46430>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.8934
Mean test/val loss: 0.8109
[25, 50, 75] percentiles test/val loss: [0.5575 0.7289 0.9764]

Epoch 4, loss = 0.7298
Mean test/val loss: 0.7208
[25, 50, 75] percentiles test/val loss: [0.4837 0.6447 0.8639]

Epoch 6, loss = 0.6408
Mean test/val loss: 0.6745
[25, 50, 75] percentiles test/val loss: [0.4446 0.6149 0.8261]

Epoch 8, loss = 0.5894
Mean test/val loss: 0.6198
[25, 50, 75] percentiles test/val loss: [0.4032 0.5562 0.7575]

Epoch 10, loss = 0.5589
Mean test/val loss: 0.5626
[25, 50, 75] percentiles test/val loss: [0.3532 0.498  0.6924]

Epoch 12, loss = 0.6070
Mean test/val loss: 0.5413
[25, 50, 75] percentiles test/val loss: [0.3358 0.4854 0.6673]

Epoch 14, loss = 0.5170
Mean test/val loss: 0.5421
[25, 50, 75] percentiles test/val loss: [0.3351 0.4875 0.659 ]

Epoch 16, loss = 0.4989
Mean test/val loss: 0.5216
[25, 50, 75] percentiles test/val loss: [0.3252 0.4592 0.6459]

Epoch 18, loss = 0.4760
Mean test/val loss: 0.5182
[25, 50, 75] percentiles test/val loss: [0.3304 0.461  0.6338]

Epoch 20, loss = 0.4634
Mean test/val loss: 0.4951
[25, 50, 75] percentiles test/val loss: [0.3113 0.4488 0.6084]

Epoch 22, loss = 0.4503
Mean test/val loss: 0.4757
[25, 50, 75] percentiles test/val loss: [0.3008 0.4343 0.5858]

Epoch 24, loss = 0.4382
Mean test/val loss: 0.4749
[25, 50, 75] percentiles test/val loss: [0.2933 0.4249 0.574 ]

Epoch 26, loss = 0.4283
Mean test/val loss: 0.4598
[25, 50, 75] percentiles test/val loss: [0.2811 0.4021 0.5512]

Epoch 28, loss = 0.4186
Mean test/val loss: 0.4743
[25, 50, 75] percentiles test/val loss: [0.3001 0.4269 0.5632]

Epoch 30, loss = 0.4082
Mean test/val loss: 0.4465
[25, 50, 75] percentiles test/val loss: [0.2725 0.3946 0.5314]

Epoch 32, loss = 0.3996
Mean test/val loss: 0.4416
[25, 50, 75] percentiles test/val loss: [0.2723 0.3869 0.5355]

Epoch 34, loss = 0.3951
Mean test/val loss: 0.4387
[25, 50, 75] percentiles test/val loss: [0.2708 0.3887 0.5377]

Epoch 36, loss = 0.3883
Mean test/val loss: 0.4278
[25, 50, 75] percentiles test/val loss: [0.2623 0.38   0.5145]

Epoch 38, loss = 0.3796
Mean test/val loss: 0.4396
[25, 50, 75] percentiles test/val loss: [0.2771 0.3981 0.5313]

Epoch 40, loss = 0.3736
Mean test/val loss: 0.4335
[25, 50, 75] percentiles test/val loss: [0.2755 0.3855 0.5278]

New lr: 1e-05
Epoch 42, loss = 0.3351
Mean test/val loss: 0.4005
[25, 50, 75] percentiles test/val loss: [0.2459 0.3485 0.474 ]

Epoch 44, loss = 0.3298
Mean test/val loss: 0.3972
[25, 50, 75] percentiles test/val loss: [0.2424 0.3459 0.4702]

Epoch 46, loss = 0.3263
Mean test/val loss: 0.3963
[25, 50, 75] percentiles test/val loss: [0.2409 0.3438 0.4669]

Epoch 48, loss = 0.3233
Mean test/val loss: 0.3956
[25, 50, 75] percentiles test/val loss: [0.2412 0.3424 0.4687]

Epoch 50, loss = 0.3208
Mean test/val loss: 0.3941
[25, 50, 75] percentiles test/val loss: [0.2406 0.3418 0.4687]

Epoch 52, loss = 0.3185
Mean test/val loss: 0.3940
[25, 50, 75] percentiles test/val loss: [0.2413 0.3407 0.4726]

Epoch 54, loss = 0.3163
Mean test/val loss: 0.3934
[25, 50, 75] percentiles test/val loss: [0.2405 0.3415 0.4661]

Epoch 56, loss = 0.3143
Mean test/val loss: 0.3928
[25, 50, 75] percentiles test/val loss: [0.2402 0.3411 0.4647]

Epoch 58, loss = 0.3124
Mean test/val loss: 0.3922
[25, 50, 75] percentiles test/val loss: [0.2397 0.341  0.4682]

Epoch 60, loss = 0.3107
Mean test/val loss: 0.3919
[25, 50, 75] percentiles test/val loss: [0.2406 0.3404 0.4673]

Epoch 62, loss = 0.3090
Mean test/val loss: 0.3926
[25, 50, 75] percentiles test/val loss: [0.238  0.3388 0.4694]

Epoch 64, loss = 0.3073
Mean test/val loss: 0.3918
[25, 50, 75] percentiles test/val loss: [0.2366 0.3409 0.4605]

Epoch 66, loss = 0.3057
Mean test/val loss: 0.3904
[25, 50, 75] percentiles test/val loss: [0.236  0.3395 0.4625]

Epoch 68, loss = 0.3042
Mean test/val loss: 0.3913
[25, 50, 75] percentiles test/val loss: [0.236  0.3414 0.4643]

Epoch 70, loss = 0.3028
Mean test/val loss: 0.3909
[25, 50, 75] percentiles test/val loss: [0.2358 0.3404 0.4639]

Epoch 72, loss = 0.3013
Mean test/val loss: 0.3893
[25, 50, 75] percentiles test/val loss: [0.2349 0.3394 0.4629]

Epoch 74, loss = 0.2999
Mean test/val loss: 0.3898
[25, 50, 75] percentiles test/val loss: [0.233  0.3412 0.4693]

Epoch 76, loss = 0.2985
Mean test/val loss: 0.3900
[25, 50, 75] percentiles test/val loss: [0.2344 0.3391 0.4634]

Epoch 78, loss = 0.2973
Mean test/val loss: 0.3893
[25, 50, 75] percentiles test/val loss: [0.2353 0.3362 0.4653]

Epoch 80, loss = 0.2959
Mean test/val loss: 0.3896
[25, 50, 75] percentiles test/val loss: [0.2353 0.3371 0.4619]


Total parameters: 26462256
Total training + validation time: 6.0 hours, 41.0 mins, and 45.400000000001455 secs
Final val loss: 0.38962683245539664

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_04_28_23 sample981: 0.33134955167770386
dataset_04_28_23 sample324: 0.35780683159828186
dataset_04_28_23 sample3464: 0.385059654712677
dataset_04_28_23 sample2834: 0.2501957416534424
dataset_04_28_23 sample1936: 0.29582273960113525
Loss: 0.324 +- 0.047

Downsampling (40%) Results:
dataset_04_28_23 sample1936-downsampling: 3.3003432750701904
dataset_04_28_23 sample2834-downsampling: 6.873236656188965
dataset_04_28_23 sample324-downsampling: 7.373810768127441
dataset_04_28_23 sample3464-downsampling: 5.3518218994140625
dataset_04_28_23 sample981-downsampling: 11.63055419921875
Loss: 6.906 +- 2.755

Removing /scratch/midway3/erschultz/ContactGNNEnergy0downsample
Original sampling (100%) Results:
dataset_04_28_23 sample1936-regular: 2.9301650524139404
dataset_04_28_23 sample2834-regular: 5.343327522277832
dataset_04_28_23 sample324-regular: 6.354585647583008
dataset_04_28_23 sample3464-regular: 5.723971366882324
dataset_04_28_23 sample981-regular: 6.307004928588867
Loss: 5.332 +- 1.258

Removing /scratch/midway3/erschultz/ContactGNNEnergy0regsample

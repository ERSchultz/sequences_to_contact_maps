#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_04_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy2', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, start_epoch=1, n_epochs=80, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=442, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/442', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/442/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/442/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/442/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f6a03278310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 15.702 minutes
Number of samples: 5000
Average num edges per graph:  61883.9736
Mean degree: [246.68 255.88 220.23 ... 252.09 216.5  256.  ] +- [ 9.13  0.37 26.94 ...  4.77 29.22  0.  ]

split sizes: train=4500, val=500, test=0, N=5000
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f69c40c2070>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 0.5712
Mean test/val loss: 0.5490
[25, 50, 75] percentiles test/val loss: [0.2677 0.4442 0.6961]

Epoch 4, loss = 0.4857
Mean test/val loss: 0.5307
[25, 50, 75] percentiles test/val loss: [0.25   0.4256 0.6621]

Epoch 6, loss = 0.4439
Mean test/val loss: 0.4426
[25, 50, 75] percentiles test/val loss: [0.217  0.3439 0.5516]

Epoch 8, loss = 0.4539
Mean test/val loss: 0.4551
[25, 50, 75] percentiles test/val loss: [0.2224 0.3618 0.5533]

Epoch 10, loss = 0.4154
Mean test/val loss: 0.4095
[25, 50, 75] percentiles test/val loss: [0.1945 0.3155 0.4902]

Epoch 12, loss = 0.3881
Mean test/val loss: 0.3925
[25, 50, 75] percentiles test/val loss: [0.183  0.3027 0.4736]

Epoch 14, loss = 0.3807
Mean test/val loss: 0.3735
[25, 50, 75] percentiles test/val loss: [0.1727 0.2819 0.4502]

Epoch 16, loss = 0.3552
Mean test/val loss: 0.3905
[25, 50, 75] percentiles test/val loss: [0.2163 0.2998 0.4547]

Epoch 18, loss = 0.3392
Mean test/val loss: 0.3690
[25, 50, 75] percentiles test/val loss: [0.1909 0.2987 0.4477]

Epoch 20, loss = 0.3300
Mean test/val loss: 0.3428
[25, 50, 75] percentiles test/val loss: [0.1671 0.2633 0.4027]

Epoch 22, loss = 0.4083
Mean test/val loss: 0.3608
[25, 50, 75] percentiles test/val loss: [0.1762 0.2765 0.4197]

Epoch 24, loss = 0.3361
Mean test/val loss: 0.3387
[25, 50, 75] percentiles test/val loss: [0.1645 0.2643 0.4021]

Epoch 26, loss = 0.3153
Mean test/val loss: 0.3354
[25, 50, 75] percentiles test/val loss: [0.1574 0.253  0.3942]

Epoch 28, loss = 0.3065
Mean test/val loss: 0.3206
[25, 50, 75] percentiles test/val loss: [0.1534 0.2444 0.3845]

Epoch 30, loss = 0.2976
Mean test/val loss: 0.3210
[25, 50, 75] percentiles test/val loss: [0.1522 0.2499 0.3798]

Epoch 32, loss = 0.2897
Mean test/val loss: 0.3175
[25, 50, 75] percentiles test/val loss: [0.1494 0.2434 0.3846]

Epoch 34, loss = 0.2858
Mean test/val loss: 0.3164
[25, 50, 75] percentiles test/val loss: [0.1467 0.2412 0.3773]

Epoch 36, loss = 0.2784
Mean test/val loss: 0.3069
[25, 50, 75] percentiles test/val loss: [0.1452 0.2342 0.3625]

Epoch 38, loss = 0.2748
Mean test/val loss: 0.3041
[25, 50, 75] percentiles test/val loss: [0.1465 0.2338 0.3667]

Epoch 40, loss = 0.2709
Mean test/val loss: 0.3062
[25, 50, 75] percentiles test/val loss: [0.1439 0.2382 0.3706]

New lr: 1e-05
Epoch 42, loss = 0.2435
Mean test/val loss: 0.2821
[25, 50, 75] percentiles test/val loss: [0.1313 0.2166 0.3354]

Epoch 44, loss = 0.2396
Mean test/val loss: 0.2803
[25, 50, 75] percentiles test/val loss: [0.1292 0.2145 0.3329]

Epoch 46, loss = 0.2369
Mean test/val loss: 0.2792
[25, 50, 75] percentiles test/val loss: [0.1287 0.2135 0.3322]

Epoch 48, loss = 0.2347
Mean test/val loss: 0.2777
[25, 50, 75] percentiles test/val loss: [0.1284 0.2134 0.3322]

Epoch 50, loss = 0.2327
Mean test/val loss: 0.2768
[25, 50, 75] percentiles test/val loss: [0.1289 0.2112 0.33  ]

Epoch 52, loss = 0.2309
Mean test/val loss: 0.2768
[25, 50, 75] percentiles test/val loss: [0.1286 0.2098 0.3296]

Epoch 54, loss = 0.2293
Mean test/val loss: 0.2757
[25, 50, 75] percentiles test/val loss: [0.1277 0.2083 0.3315]

Epoch 56, loss = 0.2279
Mean test/val loss: 0.2757
[25, 50, 75] percentiles test/val loss: [0.1277 0.21   0.3287]

Epoch 58, loss = 0.2266
Mean test/val loss: 0.2754
[25, 50, 75] percentiles test/val loss: [0.1272 0.2095 0.3282]

Epoch 60, loss = 0.2253
Mean test/val loss: 0.2746
[25, 50, 75] percentiles test/val loss: [0.1265 0.2081 0.3274]

Epoch 62, loss = 0.2242
Mean test/val loss: 0.2748
[25, 50, 75] percentiles test/val loss: [0.1275 0.2092 0.3295]

Epoch 64, loss = 0.2231
Mean test/val loss: 0.2737
[25, 50, 75] percentiles test/val loss: [0.1281 0.2085 0.328 ]

Epoch 66, loss = 0.2221
Mean test/val loss: 0.2734
[25, 50, 75] percentiles test/val loss: [0.1268 0.2073 0.3299]

Epoch 68, loss = 0.2211
Mean test/val loss: 0.2737
[25, 50, 75] percentiles test/val loss: [0.1263 0.2075 0.3274]

Epoch 70, loss = 0.2202
Mean test/val loss: 0.2743
[25, 50, 75] percentiles test/val loss: [0.1271 0.2078 0.3259]

Epoch 72, loss = 0.2193
Mean test/val loss: 0.2733
[25, 50, 75] percentiles test/val loss: [0.1253 0.2058 0.3243]

Epoch 74, loss = 0.2185
Mean test/val loss: 0.2727
[25, 50, 75] percentiles test/val loss: [0.1258 0.2046 0.3247]

Epoch 76, loss = 0.2177
Mean test/val loss: 0.2722
[25, 50, 75] percentiles test/val loss: [0.1261 0.2054 0.3256]

Epoch 78, loss = 0.2169
Mean test/val loss: 0.2724
[25, 50, 75] percentiles test/val loss: [0.1257 0.2063 0.3249]

Epoch 80, loss = 0.2162
Mean test/val loss: 0.2722
[25, 50, 75] percentiles test/val loss: [0.1254 0.2068 0.3222]


Total parameters: 26462000
Total training + validation time: 7.0 hours, 30.0 mins, and 32.599999999998545 secs
Final val loss: 0.27222844937443735

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_04_28_23 sample981: 0.5541126132011414
dataset_04_28_23 sample324: 0.5737701654434204
dataset_04_28_23 sample3464: 0.29999595880508423
dataset_04_28_23 sample2834: 0.40261438488960266
dataset_04_28_23 sample1936: 0.20195317268371582
Loss: 0.406 +- 0.144

Downsampling (40%) Results:
dataset_04_28_23 sample1936-downsampling: 7.11240816116333
dataset_04_28_23 sample2834-downsampling: 7.198666095733643
dataset_04_28_23 sample324-downsampling: 15.88783073425293
dataset_04_28_23 sample3464-downsampling: 5.719534873962402
dataset_04_28_23 sample981-downsampling: 11.051898956298828
Loss: 9.394 +- 3.7

Removing /scratch/midway3/erschultz/ContactGNNEnergy2downsample
Original sampling (100%) Results:
dataset_04_28_23 sample1936-regular: 6.726202487945557
dataset_04_28_23 sample2834-regular: 7.051537990570068
dataset_04_28_23 sample324-regular: 13.011994361877441
dataset_04_28_23 sample3464-regular: 5.878483295440674
dataset_04_28_23 sample981-regular: 12.99902629852295
Loss: 9.133 +- 3.185

Removing /scratch/midway3/erschultz/ContactGNNEnergy2regsample

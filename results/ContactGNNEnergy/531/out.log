#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=64, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(64, 8, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(64, 8, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(64, 8, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(64, 8, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=64, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=64, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=16384, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr_rank5', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy15', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=531, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 64], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[8, 8, 8, 8], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/531', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/531/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/531/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/531/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f9301970310>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True, rank=5)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True, rank=5),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 35.996 minutes
Number of samples: 10000
Average num edges per graph:  63539.8822
Mean degree: [246.36 254.75 249.55 ... 251.39 254.63 242.59] +- [ 9.11  0.58  6.48 ...  3.73  0.95 19.1 ]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [203, 6265, 4528, 7937, 5385, 9207, 3610, 2030, 5359, 392, 7358, 3013, 5242, 7635, 1408, 9365, 8107, 8340, 6135, 1838, 4982, 343, 7192, 3297, 5306, 3066, 3556, 3247, 4686, 3311, 3969, 3807, 3832, 9312, 2851, 3526, 4002, 4612, 9253, 2311, 4422, 3094, 5195, 4308, 4886, 5444, 3284, 763, 5579, 8633, 9143, 2434, 9894, 156, 1846, 2466, 7810, 6278, 2469, 1087, 9389, 2535, 4781, 6346, 7734, 134, 6333, 8199, 2279, 1313, 3970, 9496, 3181, 5339, 1478, 3397, 6655, 3953, 109, 4531, 5784, 2148, 8522, 7465, 9606, 495, 7439, 6040, 3945, 7492, 9380, 7100, 7771, 4584, 3860, 7640, 6343, 2099, 9991, 5771, 8727, 752]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f92bc7e0970>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.5706
Mean test/val loss: 1.4943
[25, 50, 75] percentiles test/val loss: [1.0154 1.4426 1.912 ]

Epoch 4, loss = 1.3187
Mean test/val loss: 1.2741
[25, 50, 75] percentiles test/val loss: [0.8595 1.1893 1.583 ]

Epoch 6, loss = 1.1588
Mean test/val loss: 1.1429
[25, 50, 75] percentiles test/val loss: [0.7666 1.0537 1.4288]

Epoch 8, loss = 1.0848
Mean test/val loss: 1.0617
[25, 50, 75] percentiles test/val loss: [0.7011 0.9769 1.3208]

Epoch 10, loss = 1.0398
Mean test/val loss: 1.0305
[25, 50, 75] percentiles test/val loss: [0.6809 0.947  1.2802]

Epoch 12, loss = 1.0080
Mean test/val loss: 0.9989
[25, 50, 75] percentiles test/val loss: [0.6587 0.9087 1.2505]

Epoch 14, loss = 0.9833
Mean test/val loss: 0.9742
[25, 50, 75] percentiles test/val loss: [0.6436 0.8833 1.2039]

Epoch 16, loss = 0.9656
Mean test/val loss: 0.9693
[25, 50, 75] percentiles test/val loss: [0.6422 0.8834 1.2061]

Epoch 18, loss = 0.9471
Mean test/val loss: 0.9556
[25, 50, 75] percentiles test/val loss: [0.6209 0.8686 1.2033]

Epoch 20, loss = 0.9329
Mean test/val loss: 0.9513
[25, 50, 75] percentiles test/val loss: [0.6276 0.8573 1.1863]

Epoch 22, loss = 0.9214
Mean test/val loss: 0.9452
[25, 50, 75] percentiles test/val loss: [0.616  0.8564 1.1775]

Epoch 24, loss = 0.9080
Mean test/val loss: 0.9215
[25, 50, 75] percentiles test/val loss: [0.6057 0.8396 1.1534]

Epoch 26, loss = 0.8966
Mean test/val loss: 0.9196
[25, 50, 75] percentiles test/val loss: [0.6031 0.8367 1.128 ]

Epoch 28, loss = 0.8857
Mean test/val loss: 0.9018
[25, 50, 75] percentiles test/val loss: [0.5817 0.8107 1.1238]

Epoch 30, loss = 0.8784
Mean test/val loss: 0.9011
[25, 50, 75] percentiles test/val loss: [0.5874 0.8181 1.1213]

Epoch 32, loss = 0.8671
Mean test/val loss: 0.8871
[25, 50, 75] percentiles test/val loss: [0.5723 0.802  1.0964]

Epoch 34, loss = 0.8613
Mean test/val loss: 0.8830
[25, 50, 75] percentiles test/val loss: [0.5753 0.7936 1.1004]

Epoch 36, loss = 0.8512
Mean test/val loss: 0.8949
[25, 50, 75] percentiles test/val loss: [0.5775 0.8046 1.1088]

Epoch 38, loss = 0.8463
Mean test/val loss: 0.8683
[25, 50, 75] percentiles test/val loss: [0.5619 0.7862 1.082 ]

Epoch 40, loss = 0.8360
Mean test/val loss: 0.8740
[25, 50, 75] percentiles test/val loss: [0.5577 0.789  1.0992]

New lr: 1e-05
Epoch 42, loss = 0.7783
Mean test/val loss: 0.8311
[25, 50, 75] percentiles test/val loss: [0.5361 0.747  1.0352]

Epoch 44, loss = 0.7709
Mean test/val loss: 0.8282
[25, 50, 75] percentiles test/val loss: [0.534  0.7398 1.0335]

Epoch 46, loss = 0.7657
Mean test/val loss: 0.8258
[25, 50, 75] percentiles test/val loss: [0.5351 0.7432 1.031 ]

Epoch 48, loss = 0.7613
Mean test/val loss: 0.8249
[25, 50, 75] percentiles test/val loss: [0.5334 0.7409 1.0261]

Epoch 50, loss = 0.7574
Mean test/val loss: 0.8237
[25, 50, 75] percentiles test/val loss: [0.5333 0.7379 1.0233]

Epoch 52, loss = 0.7538
Mean test/val loss: 0.8228
[25, 50, 75] percentiles test/val loss: [0.5317 0.7382 1.0233]

Epoch 54, loss = 0.7506
Mean test/val loss: 0.8221
[25, 50, 75] percentiles test/val loss: [0.5301 0.7395 1.018 ]

Epoch 56, loss = 0.7476
Mean test/val loss: 0.8199
[25, 50, 75] percentiles test/val loss: [0.5293 0.7364 1.0143]

Epoch 58, loss = 0.7446
Mean test/val loss: 0.8199
[25, 50, 75] percentiles test/val loss: [0.5344 0.7333 1.0193]

Epoch 60, loss = 0.7419
Mean test/val loss: 0.8188
[25, 50, 75] percentiles test/val loss: [0.5309 0.736  1.0155]

Epoch 62, loss = 0.7392
Mean test/val loss: 0.8185
[25, 50, 75] percentiles test/val loss: [0.5289 0.7321 1.0134]

Epoch 64, loss = 0.7367
Mean test/val loss: 0.8186
[25, 50, 75] percentiles test/val loss: [0.5322 0.7368 1.0107]

Epoch 66, loss = 0.7342
Mean test/val loss: 0.8167
[25, 50, 75] percentiles test/val loss: [0.5262 0.7296 1.0093]

Epoch 68, loss = 0.7318
Mean test/val loss: 0.8164
[25, 50, 75] percentiles test/val loss: [0.5276 0.7296 1.0138]

Epoch 70, loss = 0.7295
Mean test/val loss: 0.8179
[25, 50, 75] percentiles test/val loss: [0.5297 0.7319 1.0125]


Total parameters: 26462000
Total training + validation time: 15.0 hours, 17.0 mins, and 6.400000000001455 secs
Final val loss: 0.8178569425269961

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample1050: 2.0067849159240723
dataset_09_28_23 sample7802: 0.7364015579223633
dataset_09_28_23 sample156: 0.7581629753112793
dataset_09_28_23 sample2452: 0.3803330063819885
dataset_09_28_23 sample752: 0.025138162076473236
MSE Loss: 0.781 +- 0.669

Downsampling (200k) Results:
dataset_09_28_23 sample1050-downsampling: 63.69194030761719
dataset_09_28_23 sample156-downsampling: 112.46839904785156
dataset_09_28_23 sample2452-downsampling: 21.207191467285156
dataset_09_28_23 sample752-downsampling: 1.0405001640319824
dataset_09_28_23 sample7802-downsampling: 22.664796829223633
Loss: 44.215 +- 39.738

Removing /scratch/midway3/erschultz/ContactGNNEnergy15downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1050-regular: 66.26721954345703
dataset_09_28_23 sample156-regular: 112.14381408691406
dataset_09_28_23 sample2452-regular: 23.193260192871094
dataset_09_28_23 sample752-regular: 2.6355319023132324
dataset_09_28_23 sample7802-regular: 22.575042724609375
Loss: 45.363 +- 39.327

Removing /scratch/midway3/erschultz/ContactGNNEnergy15regsample

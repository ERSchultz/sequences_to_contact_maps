#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=8, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_diagnorm', 'ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_8'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy12', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3, 4, 5], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing='log', kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse', w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=533, pretrain_id=None, resume_training=False, k=8, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/533', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/533/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/533/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/533/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_loss at 0x7f742e403280>, channels=1, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'ContactDistance(norm=False, diag_norm=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=8, normalize=False, sign_net=True)'], edge_dim=4, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, diag_norm=True),
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=8, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 27.87 minutes
Number of samples: 10000
Average num edges per graph:  63539.8822
Mean degree: [246.36 254.75 249.55 ... 251.39 254.63 242.59] +- [ 9.11  0.58  6.48 ...  3.73  0.95 19.1 ]

split sizes: train=9000, val=1000, test=0, N=10000
First 100 val samples: [343, 7227, 3736, 5258, 7916, 1687, 6088, 7937, 4018, 5444, 7997, 4197, 5468, 1875, 8270, 9691, 144, 9679, 3347, 3955, 7795, 727, 907, 261, 3817, 8631, 6509, 9401, 8922, 4851, 8282, 1717, 4928, 7640, 1845, 2287, 6473, 4816, 4810, 6477, 9257, 6040, 5940, 2192, 4705, 3869, 5057, 6239, 8402, 9053, 5757, 3324, 6831, 9520, 4684, 2175, 3687, 2741, 8194, 7852, 1556, 4316, 3175, 4886, 4773, 2076, 3469, 7771, 5542, 9822, 8211, 3832, 1565, 5903, 7561, 1644, 1478, 7415, 999, 5402, 1948, 9486, 8713, 3181, 649, 7465, 7802, 1958, 3610, 6343, 5443, 2131, 203, 2738, 6563, 9229, 7933, 5116, 5410, 3114, 3201, 16]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f73ed201a90>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.1904
Mean test/val loss: 1.1124
[25, 50, 75] percentiles test/val loss: [0.7235 1.0222 1.3831]

Epoch 4, loss = 1.0035
Mean test/val loss: 0.9540
[25, 50, 75] percentiles test/val loss: [0.5951 0.8539 1.1995]

Epoch 6, loss = 0.9066
Mean test/val loss: 0.8846
[25, 50, 75] percentiles test/val loss: [0.5481 0.8016 1.1139]

Epoch 8, loss = 0.8430
Mean test/val loss: 0.8326
[25, 50, 75] percentiles test/val loss: [0.4991 0.7416 1.0487]

Epoch 10, loss = 0.8016
Mean test/val loss: 0.8111
[25, 50, 75] percentiles test/val loss: [0.5089 0.7261 1.0079]

Epoch 12, loss = 0.7724
Mean test/val loss: 0.7784
[25, 50, 75] percentiles test/val loss: [0.4705 0.6827 0.9822]

Epoch 14, loss = 0.7418
Mean test/val loss: 0.7335
[25, 50, 75] percentiles test/val loss: [0.4456 0.6516 0.9267]

Epoch 16, loss = 0.7216
Mean test/val loss: 0.7104
[25, 50, 75] percentiles test/val loss: [0.4344 0.6354 0.8843]

Epoch 18, loss = 0.7048
Mean test/val loss: 0.7011
[25, 50, 75] percentiles test/val loss: [0.4233 0.6262 0.8783]

Epoch 20, loss = 0.6868
Mean test/val loss: 0.6943
[25, 50, 75] percentiles test/val loss: [0.4242 0.6186 0.867 ]

Epoch 22, loss = 0.6721
Mean test/val loss: 0.6826
[25, 50, 75] percentiles test/val loss: [0.4206 0.6084 0.8527]

Epoch 24, loss = 0.6573
Mean test/val loss: 0.7582
[25, 50, 75] percentiles test/val loss: [0.4487 0.688  0.9662]

Epoch 26, loss = 0.6461
Mean test/val loss: 0.6596
[25, 50, 75] percentiles test/val loss: [0.4053 0.5871 0.8306]

Epoch 28, loss = 0.6326
Mean test/val loss: 0.6591
[25, 50, 75] percentiles test/val loss: [0.4055 0.5936 0.828 ]

Epoch 30, loss = 0.6231
Mean test/val loss: 0.6463
[25, 50, 75] percentiles test/val loss: [0.4026 0.5812 0.8091]

Epoch 32, loss = 0.6125
Mean test/val loss: 0.6328
[25, 50, 75] percentiles test/val loss: [0.3873 0.5638 0.7988]

Epoch 34, loss = 0.6015
Mean test/val loss: 0.6445
[25, 50, 75] percentiles test/val loss: [0.3996 0.5748 0.809 ]

Epoch 36, loss = 0.5960
Mean test/val loss: 0.6244
[25, 50, 75] percentiles test/val loss: [0.3903 0.5468 0.7727]

Epoch 38, loss = 0.5837
Mean test/val loss: 0.6299
[25, 50, 75] percentiles test/val loss: [0.3853 0.5608 0.7824]

Epoch 40, loss = 0.5776
Mean test/val loss: 0.6269
[25, 50, 75] percentiles test/val loss: [0.3858 0.556  0.7991]

New lr: 1e-05
Epoch 42, loss = 0.5100
Mean test/val loss: 0.5593
[25, 50, 75] percentiles test/val loss: [0.3497 0.5013 0.6995]

Epoch 44, loss = 0.5002
Mean test/val loss: 0.5551
[25, 50, 75] percentiles test/val loss: [0.3481 0.4969 0.6883]

Epoch 46, loss = 0.4935
Mean test/val loss: 0.5511
[25, 50, 75] percentiles test/val loss: [0.3454 0.4957 0.6828]

Epoch 48, loss = 0.4879
Mean test/val loss: 0.5497
[25, 50, 75] percentiles test/val loss: [0.3458 0.4952 0.6777]

Epoch 50, loss = 0.4830
Mean test/val loss: 0.5475
[25, 50, 75] percentiles test/val loss: [0.3442 0.492  0.6751]

Epoch 52, loss = 0.4785
Mean test/val loss: 0.5464
[25, 50, 75] percentiles test/val loss: [0.3442 0.4911 0.6715]

Epoch 54, loss = 0.4744
Mean test/val loss: 0.5437
[25, 50, 75] percentiles test/val loss: [0.3426 0.4888 0.6653]

Epoch 56, loss = 0.4706
Mean test/val loss: 0.5428
[25, 50, 75] percentiles test/val loss: [0.3418 0.487  0.6668]

Epoch 58, loss = 0.4670
Mean test/val loss: 0.5413
[25, 50, 75] percentiles test/val loss: [0.3421 0.4863 0.669 ]

Epoch 60, loss = 0.4637
Mean test/val loss: 0.5409
[25, 50, 75] percentiles test/val loss: [0.3404 0.4866 0.6662]

Epoch 62, loss = 0.4608
Mean test/val loss: 0.5388
[25, 50, 75] percentiles test/val loss: [0.3409 0.4857 0.6613]

Epoch 64, loss = 0.4574
Mean test/val loss: 0.5373
[25, 50, 75] percentiles test/val loss: [0.3409 0.4815 0.6638]

Epoch 66, loss = 0.4549
Mean test/val loss: 0.5365
[25, 50, 75] percentiles test/val loss: [0.3388 0.4835 0.6614]

Epoch 68, loss = 0.4521
Mean test/val loss: 0.5364
[25, 50, 75] percentiles test/val loss: [0.3409 0.4792 0.6606]

Epoch 70, loss = 0.4497
Mean test/val loss: 0.5358
[25, 50, 75] percentiles test/val loss: [0.3394 0.4785 0.6553]


Total parameters: 51479728
Total training + validation time: 20.0 hours, 31.0 mins, and 1.3999999999941792 secs
Final val loss: 0.5358091838210821

split sizes: train=9000, val=1000, test=0, N=10000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample1050: 1.7171692848205566
dataset_09_28_23 sample7802: 0.4673171639442444
dataset_09_28_23 sample156: 0.577153205871582
dataset_09_28_23 sample2452: 0.22113054990768433
dataset_09_28_23 sample752: 0.008015422150492668
MSE Loss: 0.598 +- 0.593

Downsampling (200k) Results:
dataset_09_28_23 sample1050-downsampling: 110.78749084472656
dataset_09_28_23 sample156-downsampling: 99.41096496582031
dataset_09_28_23 sample2452-downsampling: 25.52716827392578
dataset_09_28_23 sample752-downsampling: 0.46132415533065796
dataset_09_28_23 sample7802-downsampling: 28.70996856689453
Loss: 52.979 +- 43.814

Removing /scratch/midway3/erschultz/ContactGNNEnergy12downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1050-regular: 100.57106018066406
dataset_09_28_23 sample156-regular: 101.37754821777344
dataset_09_28_23 sample2452-regular: 25.323974609375
dataset_09_28_23 sample752-regular: 0.7733363509178162
dataset_09_28_23 sample7802-regular: 28.42559051513672
Loss: 51.294 +- 41.681

Removing /scratch/midway3/erschultz/ContactGNNEnergy12regsample

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_11_21_23_hmec'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy11', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='sweeprand_log_inf', sweep_choices=[2, 3], y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=619, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/619', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/619/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/619/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/619/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7f24cc9c8670>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 14.055 minutes
Number of samples: 5000
Average num edges per graph:  65147.4676
Mean degree: [254.16 255.   254.99 ... 254.96 255.   255.  ] +- [2.16 0.   0.09 ... 0.21 0.   0.  ]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f24a286ebb0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.6262
Mean test/val loss: 1.5958
[25, 50, 75] percentiles test/val loss: [1.0628 1.567  2.0458]

Epoch 4, loss = 1.4448
Mean test/val loss: 1.4624
[25, 50, 75] percentiles test/val loss: [0.9634 1.4107 1.8639]

Epoch 6, loss = 1.3755
Mean test/val loss: 1.3724
[25, 50, 75] percentiles test/val loss: [0.8726 1.3143 1.7583]

Epoch 8, loss = 1.2506
Mean test/val loss: 1.2681
[25, 50, 75] percentiles test/val loss: [0.7964 1.1919 1.6284]

Epoch 10, loss = 1.1992
Mean test/val loss: 1.1916
[25, 50, 75] percentiles test/val loss: [0.7411 1.1278 1.5416]

Epoch 12, loss = 1.1626
Mean test/val loss: 1.1889
[25, 50, 75] percentiles test/val loss: [0.7515 1.1344 1.5225]

Epoch 14, loss = 1.1316
Mean test/val loss: 1.1419
[25, 50, 75] percentiles test/val loss: [0.707  1.0518 1.4734]

Epoch 16, loss = 1.1123
Mean test/val loss: 1.1543
[25, 50, 75] percentiles test/val loss: [0.7185 1.0939 1.4587]

Epoch 18, loss = 1.0921
Mean test/val loss: 1.1020
[25, 50, 75] percentiles test/val loss: [0.6773 1.0292 1.4116]

Epoch 20, loss = 1.0817
Mean test/val loss: 1.1012
[25, 50, 75] percentiles test/val loss: [0.6788 1.02   1.401 ]

Epoch 22, loss = 1.0609
Mean test/val loss: 1.0910
[25, 50, 75] percentiles test/val loss: [0.6817 1.0194 1.3878]

Epoch 24, loss = 1.0492
Mean test/val loss: 1.0784
[25, 50, 75] percentiles test/val loss: [0.6614 0.9884 1.3833]

Epoch 26, loss = 1.0370
Mean test/val loss: 1.0777
[25, 50, 75] percentiles test/val loss: [0.659  1.0086 1.3796]

Epoch 28, loss = 1.0240
Mean test/val loss: 1.0518
[25, 50, 75] percentiles test/val loss: [0.6376 0.9742 1.3573]

Epoch 30, loss = 1.0159
Mean test/val loss: 1.0625
[25, 50, 75] percentiles test/val loss: [0.6571 0.9935 1.3689]

Epoch 32, loss = 1.0051
Mean test/val loss: 1.0416
[25, 50, 75] percentiles test/val loss: [0.6248 0.9655 1.3456]

Epoch 34, loss = 0.9950
Mean test/val loss: 1.0544
[25, 50, 75] percentiles test/val loss: [0.6462 0.9816 1.3493]

Epoch 36, loss = 0.9871
Mean test/val loss: 1.0407
[25, 50, 75] percentiles test/val loss: [0.6309 0.9629 1.3492]

Epoch 38, loss = 0.9756
Mean test/val loss: 1.0292
[25, 50, 75] percentiles test/val loss: [0.6227 0.9488 1.3301]

Epoch 40, loss = 0.9701
Mean test/val loss: 1.0229
[25, 50, 75] percentiles test/val loss: [0.615  0.9495 1.3217]

New lr: 1e-05
Epoch 42, loss = 0.9093
Mean test/val loss: 0.9798
[25, 50, 75] percentiles test/val loss: [0.5924 0.9036 1.2694]

Epoch 44, loss = 0.8984
Mean test/val loss: 0.9759
[25, 50, 75] percentiles test/val loss: [0.5896 0.8886 1.259 ]

Epoch 46, loss = 0.8912
Mean test/val loss: 0.9738
[25, 50, 75] percentiles test/val loss: [0.5855 0.8913 1.263 ]

Epoch 48, loss = 0.8849
Mean test/val loss: 0.9706
[25, 50, 75] percentiles test/val loss: [0.5802 0.8873 1.2563]

Epoch 50, loss = 0.8792
Mean test/val loss: 0.9688
[25, 50, 75] percentiles test/val loss: [0.5847 0.8821 1.2477]

Epoch 52, loss = 0.8740
Mean test/val loss: 0.9699
[25, 50, 75] percentiles test/val loss: [0.5732 0.8848 1.2569]

Epoch 54, loss = 0.8692
Mean test/val loss: 0.9670
[25, 50, 75] percentiles test/val loss: [0.577  0.8814 1.2543]

Epoch 56, loss = 0.8645
Mean test/val loss: 0.9653
[25, 50, 75] percentiles test/val loss: [0.5788 0.8835 1.2582]

Epoch 58, loss = 0.8601
Mean test/val loss: 0.9653
[25, 50, 75] percentiles test/val loss: [0.5732 0.8793 1.2514]

Epoch 60, loss = 0.8559
Mean test/val loss: 0.9658
[25, 50, 75] percentiles test/val loss: [0.58   0.8868 1.2523]


Total parameters: 51479472
Total training + validation time: 8.0 hours, 39.0 mins, and 8.200000000000728 secs
Final val loss: 0.9657867152020335

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_11_21_23_hmec sample981: 1.05906081199646
dataset_11_21_23_hmec sample324: 0.7844730615615845
dataset_11_21_23_hmec sample3464: 1.0913184881210327
dataset_11_21_23_hmec sample2834: 1.0146019458770752
dataset_11_21_23_hmec sample1936: 0.4756483733654022
MSE_log: 0.885 +- 0.231

Downsampling (200k) Results:
dataset_11_21_23_hmec sample1936-downsampling: 15.172866821289062
dataset_11_21_23_hmec sample2834-downsampling: 19.466468811035156
dataset_11_21_23_hmec sample324-downsampling: 12.532745361328125
dataset_11_21_23_hmec sample3464-downsampling: 20.975099563598633
dataset_11_21_23_hmec sample981-downsampling: 24.78135871887207
Loss: 18.586 +- 4.316

Removing /scratch/midway3/erschultz/ContactGNNEnergy11downsample
Original sampling (400k) Results:

#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_11_23_23_imr90'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy12', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=None, start_epoch=1, n_epochs=60, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=613, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=False, input_L_to_D_mode='meandist', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/613', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/613/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/613/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/613/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7f0610127670>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 18.079 minutes
Number of samples: 5000
Average num edges per graph:  64981.1348
Mean degree: [252.48 254.99 222.62 ... 253.36 255.   255.  ] +- [ 4.72  0.09 27.59 ...  4.72  0.    0.  ]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f05d9f07070>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.5950
Mean test/val loss: 1.5665
[25, 50, 75] percentiles test/val loss: [1.1094 1.5154 1.958 ]

Epoch 4, loss = 1.3972
Mean test/val loss: 1.3860
[25, 50, 75] percentiles test/val loss: [0.9948 1.384  1.7317]

Epoch 6, loss = 1.2759
Mean test/val loss: 1.3007
[25, 50, 75] percentiles test/val loss: [0.9113 1.2826 1.6441]

Epoch 8, loss = 1.1907
Mean test/val loss: 1.1971
[25, 50, 75] percentiles test/val loss: [0.8375 1.1449 1.4985]

Epoch 10, loss = 1.0728
Mean test/val loss: 1.0859
[25, 50, 75] percentiles test/val loss: [0.7734 1.0091 1.3608]

Epoch 12, loss = 1.0195
Mean test/val loss: 1.0668
[25, 50, 75] percentiles test/val loss: [0.7329 0.9839 1.3446]

Epoch 14, loss = 0.9840
Mean test/val loss: 1.0095
[25, 50, 75] percentiles test/val loss: [0.6994 0.9464 1.272 ]

Epoch 16, loss = 0.9551
Mean test/val loss: 0.9946
[25, 50, 75] percentiles test/val loss: [0.692  0.9295 1.251 ]

Epoch 18, loss = 0.9335
Mean test/val loss: 0.9963
[25, 50, 75] percentiles test/val loss: [0.6959 0.9392 1.2471]

Epoch 20, loss = 0.9137
Mean test/val loss: 0.9764
[25, 50, 75] percentiles test/val loss: [0.6581 0.9062 1.2344]

Epoch 22, loss = 0.8958
Mean test/val loss: 0.9539
[25, 50, 75] percentiles test/val loss: [0.6408 0.8871 1.2265]

Epoch 24, loss = 0.8806
Mean test/val loss: 0.9391
[25, 50, 75] percentiles test/val loss: [0.652  0.8797 1.188 ]

Epoch 26, loss = 0.8673
Mean test/val loss: 0.9335
[25, 50, 75] percentiles test/val loss: [0.6448 0.8647 1.1789]

Epoch 28, loss = 0.8532
Mean test/val loss: 0.9321
[25, 50, 75] percentiles test/val loss: [0.6371 0.8686 1.1849]

Epoch 30, loss = 0.8402
Mean test/val loss: 0.9130
[25, 50, 75] percentiles test/val loss: [0.6111 0.8579 1.178 ]

Epoch 32, loss = 0.8312
Mean test/val loss: 0.9018
[25, 50, 75] percentiles test/val loss: [0.6177 0.8447 1.1434]

Epoch 34, loss = 0.8185
Mean test/val loss: 0.8877
[25, 50, 75] percentiles test/val loss: [0.598  0.8354 1.128 ]

Epoch 36, loss = 0.8078
Mean test/val loss: 0.9034
[25, 50, 75] percentiles test/val loss: [0.6077 0.8432 1.1637]

Epoch 38, loss = 0.7975
Mean test/val loss: 0.8991
[25, 50, 75] percentiles test/val loss: [0.6045 0.8504 1.1308]

Epoch 40, loss = 0.7892
Mean test/val loss: 0.8658
[25, 50, 75] percentiles test/val loss: [0.5838 0.8061 1.1092]

New lr: 1e-05
Epoch 42, loss = 0.7234
Mean test/val loss: 0.8287
[25, 50, 75] percentiles test/val loss: [0.542  0.7752 1.0574]

Epoch 44, loss = 0.7130
Mean test/val loss: 0.8271
[25, 50, 75] percentiles test/val loss: [0.5409 0.7702 1.0576]

Epoch 46, loss = 0.7055
Mean test/val loss: 0.8243
[25, 50, 75] percentiles test/val loss: [0.5394 0.7692 1.0535]

Epoch 48, loss = 0.6991
Mean test/val loss: 0.8237
[25, 50, 75] percentiles test/val loss: [0.5395 0.7615 1.0547]

Epoch 50, loss = 0.6933
Mean test/val loss: 0.8226
[25, 50, 75] percentiles test/val loss: [0.5366 0.7636 1.0503]

Epoch 52, loss = 0.6879
Mean test/val loss: 0.8214
[25, 50, 75] percentiles test/val loss: [0.5379 0.7678 1.0478]

Epoch 54, loss = 0.6828
Mean test/val loss: 0.8227
[25, 50, 75] percentiles test/val loss: [0.5382 0.7623 1.0626]

Epoch 56, loss = 0.6779
Mean test/val loss: 0.8236
[25, 50, 75] percentiles test/val loss: [0.5414 0.7682 1.0513]

Epoch 58, loss = 0.6732
Mean test/val loss: 0.8233
[25, 50, 75] percentiles test/val loss: [0.54   0.7696 1.0482]

Epoch 60, loss = 0.6689
Mean test/val loss: 0.8219
[25, 50, 75] percentiles test/val loss: [0.5436 0.7628 1.047 ]


Total parameters: 51479472
Total training + validation time: 9.0 hours, 45.0 mins, and 40.69999999999709 secs
Final val loss: 0.8219235099256038

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_11_23_23_imr90 sample981: 1.18545401096344
dataset_11_23_23_imr90 sample324: 0.9324660301208496
dataset_11_23_23_imr90 sample3464: 0.6609054803848267
dataset_11_23_23_imr90 sample2834: 0.9219210147857666
dataset_11_23_23_imr90 sample1936: 0.5107247829437256
MSE_log: 0.842 +- 0.235

Downsampling (200k) Results:
Original sampling (400k) Results:

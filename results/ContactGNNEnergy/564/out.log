#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy6', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log_and_mse_kth_diagonal', loss_k=2, lambda1=1.0, lambda2=0.01, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=564, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=True, input_L_to_D_mode='subtract', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/564', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/564/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/564/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/564/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<scripts.neural_nets.losses.MSE_log_and_MSE_kth_diagonal object at 0x7f3aa9882820>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 17.47 minutes
Number of samples: 5000
Average num edges per graph:  64202.6016
Mean degree: [249.86 254.38 247.02 ... 253.91 251.64 251.34] +- [6.31 0.99 8.25 ... 2.04 5.21 3.97]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7f3aa98823d0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 2.5978
Mean test/val loss: 2.5388
[25, 50, 75] percentiles test/val loss: [1.5934 2.3406 3.1345]

Epoch 4, loss = 2.4197
Mean test/val loss: 2.3824
[25, 50, 75] percentiles test/val loss: [1.4765 2.1493 2.9175]

Epoch 6, loss = 2.3025
Mean test/val loss: 2.2362
[25, 50, 75] percentiles test/val loss: [1.3884 1.9956 2.7733]

Epoch 8, loss = 2.1267
Mean test/val loss: 2.0705
[25, 50, 75] percentiles test/val loss: [1.3223 1.9019 2.4406]

Epoch 10, loss = 2.0333
Mean test/val loss: 2.0244
[25, 50, 75] percentiles test/val loss: [1.2847 1.8233 2.4352]

Epoch 12, loss = 2.7487
Mean test/val loss: 2.5389
[25, 50, 75] percentiles test/val loss: [1.6176 2.3513 3.1875]

Epoch 14, loss = 5476.6437
Mean test/val loss: 3.6005
[25, 50, 75] percentiles test/val loss: [2.2353 3.2938 4.7183]

Epoch 16, loss = 2.9401
Mean test/val loss: 2.5745
[25, 50, 75] percentiles test/val loss: [1.6094 2.3686 3.1798]

Epoch 18, loss = 2.4333
Mean test/val loss: 2.2103
[25, 50, 75] percentiles test/val loss: [1.4229 1.9839 2.6969]

Epoch 20, loss = 2.3933
Mean test/val loss: 2.1617
[25, 50, 75] percentiles test/val loss: [1.395  1.9587 2.6245]

Epoch 22, loss = 3.9132
Mean test/val loss: 2.5622
[25, 50, 75] percentiles test/val loss: [1.5627 2.3919 3.2333]

Epoch 24, loss = 2.6244
Mean test/val loss: 2.5819
[25, 50, 75] percentiles test/val loss: [1.5944 2.3552 3.2899]

Epoch 26, loss = 2.2067
Mean test/val loss: 2.0021
[25, 50, 75] percentiles test/val loss: [1.2899 1.8249 2.4276]

Epoch 28, loss = 2.1351
Mean test/val loss: 1.9874
[25, 50, 75] percentiles test/val loss: [1.2698 1.8075 2.3577]

Epoch 30, loss = 1.9983
Mean test/val loss: 2.1388
[25, 50, 75] percentiles test/val loss: [1.4089 1.9392 2.5871]

Epoch 32, loss = 837.0927
Mean test/val loss: 37.2454
[25, 50, 75] percentiles test/val loss: [27.2551 38.3199 48.1589]

Epoch 34, loss = 2.6378
Mean test/val loss: 2.5813
[25, 50, 75] percentiles test/val loss: [1.6174 2.3577 3.2316]

Epoch 36, loss = 2.5883
Mean test/val loss: 2.4781
[25, 50, 75] percentiles test/val loss: [1.5317 2.2199 3.1137]

Epoch 38, loss = 2.2247
Mean test/val loss: 2.0897
[25, 50, 75] percentiles test/val loss: [1.315  1.8356 2.5028]

Epoch 40, loss = 1.9629
Mean test/val loss: 1.9458
[25, 50, 75] percentiles test/val loss: [1.2108 1.7729 2.3609]

New lr: 1e-05
Epoch 42, loss = 1.6878
Mean test/val loss: 1.7089
[25, 50, 75] percentiles test/val loss: [1.0644 1.4978 2.0227]

Epoch 44, loss = 1.6072
Mean test/val loss: 1.6372
[25, 50, 75] percentiles test/val loss: [1.0013 1.4361 1.9753]

Epoch 46, loss = 1.5576
Mean test/val loss: 1.6164
[25, 50, 75] percentiles test/val loss: [0.9802 1.3984 1.9061]

Epoch 48, loss = 1.5206
Mean test/val loss: 1.5478
[25, 50, 75] percentiles test/val loss: [0.9526 1.3525 1.8628]

Epoch 50, loss = 1.4883
Mean test/val loss: 1.5433
[25, 50, 75] percentiles test/val loss: [0.9567 1.3418 1.8482]

Epoch 52, loss = 1.4624
Mean test/val loss: 1.5203
[25, 50, 75] percentiles test/val loss: [0.9522 1.3248 1.7991]

Epoch 54, loss = 1.4392
Mean test/val loss: 1.5068
[25, 50, 75] percentiles test/val loss: [0.9299 1.2982 1.81  ]

Epoch 56, loss = 1.4189
Mean test/val loss: 1.4818
[25, 50, 75] percentiles test/val loss: [0.9263 1.2812 1.7739]

Epoch 58, loss = 1.4003
Mean test/val loss: 1.4878
[25, 50, 75] percentiles test/val loss: [0.9293 1.2861 1.7898]

Epoch 60, loss = 1.3788
Mean test/val loss: 1.4748
[25, 50, 75] percentiles test/val loss: [0.9207 1.2775 1.7638]

Epoch 62, loss = 1.3626
Mean test/val loss: 1.4464
[25, 50, 75] percentiles test/val loss: [0.8934 1.2454 1.7398]

Epoch 64, loss = 1.3466
Mean test/val loss: 1.4491
[25, 50, 75] percentiles test/val loss: [0.8841 1.2487 1.7399]

Epoch 66, loss = 1.3322
Mean test/val loss: 1.4452
[25, 50, 75] percentiles test/val loss: [0.888  1.2513 1.7363]

Epoch 68, loss = 1.3167
Mean test/val loss: 1.4020
[25, 50, 75] percentiles test/val loss: [0.8585 1.1936 1.6837]

Epoch 70, loss = 1.3018
Mean test/val loss: 1.4309
[25, 50, 75] percentiles test/val loss: [0.8806 1.2343 1.715 ]


Total parameters: 51479472
Total training + validation time: 20.0 hours, 39.0 mins, and 4.600000000005821 secs
Final val loss: 1.4308760355710983

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample981: 0.3007558844983578
dataset_09_28_23 sample324: 3.118158280849457
dataset_09_28_23 sample3464: 1.6536418199539185
dataset_09_28_23 sample2834: 4.325852632522583
dataset_09_28_23 sample1936: 1.3353204876184464
Loss1: 1.314, Loss2: 0.833
MSE_log+MSE_k_diag: 2.147 +- 1.414

Downsampling (200k) Results:
dataset_09_28_23 sample1936-downsampling: 16.266267776489258
dataset_09_28_23 sample2834-downsampling: 62.316986083984375
dataset_09_28_23 sample324-downsampling: 97.37967681884766
dataset_09_28_23 sample3464-downsampling: 33.6158447265625
dataset_09_28_23 sample981-downsampling: 5.530816555023193
Loss: 43.022 +- 33.278

Removing /scratch/midway3/erschultz/ContactGNNEnergy6downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1936-regular: 15.878751754760742
dataset_09_28_23 sample2834-regular: 62.21477127075195
dataset_09_28_23 sample324-regular: 88.75359344482422
dataset_09_28_23 sample3464-regular: 32.08668899536133
dataset_09_28_23 sample981-regular: 5.124968528747559
Loss: 40.812 +- 30.75

Removing /scratch/midway3/erschultz/ContactGNNEnergy6regsample

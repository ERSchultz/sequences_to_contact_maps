#### ARCHITECTURE ####
Node Encoder:
 None 

Linear:
 Linear(in_features=10, out_features=128, bias=True) 

Edge Encoder:
 None 

Model:
 Sequential(
  (0): WeightedGATv2Conv(128, 16, heads=8)
  (1): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (2): WeightedGATv2Conv(128, 16, heads=8)
  (3): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (4): WeightedGATv2Conv(128, 16, heads=8)
  (5): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
  (6): WeightedGATv2Conv(128, 16, heads=8)
  (7): MLP(
  (model): Sequential(
    (0): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=128, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=1000, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): LinearBlock(
      (model): Sequential(
        (0): Linear(in_features=1000, out_features=128, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
)
) 

Head L:
 None 
 Bilinear 

Head D:
 None 
 Sequential(
  (0): MLP(
    (model): Sequential(
      (0): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=32768, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (3): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (4): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (5): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=1000, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (6): LinearBlock(
        (model): Sequential(
          (0): Linear(in_features=1000, out_features=512, bias=True)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
  )
  (1): FillDiagonalsFromArray()
) 

Namespace(GNN_mode=True, transforms=[], pre_transforms=['ContactDistance_corr', 'MeanContactDistance', 'MeanContactDistance_bonded', 'AdjPCs_10'], sparsify_threshold=None, sparsify_threshold_upper=None, top_k=None, use_node_features=False, use_edge_weights=False, use_edge_attr=True, keep_zero_edges=False, data_folder=['/project2/depablo/erschultz/dataset_09_28_23'], scratch='/scratch/midway3/erschultz', root_name='ContactGNNEnergy4', delete_root=False, toxx=False, toxx_mode='mean', y_preprocessing='log_inf', sweep_choices=None, y_zero_diag_count=0, log_preprocessing=None, output_preprocesing=None, kr=False, mean_filt=None, rescale=2, gated=False, preprocessing_norm='mean_fill', min_subtraction=True, x_reshape=True, ydtype=torch.float32, y_reshape=True, crop=None, classes=10, move_data_to_scratch=False, use_scratch_parallel=False, plaid_score_cutoff=None, split_percents=[0.9, 0.1, 0.0], split_sizes=None, random_split=True, shuffle=True, batch_size=1, num_workers=4, max_sample=5000, start_epoch=1, n_epochs=70, save_mod=5, print_mod=2, lr=0.0001, min_lr=1e-06, weight_decay=0.0, gpus=1, scheduler='MultiStepLR', milestones=[40], gamma=0.1, patience=10, loss='mse_log', loss_k=2, lambda1=1.0, lambda2=1.0, w_reg=None, reg_lambda=0.1, autoencoder_mode=False, verbose=False, print_params=True, output_mode='energy_sym_diag', model_type='ContactGNNEnergy', id=561, pretrain_id=None, resume_training=False, k=10, m=512, seed=42, act='leaky', inner_act='leaky', out_act='leaky', training_norm=None, dropout=0.0, parameter_sharing=False, use_bias=True, input_L_to_D=True, input_L_to_D_mode='subtract', use_sign_net=False, use_sign_plus=True, message_passing='weighted_GAT', head_architecture='bilinear', head_architecture_2='fc-fill_512', head_hidden_sizes_list=[1000, 1000, 1000, 1000, 1000, 1000], encoder_hidden_sizes_list=None, inner_hidden_sizes_list=None, edge_encoder_hidden_sizes_list=None, update_hidden_sizes_list=[1000, 1000, 1000, 1000, 128], head_act='leaky', num_heads=8, concat_heads=True, max_diagonal=None, mlp_model_id=None, kernel_w_list=None, hidden_sizes_list=[16, 16, 16, 16], nf=None, dilation_list=None, dilation_list_trunk=None, bottleneck=None, dilation_list_head=None, down_sampling=None, plot=True, plot_predictions=True, bonded_path=None, ofile_folder='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/561', log_file_path='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/561/out.log', log_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/561/out.log' mode='a' encoding='UTF-8'>, param_file=<_io.TextIOWrapper name='/home/erschultz/sequences_to_contact_maps/results/ContactGNNEnergy/561/params.log' mode='a' encoding='UTF-8'>, split_neg_pos_edges=False, criterion=<function mse_log at 0x7fcfbc1784c0>, node_feature_size=0, input_m=256, edge_transforms=['ContactDistance(norm=False, corr=True)', 'MeanContactDistance(norm=False)', 'MeanContactDistance(norm=False, bonded=True)'], node_transforms=['AdjPCs(k=10, normalize=False, sign_net=True)'], edge_dim=3, transforms_processed=None, diag=True, corr=True, pre_transforms_processed=Compose([
  ContactDistance(norm=False, corr=True),
  MeanContactDistance(norm=False),
  MeanContactDistance(norm=False, bonded=True),
  AdjPCs(k=10, normalize=False, sign_net=True)
]), cuda=True, use_parallel=False, device=device(type='cuda'))

Dataset construction time: 12.356 minutes
Number of samples: 5000
Average num edges per graph:  64202.6016
Mean degree: [249.86 254.38 247.02 ... 253.91 251.64 251.34] +- [6.31 0.99 8.25 ... 2.04 5.21 3.97]

split sizes: train=4500, val=500, test=0, N=5000
First 100 val samples: [4410, 3523, 3661, 1766, 4612, 2591, 1972, 1822, 4639, 4962, 3383, 4226, 111, 1954, 4299, 4195, 4171, 1582, 3906, 2811, 2135, 1317, 3277, 324, 4875, 1672, 78, 4570, 672, 3288, 4767, 1716, 3809, 3135, 3, 1838, 2820, 958, 1273, 1936, 308, 916, 2119, 4682, 3296, 2610, 2576, 4783, 1449, 1300, 3616, 2623, 1956, 1263, 1686, 1207, 4503, 3237, 4370, 831, 75, 3406, 4524, 2537, 3132, 3674, 3110, 1667, 2060, 2986, 3567, 4352, 475, 4580, 3164, 2073, 1184, 2284, 225, 3833, 2314, 161, 4723, 3885, 542, 4254, 3384, 810, 2291, 459, 1440, 1412, 4864, 3267, 4781, 3912, 3229, 3762, 502, 4920, 1781, 1687]
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0.0
)
Scheduler: <torch.optim.lr_scheduler.MultiStepLR object at 0x7fcf7ee7f2b0>
#### TRAINING/VALIDATION ####
Epoch 2, loss = 1.7266
Mean test/val loss: 1.7202
[25, 50, 75] percentiles test/val loss: [1.1195 1.627  2.234 ]

Epoch 4, loss = 1.5083
Mean test/val loss: 1.5433
[25, 50, 75] percentiles test/val loss: [1.0936 1.5028 1.9081]

Epoch 6, loss = 2.0644
Mean test/val loss: 1.7390
[25, 50, 75] percentiles test/val loss: [1.128  1.6358 2.2635]

Epoch 8, loss = 1.4113
Mean test/val loss: 1.3868
[25, 50, 75] percentiles test/val loss: [0.9517 1.331  1.7093]

Epoch 10, loss = 1.5004
Mean test/val loss: 1.4579
[25, 50, 75] percentiles test/val loss: [1.0056 1.3945 1.8001]

Epoch 12, loss = 1.9056
Mean test/val loss: 1.5120
[25, 50, 75] percentiles test/val loss: [1.0346 1.4596 1.8862]

Epoch 14, loss = 1.5144
Mean test/val loss: 1.3026
[25, 50, 75] percentiles test/val loss: [0.8846 1.2152 1.6114]

Epoch 16, loss = 1.5250
Mean test/val loss: 1.3084
[25, 50, 75] percentiles test/val loss: [0.875  1.2262 1.6196]

Epoch 18, loss = 1.6372
Mean test/val loss: 1.3548
[25, 50, 75] percentiles test/val loss: [0.9185 1.2949 1.6855]

Epoch 20, loss = 1.9212
Mean test/val loss: 1.7527
[25, 50, 75] percentiles test/val loss: [1.1302 1.6419 2.2618]

Epoch 22, loss = 2.8254
Mean test/val loss: 1.5735
[25, 50, 75] percentiles test/val loss: [1.0687 1.5075 1.9612]

Epoch 24, loss = 2.9519
Mean test/val loss: 1.7291
[25, 50, 75] percentiles test/val loss: [1.0942 1.611  2.2746]

Epoch 26, loss = 1.8901
Mean test/val loss: 1.7344
[25, 50, 75] percentiles test/val loss: [1.0983 1.6168 2.2565]

Epoch 28, loss = 1.5967
Mean test/val loss: 1.4190
[25, 50, 75] percentiles test/val loss: [0.9434 1.3398 1.8058]

Epoch 30, loss = 1.3051
Mean test/val loss: 1.3878
[25, 50, 75] percentiles test/val loss: [0.8915 1.2539 1.7843]

Epoch 32, loss = 1.4360
Mean test/val loss: 1.3273
[25, 50, 75] percentiles test/val loss: [0.8945 1.2361 1.6321]

Epoch 34, loss = 2.0901
Mean test/val loss: 1.4099
[25, 50, 75] percentiles test/val loss: [0.9635 1.3623 1.7572]

Epoch 36, loss = 2.1385
Mean test/val loss: 1.7290
[25, 50, 75] percentiles test/val loss: [1.0861 1.6187 2.2493]

Epoch 38, loss = 1.5674
Mean test/val loss: 1.3208
[25, 50, 75] percentiles test/val loss: [0.8855 1.2504 1.6481]

Epoch 40, loss = 2.6843
Mean test/val loss: 1.7002
[25, 50, 75] percentiles test/val loss: [1.0579 1.5429 2.1599]

New lr: 1e-05
Epoch 42, loss = 1.3557
Mean test/val loss: 1.4129
[25, 50, 75] percentiles test/val loss: [0.941  1.3344 1.7748]

Epoch 44, loss = 1.5584
Mean test/val loss: 1.8325
[25, 50, 75] percentiles test/val loss: [1.1594 1.6902 2.3906]

Epoch 46, loss = 1.3995
Mean test/val loss: 1.3795
[25, 50, 75] percentiles test/val loss: [0.9202 1.2803 1.7431]

Epoch 48, loss = 1.5784
Mean test/val loss: 1.4900
[25, 50, 75] percentiles test/val loss: [1.0164 1.4135 1.9003]

Epoch 50, loss = 1.3173
Mean test/val loss: 1.2866
[25, 50, 75] percentiles test/val loss: [0.8545 1.2076 1.6149]

Epoch 52, loss = 1.2358
Mean test/val loss: 1.2041
[25, 50, 75] percentiles test/val loss: [0.7914 1.1128 1.5056]

Epoch 54, loss = 1.1544
Mean test/val loss: 1.1417
[25, 50, 75] percentiles test/val loss: [0.7506 1.0714 1.413 ]

Epoch 56, loss = 1.1092
Mean test/val loss: 1.1087
[25, 50, 75] percentiles test/val loss: [0.7194 1.0225 1.3811]

Epoch 58, loss = 1.0829
Mean test/val loss: 1.0860
[25, 50, 75] percentiles test/val loss: [0.7151 1.0068 1.3238]

Epoch 60, loss = 1.0610
Mean test/val loss: 1.0776
[25, 50, 75] percentiles test/val loss: [0.7175 0.994  1.3193]

Epoch 62, loss = 1.0456
Mean test/val loss: 1.0562
[25, 50, 75] percentiles test/val loss: [0.6837 0.9642 1.3   ]

Epoch 64, loss = 1.0304
Mean test/val loss: 1.0612
[25, 50, 75] percentiles test/val loss: [0.6919 0.9848 1.2873]

Epoch 66, loss = 1.0175
Mean test/val loss: 1.0755
[25, 50, 75] percentiles test/val loss: [0.6947 0.9938 1.3058]

Epoch 68, loss = 1.0064
Mean test/val loss: 1.0213
[25, 50, 75] percentiles test/val loss: [0.6462 0.9324 1.262 ]

Epoch 70, loss = 0.9956
Mean test/val loss: 1.0235
[25, 50, 75] percentiles test/val loss: [0.66   0.9291 1.2749]


Total parameters: 51479472
Total training + validation time: 20.0 hours, 29.0 mins, and 16.39999999999418 secs
Final val loss: 1.0234513581320643

split sizes: train=4500, val=500, test=0, N=5000
#### Plotting Script ####
Prediction Results:
dataset_09_28_23 sample981: 0.24254417419433594
dataset_09_28_23 sample324: 1.0491012334823608
dataset_09_28_23 sample3464: 1.328991174697876
dataset_09_28_23 sample2834: 2.5476667881011963
dataset_09_28_23 sample1936: 1.013375997543335
MSE_log: 1.236 +- 0.748

Downsampling (200k) Results:
dataset_09_28_23 sample1936-downsampling: 15.947805404663086
dataset_09_28_23 sample2834-downsampling: 61.177833557128906
dataset_09_28_23 sample324-downsampling: 85.89595031738281
dataset_09_28_23 sample3464-downsampling: 36.34074401855469
dataset_09_28_23 sample981-downsampling: 5.0893988609313965
Loss: 40.89 +- 29.535

Removing /scratch/midway3/erschultz/ContactGNNEnergy4downsample
Original sampling (400k) Results:
dataset_09_28_23 sample1936-regular: 15.265691757202148
dataset_09_28_23 sample2834-regular: 60.72184371948242
dataset_09_28_23 sample324-regular: 76.42489624023438
dataset_09_28_23 sample3464-regular: 32.46504592895508
dataset_09_28_23 sample981-regular: 5.130707740783691
Loss: 38.002 +- 26.91

Removing /scratch/midway3/erschultz/ContactGNNEnergy4regsample
